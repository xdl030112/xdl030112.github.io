{"meta":{"title":"自由を渇望する","subtitle":"ひとりぼっち","description":"Konjak_ldx's blog","author":"ldxcaicai","url":"http://ldxcaicai.github.io","root":"/"},"pages":[{"title":"所有分类","date":"2019-12-27T06:18:55.512Z","updated":"2019-12-27T06:18:55.512Z","comments":true,"path":"categories/index.html","permalink":"http://ldxcaicai.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2019-12-27T05:53:03.935Z","updated":"2019-12-27T05:53:03.935Z","comments":true,"path":"tags/index.html","permalink":"http://ldxcaicai.github.io/tags/index.html","excerpt":"","text":""},{"title":"Friends!","date":"2019-12-27T06:17:17.523Z","updated":"2019-12-27T06:17:17.523Z","comments":true,"path":"friends/index.html","permalink":"http://ldxcaicai.github.io/friends/index.html","excerpt":"","text":""}],"posts":[{"title":"杂题乱做 Round12","slug":"sol12","date":"2019-12-26T03:47:36.000Z","updated":"2019-12-26T04:42:07.972Z","comments":true,"path":"sol12/","link":"","permalink":"http://ldxcaicai.github.io/sol12/","excerpt":"","text":"某位歌姬的故事 解题思路 将序列离散化后，可以给每一段区间定一个最大值的最小上界，那么每一种上界的值是独立的，考虑把相同上界的块扯出来 DP 对于一种上界，把对应的段和限制提出来，对于每个块维护一个 maxlmaxlmaxl 表示处理到区间 iii 时，最后填入的一个等于上界的值所在的块标号应该不小于 maxlmaxlmaxl ，对于一个限制对应的块 [l,...,r][l,...,r][l,...,r] ，我们用 lll 更新 maxl[r]maxl[r]maxl[r] ，最后直接 DP 设 fi,jf_{i,j}fi,j​ 表示当前在第 iii 块，最后一个填的等于上界的数在第 jjj 块的方案数 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; inline int fix(int a) &#123; return (a%mod+mod)%mod; &#125;&#125;using namespace modular;template&lt;typename T&gt; inline void ckmin(T&amp;a,T b) &#123; a&gt;b?a=b:0; &#125;template&lt;typename T&gt; inline void ckmax(T&amp;a,T b) &#123; a&lt;b?a=b:0; &#125;const int N=1005;int n,m,A,seg[N],sz,vl[N],sig,a[N];struct Q &#123; int l,r,v; friend inline bool operator&lt;(Q a,Q b) &#123; return a.v^b.v?a.v&lt;b.v:(a.l^b.l?a.l&lt;b.l:a.r&lt;b.r); &#125;&#125;qry[N];inline int findps(int x) &#123; return lower_bound(seg+1,seg+sig+1,x)-seg; &#125;inline int findvl(int x) &#123; return lower_bound(vl+1,vl+sz+1,x)-vl; &#125;inline int calc(int w) &#123; vector&lt;int&gt;upd,psl,f[2]; int cur=0; upd.pb(0),f[0].pb(0),f[1].pb(0),psl.pb(0); for(ri i=1;i&lt;sig;++i) if(a[i]==w) upd.pb(i),psl.pb(0),f[0].pb(0),f[1].pb(0); for(ri l,r,i=1;i&lt;=m;++i) if(qry[i].v==w) &#123; if(upd.size()==1) return 0; l=lower_bound(upd.begin(),upd.end(),qry[i].l)-upd.begin(); r=lower_bound(upd.begin(),upd.end(),qry[i].r)-upd.begin()-1; ckmax(psl[r],l); &#125; f[cur=0][0]=1; for(ri i=1,s,c1,c2,up=(int)upd.size()-1;i&lt;=up;++i) &#123; cur^=1; for(ri j=0;j&lt;=i;++j) f[cur][j]=0; c1=ksm(vl[w],seg[upd[i]+1]-seg[upd[i]]),c2=ksm(vl[w]-1,seg[upd[i]+1]-seg[upd[i]]); s=0; for(ri j=psl[i];j&lt;i;++j) if(f[cur^1][j]) Add(f[cur][j],mul(f[cur^1][j],c2)); for(ri j=0;j&lt;i;++j) if(f[cur^1][j]) Add(s,f[cur^1][j]); f[cur][i]=mul(dec(c1,c2),s); &#125; int res=0; for(ri i=0,up=(int)upd.size()-1;i&lt;=up;++i) Add(res,f[cur][i]); return res;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt) &#123; n=read(),m=read(),A=read(); sig=sz=0; for(ri i=1;i&lt;=m;++i) &#123; qry[i].l=read(),qry[i].r=read()+1,qry[i].v=read(); seg[++sig]=qry[i].l,seg[++sig]=qry[i].r,vl[++sz]=qry[i].v; &#125; seg[++sig]=1,seg[++sig]=n+1; sort(seg+1,seg+sig+1),sig=unique(seg+1,seg+sig+1)-seg-1; sort(vl+1,vl+sz+1),sz=unique(vl+1,vl+sz+1)-vl-1; for(ri i=1;i&lt;=sig;++i) a[i]=sz+1; sort(qry+1,qry+m+1); for(ri i=1;i&lt;=m;++i) &#123; qry[i].l=findps(qry[i].l); qry[i].r=findps(qry[i].r); qry[i].v=findvl(qry[i].v); for(ri j=qry[i].l;j&lt;qry[i].r;++j) ckmin(a[j],qry[i].v); &#125; int res=1,ss=0; for(ri i=1;i&lt;=sz;++i) &#123; Mul(res,calc(i)); if(!res) break; &#125; if(!res ) &#123; puts(\"0\");continue; &#125; for(ri i=1;i&lt;sig;++i) if(a[i]==sz+1) ss+=seg[i+1]-seg[i]; cout&lt;&lt;mul(res,ksm(A,ss))&lt;&lt;'\\n'; &#125; return 0;&#125; 九个太阳 解题思路 单位根反演裸题，不用写题解了 好吧还是水一发题解吧。 Ans=∑i=0n(∑j=0K−1ωKij)(ni)=∑i=0K−1∑j=0nωKij(nj)=∑i=0K−1(ωKi+1)n\\begin{aligned} Ans=&amp;\\sum\\limits_{i=0}^n(\\sum\\limits_{j=0}^{K-1}\\omega_K^{ij})\\binom ni\\\\ =&amp;\\sum\\limits_{i=0}^{K-1}\\sum\\limits_{j=0}^n\\omega_K^{ij}\\binom nj\\\\ =&amp;\\sum\\limits_{i=0}^{K-1}(\\omega_K^i+1)^n \\end{aligned} Ans===​i=0∑n​(j=0∑K−1​ωKij​)(in​)i=0∑K−1​j=0∑n​ωKij​(jn​)i=0∑K−1​(ωKi​+1)n​ CODE 12345678910111213141516171819202122232425262728293031#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; inline int fix(int a) &#123; return (a%mod+mod)%mod; &#125;&#125;using namespace modular;ll n;int K,omega;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif cin&gt;&gt;n&gt;&gt;K; n%=mod-1; omega=ksm(3,(mod-1)/K); int res=0; for(ri i=0,mt=1;i&lt;K;++i,Mul(mt,omega)) Add(res,ksm(mt+1,n)); cout&lt;&lt;mul(res,Inv(K)); return 0;&#125; Hard Nim 解题思路 考虑到问题转化为求异或值为 000 的方案数，那么对于每堆石子可以选取的集合为不超过 mmm 的素数集合，发现就是个 fwtfwtfwt 快速幂 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;namespace modular &#123; const int mod=1e9+7; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; inline int fix(int a) &#123; return (a%mod+mod)%mod; &#125;&#125;using namespace modular;const int N=50005;int n,m,pri[N],tot=0,a[N&lt;&lt;1];bool vs[N];inline void init() &#123; int up=50000; for(ri i=2;i&lt;=up;++i) &#123; if(!vs[i]) pri[++tot]=i; for(ri j=1,lm=up/i;j&lt;=tot&amp;&amp;pri[j]&lt;=lm;++j) &#123; vs[i*pri[j]]=1; if(i==i/pri[j]*pri[j]) break; &#125; &#125;&#125;int lim;inline void fwt(int*a,int typ) &#123; for(ri i=1,a0,a1,iv=mod+1&gt;&gt;1;i&lt;lim;i&lt;&lt;=1) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k) &#123; a0=a[j+k],a1=a[j+k+i]; a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); if(typ==-1) Mul(a[j+k],iv),Mul(a[j+k+i],iv); &#125;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init(); while(cin&gt;&gt;n&gt;&gt;m) &#123; lim=1; while(lim&lt;=m) lim&lt;&lt;=1; for(ri i=0;i&lt;lim;++i) a[i]=0; for(ri i=1;i&lt;=tot&amp;&amp;pri[i]&lt;=m;++i) a[pri[i]]=1; fwt(a,1); for(ri i=0;i&lt;lim;++i) a[i]=ksm(a[i],n); fwt(a,-1); cout&lt;&lt;a[0]&lt;&lt;'\\n'; &#125; return 0;&#125; 二元运算 解题思路 题目给出了两种互补的基础卷积方式，那么考虑分治, 发现刚好 [l,mid][l,mid][l,mid] 中所有下标小于 [mid+1,r][mid+1,r][mid+1,r] 所有下标，于是分治 fft 处理即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;struct cp &#123; double a,b; cp(double a=0,double b=0):a(a),b(b) &#123;&#125; friend inline cp operator+(cp a,cp b) &#123; return cp(a.a+b.a,a.b+b.b); &#125; friend inline void operator+=(cp&amp;a,cp b) &#123; a=a+b; &#125; friend inline cp operator-(cp a,cp b) &#123; return cp(a.a-b.a,a.b-b.b); &#125; friend inline void operator-=(cp&amp;a,cp b) &#123; a=a-b; &#125; friend inline cp operator*(cp a,cp b) &#123; return cp(a.a*b.a-a.b*b.b,a.a*b.b+a.b*b.a); &#125; friend inline void operator*=(cp&amp;a,cp b) &#123; a=a*b; &#125; friend inline cp operator/(cp a,double b) &#123; return cp(a.a/b,a.b/b); &#125; friend inline void operator/=(cp&amp;a,double b) &#123; a=a/b; &#125;&#125;;typedef vector&lt;cp&gt; poly;const double pi=acos(-1.0);cp w[23];int lim,tim;vector&lt;int&gt;rev[23];inline void init_fft() &#123; for(ri i=0;i&lt;23;++i) w[i]=cp(cos(pi/(1&lt;&lt;i)),sin(pi/(1&lt;&lt;i))); &#125;inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void fft(poly&amp;a,int typ) &#123; for(ri i=1;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); cp a0,a1,mt; for(ri i=1,t=0;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=cp(1,0); for(ri k=0;k&lt;i;++k,mt*=w[t]) &#123; a0=a[j+k],a1=a[j+k+i]*mt; a[j+k]=a0+a1,a[j+k+i]=a0-a1; &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) a[i]/=lim;&#125;inline poly operator*(poly a,poly b) &#123; int n=(int)a.size(),m=(int)b.size(),t=n+m-1; if(t&lt;=128) &#123; poly c(t); for(ri i=0;i&lt;n;++i) for(ri j=0;j&lt;m;++j) c[i+j]+=a[i]*b[j]; return c; &#125; init(t); a.resize(lim),fft(a,1); b.resize(lim),fft(b,1); for(ri i=0;i&lt;lim;++i) a[i]*=b[i]; return fft(a,-1),a.resize(t),a;&#125;const int N=50005;int n,m,mx,q,_a[N],_b[N];poly a,b,ta,tb,tc;ll res[N&lt;&lt;2];inline void solve(int l,int r) &#123; if(l==r) &#123; res[0]+=((ll)(a[l].a+0.5))*((ll)(b[l].a+0.5)); return; &#125; int mid=l+r&gt;&gt;1; solve(l,mid),solve(mid+1,r); if(r-l+1&lt;=256) &#123; for(ri i=l;i&lt;=mid;++i) for(ri j=mid+1;j&lt;=r;++j) &#123; res[i+j]+=((ll)(a[i].a+0.5))*((ll)(b[j].a+0.5)); res[j-i]+=((ll)(a[j].a+0.5))*((ll)(b[i].a+0.5)); &#125; &#125; else &#123; ta.resize(mid-l+1),tb.resize(r-mid); for(ri i=l;i&lt;=mid;++i) ta[i-l]=a[i]; for(ri i=mid+1;i&lt;=r;++i) tb[i-mid-1]=b[i]; tc=ta*tb; for(ri i=0;i&lt;(int)tc.size();++i) res[i+mid+1+l]+=(ll)(tc[i].a+0.5); for(ri i=mid+1;i&lt;=r;++i) tb[i-mid-1]=a[i]; for(ri i=l;i&lt;=mid;++i) ta[i-l]=b[i]; reverse(ta.begin(),ta.end()); tc=ta*tb; for(ri i=0;i&lt;(int)tc.size();++i) res[i+1]+=(ll)(tc[i].a+0.5); &#125;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); freopen(\"own.out\",\"w\",stdout); #endif init_fft(); for(ri tt=read();tt;--tt) &#123; n=read(),m=read(),q=read(),mx=-1; for(ri i=1;i&lt;=n;++i) mx=max(mx,_a[i]=read()); for(ri i=1;i&lt;=m;++i) mx=max(mx,_b[i]=read()); a.clear(),a.resize(mx+1); b.clear(),b.resize(mx+1); for(ri i=0;i&lt;=(mx&lt;&lt;1);++i) res[i]=0; for(ri i=1;i&lt;=n;++i) ++a[_a[i]].a; for(ri i=1;i&lt;=m;++i) ++b[_b[i]].a; solve(0,mx); for(ri x;q;--q) &#123; x=read(); if(x&lt;=(mx&lt;&lt;1)) cout&lt;&lt;res[x]&lt;&lt;'\\n'; else puts(\"0\"); &#125; &#125; return 0;&#125; Lightsabers (hard) 解题思路 可以直接对每种颜色构造形式幂级数然后做双模分治 nttnttntt 不过看到了一种神奇的启发式合并的做法 大概是每次合并两个当前度最小的多项式，复杂度仍然是 O(nlog⁡n2)O(n\\log n^2)O(nlogn2) 本来听说要快一点但是由于我写的双模ntt太菜了于是被分治ntt吊着打 CODE1 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef vector&lt;int&gt; poly;#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=2e5+5;int n,m,K,a[N],vl[N],cnt[N],sig=0;inline int find(int x) &#123; return lower_bound(vl+1,vl+sig+1,x)-vl; &#125;struct Ntt &#123; int mod,g,lim,tim,w[21],invv[21]; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; vector&lt;int&gt;rev[21]; inline void init_ntt() &#123; invv[0]=1; for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;21;++i) invv[i]=mul(invv[i-1],iv); w[20]=ksm(g,(mod-1)&gt;&gt;21); for(ri i=19;~i;--i) w[i]=mul(w[i+1],w[i+1]); &#125; inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1)); &#125; inline void ntt(poly&amp;a,int typ) &#123; for(ri i=1;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1,mt;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=1; for(ri k=0;k&lt;i;++k,Mul(mt,w[t])) &#123; a0=a[j+k],a1=mul(a[j+k+i],mt); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) Mul(a[i],invv[tim]); &#125; inline poly poly_mul(poly a,poly b) &#123; int n=(int)a.size(),m=(int)b.size(),t=n+m-1; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i) Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a; &#125;&#125;A,B;const int mod=1009;int iv1,iv2;inline ll mul(ll a,ll b,ll mod) &#123; return a*b-(ll)((long double)a/mod*b+1e-8)*mod; &#125;inline int merge(int x,int y) &#123; ll md=(ll)A.mod*B.mod; return (mul(x,(ll)B.mod*iv1%md,md)+mul(y,(ll)A.mod*iv2%md,md))%md%mod;&#125;inline poly poly_mul(poly a,poly b) &#123; int n=(int)a.size(),m=(int)b.size(),t=n+m-1; if(t&lt;=128) &#123; poly c(t); for(ri i=0;i&lt;n;++i) if(a[i]) for(ri j=0;j&lt;m;++j) &#123; c[i+j]+=a[i]*b[j]; if(c[i+j]&gt;=100000000) c[i+j]%=mod; &#125; for(ri i=0;i&lt;t;++i) c[i]%=mod; return c; &#125; poly _a=A.poly_mul(a,b),_b=B.poly_mul(a,b); a.resize(t); for(ri i=0;i&lt;t;++i) a[i]=merge(_a[i],_b[i]); return a;&#125;inline poly getpoly(int x) &#123; return poly(x+1,1); &#125;inline poly solve(int l,int r) &#123; if(l==r) return getpoly(cnt[l]); int mid=l+r&gt;&gt;1; return poly_mul(solve(l,mid),solve(mid+1,r));&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif A.mod=998244353,A.g=3,A.init_ntt(); B.mod=1004535809,B.g=3,B.init_ntt(); iv1=A.Inv(B.mod),iv2=B.Inv(A.mod); n=read(),m=read(),K=read(); for(ri i=1;i&lt;=n;++i) a[i]=vl[++sig]=read(); sort(vl+1,vl+sig+1),sig=unique(vl+1,vl+sig+1)-vl-1; for(ri i=1;i&lt;=n;++i) ++cnt[find(a[i])]; cout&lt;&lt;solve(1,sig)[K]; return 0;&#125; CODE2 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef vector&lt;int&gt; poly;#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=2e5+5;int n,m,K,a[N],vl[N],cnt[N],sig=0;inline int find(int x) &#123; return lower_bound(vl+1,vl+sig+1,x)-vl; &#125;struct Ntt &#123; int mod,g,lim,tim,w[21],invv[21]; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; vector&lt;int&gt;rev[21]; inline void init_ntt() &#123; invv[0]=1; for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;21;++i) invv[i]=mul(invv[i-1],iv); w[20]=ksm(g,(mod-1)&gt;&gt;21); for(ri i=19;~i;--i) w[i]=mul(w[i+1],w[i+1]); &#125; inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1)); &#125; inline void ntt(poly&amp;a,int typ) &#123; for(ri i=1;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1,mt;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=1; for(ri k=0;k&lt;i;++k,Mul(mt,w[t])) &#123; a0=a[j+k],a1=mul(a[j+k+i],mt); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) Mul(a[i],invv[tim]); &#125; inline poly poly_mul(poly a,poly b) &#123; int n=(int)a.size(),m=(int)b.size(),t=n+m-1; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i) Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a; &#125;&#125;A,B;const int mod=1009;int iv1,iv2;inline ll mul(ll a,ll b,ll mod) &#123; return a*b-(ll)((long double)a/mod*b+1e-8)*mod; &#125;inline int merge(int x,int y) &#123; ll md=(ll)A.mod*B.mod; return (mul(x,(ll)B.mod*iv1%md,md)+mul(y,(ll)A.mod*iv2%md,md))%md%mod;&#125;inline poly poly_mul(poly a,poly b) &#123; int n=(int)a.size(),m=(int)b.size(),t=n+m-1; if(t&lt;=128) &#123; poly c(t); for(ri i=0;i&lt;n;++i) if(a[i]) for(ri j=0;j&lt;m;++j) &#123; c[i+j]+=a[i]*b[j]; if(c[i+j]&gt;=100000000) c[i+j]%=mod; &#125; for(ri i=0;i&lt;t;++i) c[i]%=mod; return c; &#125; poly _a=A.poly_mul(a,b),_b=B.poly_mul(a,b); a.resize(t); for(ri i=0;i&lt;t;++i) a[i]=merge(_a[i],_b[i]); return a;&#125;inline poly getpoly(int x) &#123; return poly(x+1,1); &#125;inline poly solve(int l,int r) &#123; if(l==r) return getpoly(cnt[l]); int mid=l+r&gt;&gt;1; return poly_mul(solve(l,mid),solve(mid+1,r));&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif A.mod=998244353,A.g=3,A.init_ntt(); B.mod=1004535809,B.g=3,B.init_ntt(); iv1=A.Inv(B.mod),iv2=B.Inv(A.mod); n=read(),m=read(),K=read(); for(ri i=1;i&lt;=n;++i) a[i]=vl[++sig]=read(); sort(vl+1,vl+sig+1),sig=unique(vl+1,vl+sig+1)-vl-1; for(ri i=1;i&lt;=n;++i) ++cnt[find(a[i])]; cout&lt;&lt;solve(1,sig)[K]; return 0;&#125; Kyoya and Train 解题思路 考虑朴素 dp ，设 fi,Tf_{i,T}fi,T​ 表示当前在点 iii 时刻为 ttt 的最小花费 那么有显然的转移 fu,T=min⁡v{∑i=1tfv,T+i×P(u,v),i}f_{u,T}=\\min\\limits_v\\{\\sum\\limits_{i=1}^tf_{v,T+i}\\times P_{(u,v),i}\\}fu,T​=vmin​{i=1∑t​fv,T+i​×P(u,v),i​} 发现可以分治 fft 出边的贡献，于是 O(mtlog⁡t2)O(mt\\log t^2)O(mtlogt2) 过了 我把单向边建成双向的调了一年 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;struct cp &#123; double x,y; cp(double x=0,double y=0):x(x),y(y) &#123;&#125; friend inline cp operator+(cp a,cp b) &#123; return cp(a.x+b.x,a.y+b.y); &#125; friend inline void operator+=(cp&amp;a,cp b) &#123; a=a+b; &#125; friend inline cp operator-(cp a,cp b) &#123; return cp(a.x-b.x,a.y-b.y); &#125; friend inline void operator-=(cp&amp;a,cp b) &#123; a=a-b; &#125; friend inline cp operator*(cp a,cp b) &#123; return cp(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x); &#125; friend inline void operator*=(cp&amp;a,cp b) &#123; a=a*b; &#125; friend inline cp operator*(cp a,double b) &#123; return cp(a.x*b,a.y*b); &#125; friend inline void operator*=(cp&amp;a,double b) &#123; a=a*b; &#125; friend inline cp operator/(cp a,double b) &#123; return cp(a.x/b,a.y/b); &#125; friend inline void operator/=(cp&amp;a,double b) &#123; a=a/b; &#125;&#125;;typedef vector&lt;cp&gt; poly;const double pi=acos(-1.0);int lim,tim,n,m,t,W;cp w[23];vector&lt;int&gt;rev[23];inline void init_fft() &#123; for(ri i=0;i&lt;23;++i) w[i]=cp(cos(pi/(1&lt;&lt;i)),sin(pi/(1&lt;&lt;i))); &#125;inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void fft(poly&amp;a,int typ) &#123; for(ri i=1;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); cp a0,a1,mt; for(ri i=1,t=0;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=cp(1,0); for(ri k=0;k&lt;i;++k,mt*=w[t]) &#123; a0=a[j+k],a1=a[j+k+i]*mt; a[j+k]=a0+a1,a[j+k+i]=a0-a1; &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) a[i]/=lim;&#125;inline poly operator*(poly a,poly b) &#123; int n=(int)a.size(),m=(int)b.size(),t=n+m-1; init(t); a.resize(lim),fft(a,1); b.resize(lim),fft(b,1); for(ri i=0;i&lt;lim;++i) a[i]*=b[i]; return fft(a,-1),a.resize(t),a;&#125;const int N=105,M=205,K=20005;int a[M],b[M],c[M],dis[N][N];double f[N][K],sum[M][K],p[M][K];inline void solve(int l,int r) &#123; if(l==r) &#123; for(ri e=1;e&lt;=m;++e) f[a[e]][l]=min(f[a[e]][l],sum[e][l]+c[e]); return; &#125; int mid=l+r&gt;&gt;1; solve(mid+1,r); poly F(r-mid),G(r-l+1),H; for(ri e=1;e&lt;=m;++e) &#123; for(ri i=mid+1;i&lt;=r;++i) F[i-mid-1]=cp(f[b[e]][i],0); for(ri i=1;i&lt;=r-l;++i) G[r-l-i]=cp(p[e][i],0); H=F*G; for(ri i=l;i&lt;=mid;++i) sum[e][i]+=H[i-mid-1+r-l].x; &#125; solve(l,mid);&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init_fft(); n=read(),m=read(),t=read(),W=read(); for(ri i=1;i&lt;=n;++i) for(ri j=1;j&lt;=n;++j) dis[i][j]=i==j?0:1e9; for(ri i=1;i&lt;=m;++i) &#123; a[i]=read(),b[i]=read(),c[i]=read(); if(c[i]&lt;dis[a[i]][b[i]]) dis[a[i]][b[i]]=c[i]; for(ri j=1;j&lt;=t;++j) p[i][j]=read()/100000.0; &#125; for(ri k=1;k&lt;=n;++k) for(ri i=1;i&lt;=n;++i) for(ri j=1;j&lt;=n;++j) dis[i][j]=min(dis[i][j],dis[i][k]+dis[k][j]); for(ri i=0;i&lt;N;++i) for(ri j=0;j&lt;K;++j) f[i][j]=1e9; for(ri i=1;i&lt;=n;++i) f[i][t+1]=dis[i][n]+W; for(ri i=0;i&lt;=t;++i) f[n][i]=0; double ss; for(ri e=1;e&lt;=m;++e) &#123; ss=0; for(ri i=1;i&lt;=t;++i) &#123; ss+=p[e][t+1-i]; sum[e][i]=ss*f[b[e]][t+1]; &#125; &#125; solve(0,t); printf(\"%.10lf\",f[1][0]); return 0;&#125; Frightful Formula 解题思路 考虑每个格子对答案的贡献，发现格子 (i&gt;1,j&gt;1)(i&gt;1,j&gt;1)(i&gt;1,j&gt;1) 的系数是 (n+n−i−jn−i)an−jbn−i\\binom{n+n-i-j}{n-i}a^{n-j}b^{n-i}(n−in+n−i−j​)an−jbn−i ，格子 (1,i&gt;1)(1,i&gt;1)(1,i&gt;1) 的系数是 (n+n−2−in−2)an−ibn−1\\binom{n+n-2-i}{n-2}a^{n-i}b^{n-1}(n−2n+n−2−i​)an−ibn−1 ，格子 (i&gt;1,1)(i&gt;1,1)(i&gt;1,1) 的系数是 (n+n−2−in−2)an−1bn−i\\binom{n+n-2-i}{n-2}a^{n-1}b^{n-i}(n−2n+n−2−i​)an−1bn−i ，那么显然 Ans=∑i=2nf1,i(n+n−2−in−2)an−ibn−1+∑i=2nfi,1(n+n−2−in−2)an−1bn−i+∑i=2n∑j=2nc(n+n−i−jn−i)an−jbn−i\\begin{aligned} Ans=&amp;\\sum\\limits_{i=2}^nf_{1,i}\\binom{n+n-2-i}{n-2}a^{n-i}b^{n-1}+\\sum\\limits_{i=2}^nf_{i,1}\\binom{n+n-2-i}{n-2}a^{n-1}b^{n-i}+\\sum\\limits_{i=2}^n\\sum\\limits_{j=2}^nc\\binom{n+n-i-j}{n-i}a^{n-j}b^{n-i} \\end{aligned} Ans=​i=2∑n​f1,i​(n−2n+n−2−i​)an−ibn−1+i=2∑n​fi,1​(n−2n+n−2−i​)an−1bn−i+i=2∑n​j=2∑n​c(n−in+n−i−j​)an−jbn−i​ 发现前面的可以 O(n)O(n)O(n) 算后面的可以卷积算，复杂度 O(nlog⁡n)O(n\\log n)O(nlogn) 其实后面的式子可以用组合数推出O(n)的式子但由于我太懒了就不写了，可以参见官方题解 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;struct cp &#123; double x,y; cp(double x=0,double y=0):x(x),y(y) &#123;&#125; friend inline cp operator+(cp a,cp b) &#123; return cp(a.x+b.x,a.y+b.y); &#125; friend inline void operator+=(cp&amp;a,cp b) &#123; a=a+b; &#125; friend inline cp operator-(cp a,cp b) &#123; return cp(a.x-b.x,a.y-b.y); &#125; friend inline void operator-=(cp&amp;a,cp b) &#123; a=a-b; &#125; friend inline cp operator*(cp a,cp b) &#123; return cp(a.x*b.x-a.y*b.y,a.x*b.y+a.y*b.x); &#125; friend inline void operator*=(cp&amp;a,cp b) &#123; a=a*b; &#125; friend inline cp operator*(cp a,double b) &#123; return cp(a.x*b,a.y*b); &#125; friend inline void operator*=(cp&amp;a,double b) &#123; a=a*b; &#125; friend inline cp operator/(cp a,double b) &#123; return cp(a.x/b,a.y/b); &#125; friend inline void operator/=(cp&amp;a,double b) &#123; a=a/b; &#125; inline cp operator~() const &#123; return cp(x,-y); &#125;&#125;;typedef vector&lt;cp&gt; poly;const double pi=acos(-1.0);int lim,tim;vector&lt;cp&gt; w[20];vector&lt;int&gt;rev[20];inline void init_fft() &#123; w[19].resize(1&lt;&lt;19); for(ri i=0,lm=1&lt;&lt;19;i&lt;lm;++i) w[19][i]=cp(cos(pi/lm*i),sin(pi/lm*i)); for(ri i=18;~i;--i) &#123; w[i].resize(1&lt;&lt;i); for(ri j=0,up=1&lt;&lt;i;j&lt;up;++j) w[i][j]=w[i+1][j&lt;&lt;1]; &#125;&#125;inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void fft(poly&amp;a,int typ) &#123; for(ri i=1;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); cp a0,a1; for(ri i=1,t=0;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; for(ri k=0;k&lt;i;++k) &#123; a0=a[j+k],a1=a[j+k+i]*w[t][k]; a[j+k]=a0+a1,a[j+k+i]=a0-a1; &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) a[i]/=lim;&#125;namespace modular &#123; const int mod=1e6+3; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;const int N=4e5+5,blo=1023;inline int poly_mul(int*a,int*b,int n,int m,int*c) &#123; int t=n+m-1; init(t); poly A(lim),B(lim),P(lim),Q(lim); for(ri i=0;i&lt;n;++i) A[i]=cp(a[i]&gt;&gt;10,a[i]&amp;blo); for(ri i=0;i&lt;m;++i) B[i]=cp(b[i]&gt;&gt;10,b[i]&amp;blo); fft(A,1),fft(B,1); cp cur[4]; for(ri i=0,j=0;i&lt;lim;++i,j=j?j-1:lim-1) &#123; cur[0]=(A[i]+(~A[j]))*cp(0.5,0); cur[1]=((~A[j])-A[i])*cp(0,0.5); cur[2]=(B[i]+(~B[j]))*cp(0.5,0); cur[3]=((~B[j])-B[i])*cp(0,0.5); P[i]=cur[0]*cur[2]+cp(0,1)*cur[1]*cur[3]; Q[i]=cur[0]*cur[3]+cp(0,1)*cur[1]*cur[2]; &#125; fft(P,-1),fft(Q,-1); ll cr[4]; for(ri i=0;i&lt;t;++i) &#123; cr[0]=(ll)(P[i].x+0.5)%mod; cr[1]=(ll)(P[i].y+0.5)%mod; cr[2]=(ll)(Q[i].x+0.5)%mod; cr[3]=(ll)(Q[i].y+0.5)%mod; c[i]=((cr[0]&lt;&lt;20)+(cr[2]+cr[3]&lt;&lt;10)+cr[1])%mod; &#125; return t;&#125;int n,c,vl1[N&gt;&gt;1],vl2[N&gt;&gt;1],fac[N],ifac[N],pwa[N&gt;&gt;1],pwb[N&gt;&gt;1];inline void init() &#123; int up=n&lt;&lt;1; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=up;++i) &#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=up;++i) Mul(ifac[i],ifac[i-1]);&#125;inline int C(int n,int m) &#123; return n&lt;m||m&lt;0?0:(ll)fac[n]*ifac[m]*ifac[n-m]%mod; &#125;int F[N&gt;&gt;1],G[N&gt;&gt;1],H[N],len;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init_fft(); pwa[0]=pwb[0]=1; n=read(),pwa[1]=read(),pwb[1]=read(),c=read(); init(); for(ri i=2;i&lt;=n;++i) pwa[i]=mul(pwa[i-1],pwa[1]),pwb[i]=mul(pwb[i-1],pwb[1]); for(ri i=1;i&lt;=n;++i) vl1[i]=read(); for(ri i=1;i&lt;=n;++i) vl2[i]=read(); int res=0; for(ri i=2;i&lt;=n;++i) &#123; Add(res,mul(mul(vl1[i],C((n&lt;&lt;1)-2-i,n-2)),mul(pwa[n-1],pwb[n-i]))); Add(res,mul(mul(vl2[i],C((n&lt;&lt;1)-2-i,n-2)),mul(pwb[n-1],pwa[n-i]))); &#125; for(ri i=0;i&lt;n-1;++i) F[i]=mul(ifac[i],pwa[i]),G[i]=mul(ifac[i],pwb[i]); len=poly_mul(F,G,n-1,n-1,H); for(ri i=0;i&lt;len;++i) Add(res,mul(mul(c,fac[i]),H[i])); cout&lt;&lt;res; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round11","slug":"sol11","date":"2019-12-24T15:12:07.000Z","updated":"2019-12-25T00:05:39.723Z","comments":true,"path":"sol11/","link":"","permalink":"http://ldxcaicai.github.io/sol11/","excerpt":"","text":"Triple 解题思路： 还是跟 黎明前的巧克力 差不多，构造集合幂级数，那么答案等于 ∏i=1n(axXi+bxYi+cxZi)\\prod\\limits_{i=1}^n(ax^{X_i}+bx^{Y_i}+cx^{Z_i})i=1∏n​(axXi​+bxYi​+cxZi​) ，这样每一个式子对答案的贡献一定是 ±a±b±c\\pm a\\pm b\\pm c±a±b±c ，但直接 fwtfwtfwt 之后解方程常数实在太大，考虑优化，发现可以把式子改写成 ∑i=1n(a+bYi⊕Xi+cZi⊕Xi)\\sum\\limits_{i=1}^n(a+b^{Y_i\\oplus X_i}+c^{Z_i\\oplus X_i})i=1∑n​(a+bYi​⊕Xi​+cZi​⊕Xi​) 最后给结果异或上 ⊕i=1nXi\\oplus_{i=1}^nX_i⊕i=1n​Xi​ ，显然上述两种方式得到的结果是一样的，那么这次每个式子对答案的贡献就是 a±b±ca\\pm b\\pm ca±b±c ，于是就如同前置题目一样分别把 ∑i=1nxYi⊕Xi,∑i=1nxZi⊕Xi,∑i=1nxYi⊕Zi\\sum\\limits_{i=1}^nx^{Y_i\\oplus X_i},\\sum\\limits_{i=1}^nx^{Z_i\\oplus X_i},\\sum\\limits_{i=1}^nx^{Y_i\\oplus Z_i}i=1∑n​xYi​⊕Xi​,i=1∑n​xZi​⊕Xi​,i=1∑n​xYi​⊕Zi​ 给 dwtdwtdwt 掉，算成正确点值之后再 idwtidwtidwt 回去就行了 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;#define ri register inttypedef long long ll;using namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;const int N=1e6+5;int lim,n,X,Y,Z,vl[4],a[N],b[N],c[N];inline void dwt(int*a,int typ) &#123; for(ri i=1,a0,a1,iv=mod+1&gt;&gt;1;i&lt;lim;i&lt;&lt;=1)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k) &#123; a0=a[j+k],a1=a[j+k+i]; a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); if(typ==-1) Mul(a[j+k],iv),Mul(a[j+k+i],iv); &#125;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),lim=1&lt;&lt;read(); X=read(),Y=read(),Z=read(); int ss=0; for(ri i=1,_a,_b,_c;i&lt;=n;++i) &#123; _a=read(),_b=read()^_a,_c=read()^_a; ss^=_a; ++a[_b^_c],++b[_b],++c[_c]; &#125; dwt(a,1),dwt(b,1),dwt(c,1); vl[0]=add(X,add(Y,Z)); vl[1]=add(X,dec(Y,Z)); vl[2]=add(X,dec(Z,Y)); vl[3]=dec(X,add(Y,Z)); for(ri iv=Inv(4),x,y,z,w,i=0;i&lt;lim;++i) &#123; x=mul(iv,add(add(n,a[i]),add(b[i],c[i]))); y=mul(iv,dec(add(n,b[i]),add(c[i],a[i]))); z=mul(iv,dec(add(n,c[i]),add(b[i],a[i]))); w=mul(iv,dec(add(n,a[i]),add(b[i],c[i]))); a[i]=mul(mul(ksm(vl[0],x),ksm(vl[1],y)),mul(ksm(vl[2],z),ksm(vl[3],w))); &#125; dwt(a,-1); for(ri i=0;i&lt;lim;++i) cout&lt;&lt;a[i^ss]&lt;&lt;' '; return 0;&#125; 小 Y 的背包计数问题 解题思路： 对于第 iii 种物品，如果按照模 iii 的余数记录前缀和做背包 DPDPDP 的话复杂度是 O(ni)O(ni)O(ni) 的，那么考虑对前 KKK 种物品按照上述做法进行背包，那么后面的物品最多能选 nK\\frac nKKn​ 个，所以考虑如下 DPDPDP ，设后面所有物品一共选了 iii 个，总和为 jjj 的方案数，对于转移作如下考虑，我们想象这 iii 个物品排好序放在一个序列上，现在有两种操作： 在队首插入一个大小为 K+1K+1K+1 的物品 给当前所有物品权值+1 这样能做到不重不漏，复杂度为 O(n2K)O(\\frac{n^2}K)O(Kn2​) ，因此 KKK 取 n\\sqrt nn​ 时最优 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=23333333; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;const int N=1e5+5;int f[2][N],cur,g[350][N],n,sum[350],ss[N];int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); f[cur=0][0]=1; int res=0,sig=sqrt(n); for(ri x,id=1;id&lt;=sig;++id) &#123; x=id*id; cur^=1; for(ri i=0;i&lt;id;++i) sum[i]=0; for(ri i=0,t=0;i&lt;=n;++i,t=t==id-1?0:t+1) &#123; Add(sum[t],f[cur^1][i]); f[cur][i]=sum[t]; if(i&gt;=x) Dec(sum[t],f[cur^1][i-x]); &#125; &#125; g[0][0]=1; for(ri i=0;i&lt;=sig;++i) for(ri j=0;j&lt;=n;++j) if(g[i][j]) &#123; if(i&amp;&amp;i+j&lt;=n) Add(g[i][j+i],g[i][j]); if(j+sig+1&lt;=n) Add(g[i+1][j+sig+1],g[i][j]); if(j) Add(ss[j],g[i][j]); &#125; ss[0]=1; for(ri i=0;i&lt;=n;++i) Add(res,mul(ss[i],f[cur][n-i])); cout&lt;&lt;res; return 0;&#125; 最大前缀和 解题思路： 暴力枚举每种前缀的集合为最大前缀和的答案那么后面填上的数组成的任意前缀和都必须小于0，把这个方案数设为 ggg 类似考虑一个集合作为最大前缀和，把这个序列反过来，则一定不存在前缀和小于0，于是同理定义一个 fff ，把这两个状压 dpdpdp 出来即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch)) f^=ch=='-',ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; inline int fix(int a) &#123; return (a%mod+mod)%mod; &#125;&#125;using namespace modular;const int N=25;int n,lim;ll s1[1&lt;&lt;20];int s2[1&lt;&lt;20],f[1&lt;&lt;20],g[1&lt;&lt;20];inline void fmt(ll*a1,int*a2) &#123; for(ri i=1;i&lt;lim;i&lt;&lt;=1) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k) s1[j+k+i]+=s1[j+k],Add(s2[j+k+i],s2[j+k]);&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),lim=1&lt;&lt;n; for(ri i=0;i&lt;n;++i) s1[1&lt;&lt;i]=read(),s2[1&lt;&lt;i]=fix(s1[1&lt;&lt;i]),f[1&lt;&lt;i]=1; fmt(s1,s2); g[0]=1; for(ri i=1;i&lt;lim;++i) &#123; if(s1[i]&gt;=0) &#123; for(ri j=0;j&lt;n;++j) if(!(i&gt;&gt;j&amp;1)) Add(f[i|(1&lt;&lt;j)],f[i]); &#125; else for(ri j=0;j&lt;n;++j) if(i&gt;&gt;j&amp;1) Add(g[i],g[i^(1&lt;&lt;j)]); &#125; int res=0; for(ri i=1;i&lt;lim;++i) Add(res,mul(mul(s2[i],f[i]),g[(lim-1)^i])); cout&lt;&lt;res; return 0;&#125; Chef and Horcrux 解题思路： 先简单求出 mexmexmex 为 iii 的子序列个数，然后直接 KKK 进制 fwtfwtfwt 转点值，然后快速幂一下再转回去统计答案就完了 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl() &#123; ll ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=330301441; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;const int N=1e5+5;int n,K,X,pw[N],inv[11],a[N&lt;&lt;4],cnt[N],mx,lim,w[11][11];inline void init() &#123; pw[0]=1; for(ri i=1;i&lt;=100000;++i) pw[i]=add(pw[i-1],pw[i-1]); inv[1]=1; for(ri i=2;i&lt;11;++i) &#123; inv[i]=mul(inv[mod-mod/i*i],mod-mod/i),w[i][0]=1,w[i][1]=ksm(3,(mod-1)/(i&lt;&lt;1)); for(ri j=2;j&lt;i;++j) w[i][j]=mul(w[i][j-1],w[i][1]); &#125;&#125;inline void fft(int*a,int typ) &#123; static int sum[11]; for(ri j=0;j&lt;K;++j) if(a[j]) for(ri i=0,t=0;i&lt;K;++i,t=t+j&lt;K?t+j:t+j-K) Add(sum[i],mul(a[j],w[K][t])); for(ri i=0;i&lt;K;++i) a[i]=sum[i],sum[i]=0; if(~typ) return; for(ri i=1;i+i&lt;K;++i) swap(a[i],a[K-i]); for(ri i=0;i&lt;K;++i) Mul(a[i],inv[K]);&#125;inline void fwt(int*a,int typ) &#123; static int cur[11]; for(ri i=1;i&lt;lim;i*=K) for(ri j=0,len=i*K;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k) &#123; for(ri o=0;o&lt;K;++o) cur[o]=a[o*i+j+k]; fft(cur,typ); for(ri o=0;o&lt;K;++o) a[o*i+j+k]=cur[o]; &#125;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init(); for(ri ps,tt=read();tt;--tt) &#123; n=read(),K=read(),X=readl()%(mod-1); mx=0; for(ri i=1,x;i&lt;=n;++i) x=read(),++cnt[x],mx=max(mx,x); ++mx; for(ri i=0,pre=0,premt=1;i&lt;=mx;++i) &#123; pre+=cnt[i]; a[i]=mul(premt,pw[n-pre]); if(!cnt[i]) &#123; ps=i;break; &#125; Mul(premt,dec(pw[cnt[i]],1)); &#125; for(lim=1;lim&lt;=ps;lim*=K); int res=0,ss=ksm(Inv(pw[n]),X); fwt(a,1); for(ri i=0;i&lt;lim;++i) a[i]=ksm(a[i],X); fwt(a,-1); for(ri i=0;i&lt;lim;++i) if(a[i]) Mul(a[i],ss),Add(res,mul(ksm(i,2*i),ksm(a[i],3*i))),a[i]=0; cout&lt;&lt;res&lt;&lt;'\\n'; for(ri i=0;i&lt;=mx;++i) cnt[i]=0; &#125; return 0;&#125; 生成树求和 解题思路： 主要是得观察到可以按位考虑，那么每一位本来应该是做不进位加法但是矩阵树只能做乘法，因此我们将其转为点值，矩阵树之后再转回来即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=1e9+7,iv3=(mod+1)/3; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; inline int fix(int a) &#123; return (a%mod+mod)%mod; &#125;&#125;using namespace modular;struct cp &#123; int a,b; cp(int a=0,int b=0):a(a),b(b) &#123;&#125; friend inline cp operator+(cp a, cp b) &#123; return cp(add(a.a,b.a),add(a.b,b.b)); &#125; friend inline void operator+=(cp&amp;a,cp b) &#123; a=a+b; &#125; friend inline cp operator-(cp a,cp b) &#123; return cp(dec(a.a,b.a),dec(a.b,b.b)); &#125; friend inline void operator-=(cp&amp;a,cp b) &#123; a=a-b; &#125; friend inline cp operator*(cp a,cp b) &#123; return cp(dec(mul(a.a,b.a),mul(a.b,b.b)),dec(add(mul(a.a,b.b),mul(a.b,b.a)),mul(a.b,b.b))); &#125; friend inline void operator*=(cp&amp;a,cp b) &#123; a=a*b; &#125; friend inline cp operator*(cp a,int b) &#123; return cp(mul(a.a,b),mul(a.b,b)); &#125; friend inline void operator*=(cp&amp;a,int b) &#123; a=a*b; &#125; inline cp inv() const &#123; return cp(dec(a,b),mod-b)*Inv(dec(add(mul(a,a),mul(b,b)),mul(a,b))); &#125; friend inline cp operator/(cp a,cp b) &#123; return a*(b.inv()); &#125; friend inline void operator/=(cp&amp;a,cp b) &#123; a=a/b; &#125; friend inline bool operator!=(cp a,cp b) &#123; return a.a^b.a||a.b^b.b; &#125;&#125;w[3];const int N=105;int n,m;cp a[N][N];struct edge&#123; int u,v,w; edge(int u=0,int v=0,int w=0):u(u),v(v),w(w) &#123;&#125;&#125;e[N*N&gt;&gt;1];inline cp Det() &#123; cp res(1,0),iv,t; vector&lt;int&gt;pos; for(ri ps,i=1;i&lt;n;++i) &#123; for(ps=i;ps&lt;n;++ps) if(a[ps][i]!=cp(0,0)) break; if(ps==n) &#123; res=cp(0,0);break; &#125; if(ps&gt;i) &#123; res=cp(mod-res.a,mod-res.b); for(ri j=1;j&lt;n;++j) swap(a[i][j],a[ps][j]); &#125; pos.clear(); for(ri j=i;j&lt;n;++j) if(a[i][j]!=cp(0,0)) pos.pb(j); iv=a[i][i].inv(); for(ri j=i,up=pos.size();j&lt;n;++j) if(a[j][i]!=cp(0,0)&amp;&amp;j!=i) &#123; t=iv*a[j][i]; for(ri k=0;k&lt;up;++k) a[j][pos[k]]-=a[i][pos[k]]*t; &#125; res*=a[i][i]; &#125; for(ri i=1;i&lt;n;++i) for(ri j=1;j&lt;n;++j) a[i][j]=cp(0,0); return res;&#125;cp cur[3];int vl[N*N&gt;&gt;1];inline void idft() &#123; static cp sum[3]; for(ri j=0;j&lt;3;++j) for(ri i=0;i&lt;3;++i) sum[i]+=cur[j]*w[i*j&lt;3?i*j:i*j-3]; for(ri i=0;i&lt;3;++i) cur[i]=sum[i]*iv3,sum[i]=cp(0,0); swap(cur[1],cur[2]);&#125;inline int calc() &#123; return add(cur[1].a,add(cur[2].a,cur[2].a)); &#125;int main() &#123; freopen(\"sum.in\",\"r\",stdin); freopen(\"sum.out\",\"w\",stdout); n=read(),m=read(); w[0]=cp(1,0); w[1]=cp(0,1); w[2]=cp(mod-1,mod-1); int mx=0,res=0; for(ri i=1;i&lt;=m;++i) e[i].u=read(),e[i].v=read(),e[i].w=read(),mx=max(mx,e[i].w); cp t; for(ri i=1;i&lt;=mx;i*=3) &#123; for(ri j=1;j&lt;=m;++j) vl[j]=e[j].w/i%3; for(ri o=0;o&lt;3;++o) &#123; for(ri j=1;j&lt;=m;++j) &#123; t=w[vl[j]*o%3]; a[e[j].u][e[j].u]+=t; a[e[j].v][e[j].v]+=t; a[e[j].u][e[j].v]-=t; a[e[j].v][e[j].u]-=t; &#125; cur[o]=Det(); &#125; idft(),Add(res,mul(i,calc())); &#125; cout&lt;&lt;res; return 0;&#125; Petya and Sequence 解题思路： 考虑如何判定，发现把 BBB 给 reversereversereverse 过来就是在做循环卷积，那么相当于是问将 AAA 在转点值之后有没有零项，于是莽一个 Bluestein′s algorithmBluestein&#x27;s\\ algorithmBluestein′s algorithm 就行了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef vector&lt;int&gt; poly;#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch)) f^=ch=='-',ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;namespace modular &#123; int mod; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; inline int fix(int a) &#123; return (a%mod+mod)%mod; &#125;&#125;using namespace modular;const int N=30005;int iv1,iv2;int vl[N],n,G,pri[1000005],tot=0,omega[N&lt;&lt;1];bool vs[10000005];inline int C2(int x) &#123; return (ll)x*(x-1)/2%n; &#125;struct Ntt &#123; int mod,g,lim,tim; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125; inline int fix(int a) &#123; return (a%mod+mod)%mod; &#125; int w[19],invv[19]; vector&lt;int&gt;rev[19]; inline void init_ntt() &#123; invv[0]=1; for(ri iv=mod+1&gt;&gt;1,i=1;i&lt;19;++i) invv[i]=mul(invv[i-1],iv); w[18]=ksm(g,(mod-1)&gt;&gt;19); for(ri i=17;~i;--i) w[i]=mul(w[i+1],w[i+1]); &#125; inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1)); &#125; inline void ntt(poly&amp;a,int typ) &#123; for(ri i=1;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1,mt;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=1; for(ri k=0;k&lt;i;++k,Mul(mt,w[t])) &#123; a0=a[j+k],a1=mul(mt,a[j+k+i]); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) Mul(a[i],invv[tim]); &#125; inline poly trans(poly a) &#123; poly b; int t=a.size(); init(t); a.resize(lim),ntt(a,1); b.resize(lim); for(ri i=0;i&lt;n;++i) b[i]=omega[((n&lt;&lt;1)-((ll)i*i%(n&lt;&lt;1)))%(n&lt;&lt;1)],i&amp;&amp;(b[lim-i]=b[i]); ntt(b,1); for(ri i=0;i&lt;lim;++i) Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a; &#125;&#125;A,B;inline void init_prime() &#123; for(ri i=2;i&lt;=10000000;++i) &#123; if(!vs[i]) pri[++tot]=i; for(ri j=1,up=10000000/i;j&lt;=tot&amp;&amp;pri[j]&lt;=up;++j) &#123; vs[i*pri[j]]=1; if(i==i/pri[j]*pri[j]) break; &#125; &#125;&#125;inline bool check(int x) &#123; for(ri i=1,lm=sqrt(x);i&lt;=tot&amp;&amp;pri[i]&lt;=lm;++i) if(x==x/pri[i]*pri[i]) return 0; return 1;&#125;inline void find_G() &#123; vector&lt;int&gt;divv; int cur=mod-1; for(ri i=2,lm=sqrt(cur);i&lt;=lm;++i) &#123; if(cur!=cur/i*i) continue; divv.pb(i); if(i*i!=cur) divv.pb(cur/i); &#125; for(G=2;;++G) &#123; bool ff=1; for(ri i=(int)divv.size()-1;~i;--i) if(ksm(G,divv[i])==1) &#123; ff=0;break; &#125; if(ff) break; &#125;&#125;inline ll ksc(ll a,ll b,ll mod) &#123; return a*b-(ll)((long double)a/mod*b+1e-8)*mod; &#125;inline void dft() &#123; poly a(n&lt;&lt;1),rsa,rsb; for(ri i=0;i&lt;n;++i) a[i]=mul(fix(vl[i]),omega[(ll)i*i%(n&lt;&lt;1)]); rsa=A.trans(a),rsb=B.trans(a); ll md=(ll)A.mod*B.mod; for(ri i=0;i&lt;n;++i) vl[i]=(ksc((ll)rsa[i]*iv1,B.mod,md)+ksc((ll)rsb[i]*iv2,A.mod,md))%md%mod*omega[C2(i)]%mod;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif A.mod=998244353,A.g=3,A.init_ntt(); B.mod=1005060097,B.g=5,B.init_ntt(); iv1=A.Inv(B.mod),iv2=B.Inv(A.mod); init_prime(); for(ri tt=read();tt;--tt) &#123; n=read(); for(ri i=0;i&lt;n;++i) vl[i]=read(); mod=10000000/(n&lt;&lt;1)*(n&lt;&lt;1)+1; while(!check(mod)) mod+=n&lt;&lt;1; find_G(); omega[0]=1,omega[1]=ksm(G,(mod-1)/(n&lt;&lt;1)); for(ri i=2;i&lt;(n&lt;&lt;1);++i) omega[i]=mul(omega[i-1],omega[1]); dft(); bool ff=0; for(ri i=0;i&lt;n;++i) if(!vl[i]) &#123; ff=1;break; &#125; puts(ff?\"YES\":\"NO\"); &#125; return 0;&#125; Call It What You Want 解题思路： 大概考察了分圆多项式和莫比乌斯函数的一些小性质 首先设 fn(x)=xn−1f_n(x)=x^n-1fn​(x)=xn−1 ，那么有 fn(x)=∏d∣nΦd(x)f_n(x)=\\prod\\limits_{d|n}\\Phi_d(x)fn​(x)=d∣n∏​Φd​(x) ，进行多项式取对， ln⁡(xn−1)=∑d∣nln⁡(Φd(x))\\ln (x^n-1)=\\sum\\limits_{d|n}\\ln(\\Phi_d(x))ln(xn−1)=d∣n∑​ln(Φd​(x)) 然后莫比乌斯反演一下： ln⁡(Φn(x))=∑d∣nμ(d)ln⁡(xnd−1)\\ln(\\Phi_n(x))=\\sum\\limits_{d|n}\\mu(d)\\ln(x^{\\frac nd}-1)ln(Φn​(x))=d∣n∑​μ(d)ln(xdn​−1) 然后 expexpexp 回去： Φn(x)=∏d∣n(xd−1)μ(nd)\\Phi_n(x)=\\prod\\limits_{d|n}(x^d-1)^{\\mu(\\frac nd)}Φn​(x)=d∣n∏​(xd−1)μ(dn​) 考虑到 μ(x)\\mu(x)μ(x) 只在 xxx 没有平方因子的时候有贡献，而 2×3×5×7×11×13≤100000≤2×3×5×7×11×13×172\\times3\\times5\\times7\\times11\\times13\\le100000\\le2\\times3\\times5\\times7\\times11\\times13\\times172×3×5×7×11×13≤100000≤2×3×5×7×11×13×17 ，因此可以暴力状压每个数的有贡献的约数 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=1e5+5;int phi[N],pri[N&gt;&gt;2],tot=0,n;bool vs[N],vis[N];vector&lt;int&gt;divv[N],Phi[N];inline void init() &#123; phi[1]=1; for(ri i=2;i&lt;=100000;++i) &#123; if(!vs[i]) &#123; pri[++tot]=i,phi[i]=i-1; for(ri j=i;j&lt;=100000;j+=i) divv[j].pb(i); &#125; for(ri j=1,up=100000/i;j&lt;=tot&amp;&amp;pri[j]&lt;=up;++j) &#123; vs[i*pri[j]]=1; if(i==i/pri[j]*pri[j]) &#123; phi[i*pri[j]]=phi[i]*pri[j];break; &#125; phi[i*pri[j]]=phi[i]*(pri[j]-1); &#125; &#125;&#125;inline bool cmp(int a,int b) &#123; if(phi[a]^phi[b]) return phi[a]&lt;phi[b]; for(ri i=phi[a];~i;--i) if(Phi[a][i]^Phi[b][i]) return Phi[a][i]&lt;Phi[b][i]; return 1;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init(); for(ri tt=read();tt;--tt) &#123; n=read(); vector&lt;int&gt;id; for(ri i=1;i&lt;=n;++i) if(n==n/i*i) &#123; id.pb(i); if(vis[i]) continue; vis[i]=1; Phi[i].resize(phi[i]+1); Phi[i][0]=i&gt;1?1:-1; for(ri ct,x,s=0,lm=(int)divv[i].size();s&lt;(1&lt;&lt;lm);++s) &#123; ct=0,x=i; for(ri j=0;j&lt;lm;++j) if(s&gt;&gt;j&amp;1) ct^=1,x/=divv[i][j]; if(!ct) for(ri j=phi[i];j&gt;=x;--j) Phi[i][j]-=Phi[i][j-x]; else for(ri j=x;j&lt;=phi[i];++j) Phi[i][j]+=Phi[i][j-x]; &#125; &#125; sort(id.begin(),id.end(),cmp); for(ri i=0,x;i&lt;(int)id.size();++i) &#123; putchar('('); x=id[i]; for(ri j=phi[x];~j;--j) &#123; if(!Phi[x][j]) continue; if(Phi[x][j]&gt;0&amp;&amp;j!=phi[x]) putchar('+'); if(j&amp;&amp;Phi[x][j]==-1) putchar('-'); if(!j||Phi[x][j]&gt;1||Phi[x][j]&lt;-1) cout&lt;&lt;Phi[x][j]; if(j) putchar('x'); if(j&gt;1) putchar('^'),cout&lt;&lt;j; &#125; putchar(')'); &#125; puts(\"\"); &#125; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round10","slug":"sol10","date":"2019-12-19T02:10:32.000Z","updated":"2019-12-26T04:22:28.729Z","comments":true,"path":"sol10/","link":"","permalink":"http://ldxcaicai.github.io/sol10/","excerpt":"","text":"机器人高尔夫球赛 解题思路： 首先暴力 dpdpdp 设 fi,jf_{i,j}fi,j​ 表示先手在 (i,j)(i,j)(i,j) 处出发的结果直接转移。 然后考虑优化这个做法。打表会发现对于大部分格子，都有 fi,j=fi+1,j+1f_{i,j}=f_{i+1,j+1}fi,j​=fi+1,j+1​ ，认真思考后会发现如果格子 (i,j)(i,j)(i,j) 满足跟它曼哈顿距离不超过 222 的部分都没有标记那么 fi,j=fi+1,j+1f_{i,j}=f_{i+1,j+1}fi,j​=fi+1,j+1​ 那么暴力 dpdpdp 需要特殊处理的格子的值，用 mapmapmap 记录每条对角线的答案即可快速转移 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;int,pii&gt; ppp;typedef map&lt;int,ppp&gt;::iterator It;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int fix(int a)&#123;return (a%mod+mod)%mod;&#125;&#125;using namespace modular;const int N=1e5+5;map&lt;pii,bool&gt;vs;map&lt;int,ppp&gt;F;map&lt;pii,pii&gt;mn_mx;vector&lt;pii&gt;ps;int n,m,K,res=0;inline void DP(int x,int y)&#123; if(F.count(x-y))Add(res,mul(dec(F[x-y].fi,x),fix(F[x-y].se.fi))); F[x-y]=ppp(x,mn_mx[pii(x,y)]);&#125;inline pii calc(int x,int y)&#123;return F.count(x-y)?F[x-y].se:pii(0,0);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),K=read(); for(ri x,y,v,i=1;i&lt;=K;++i)&#123; x=read(),y=read(),v=read(); vs[pii(x,y)]=1; mn_mx[pii(x,y)]=pii(v,v); for(ri dx=0;dx&lt;=2&amp;&amp;dx&lt;x;++dx)for(ri dy=0;dy&lt;=2-dx&amp;&amp;dy&lt;y;++dy) ps.pb(pii(x-dx,y-dy)); &#125; sort(ps.begin(),ps.end()); ps.erase(unique(ps.begin(),ps.end()),ps.end()); pii rgt,dwn; for(ri x,y,t=(int)ps.size()-1;~t;--t)&#123; x=ps[t].fi,y=ps[t].se; if(!vs[pii(x,y)])&#123; rgt=calc(x,y+1); dwn=calc(x+1,y); mn_mx[pii(x,y)]=pii(min(rgt.se,dwn.se),max(rgt.fi,dwn.fi)); &#125; DP(x,y); &#125; ppp cur; for(It it=F.begin();it!=F.end();++it)&#123; cur=it-&gt;se; Add(res,mul(fix(min(cur.fi,cur.fi-it-&gt;fi)),fix(cur.se.fi))); &#125; cout&lt;&lt;res; return 0;&#125; 有标号的DAG计数 IV 解题思路： 可能得先会前三道 DAGDAGDAG 计数，先考虑简单的问题，如果不要求连通怎么做，发现是个常见套路，枚举入度为 000 的点然后容斥即可： fi=∑j=1ifi−j2j(i−j)(−1)i+1fi=∑j=0i−1fj2i2−j2−(i−j)2(−1)i−j+1fi2i2=∑j=0i−1fj2j2(−1)i−j+12(i−j)2构造F(x)=∑i=0+∞fi2i2xi,G(x)=∑i=1+∞(−1)i+12i2F=F×G+1F=11−G\\begin{aligned} f_i=&amp;\\sum\\limits_{j=1}^if_{i-j}2^{j(i-j)}(-1)^{i+1}\\\\ f_i=&amp;\\sum\\limits_{j=0}^{i-1}f_j\\sqrt2^{i^2-j^2-(i-j)^2}(-1)^{i-j+1}\\\\ \\frac{f_i}{\\sqrt2^{i^2}}=&amp;\\sum\\limits_{j=0}^{i-1}\\frac{f_j}{\\sqrt2^{j^2}}\\frac{(-1)^{i-j+1}}{\\sqrt2^{(i-j)^2}}\\\\ 构造F(x)=&amp;\\sum\\limits_{i=0}^{+\\infty}\\frac{f_i}{\\sqrt2^{i^2}}x^i,G(x)=\\sum\\limits_{i=1}^{+\\infty}\\frac{(-1)^{i+1}}{\\sqrt2^{i^2}}\\\\ F=&amp;F\\times G+1\\\\ F=&amp;\\frac{1}{1-G} \\end{aligned} fi​=fi​=2​i2fi​​=构造F(x)=F=F=​j=1∑i​fi−j​2j(i−j)(−1)i+1j=0∑i−1​fj​2​i2−j2−(i−j)2(−1)i−j+1j=0∑i−1​2​j2fj​​2​(i−j)2(−1)i−j+1​i=0∑+∞​2​i2fi​​xi,G(x)=i=1∑+∞​2​i2(−1)i+1​F×G+11−G1​​ 这样能够在 O(nlog⁡n)O(n\\log n)O(nlogn) 的时间内求出 fff 接下来就有两种思路了，第一种是利用补集转化的思想，设答案等于 gig_igi​ ，那么 gi=fi−∑j=1i−1gjfi−j(i−1j−1)g_i=f_i-\\sum\\limits_{j=1}^{i-1}g_jf_{i-j}\\binom{i-1}{j-1}gi​=fi​−j=1∑i−1​gj​fi−j​(j−1i−1​) 然后一波化简上多项式求逆 第二种也挺容易想到的，设 GGG 为答案的生成函数，显然有 eG=Fe^G=FeG=F ，那么写个多项式取对即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef vector&lt;int&gt; poly;#define pb push_backnamespace modular &#123; const int mod=998244353,sqr2=116195171; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;const int N=500005;int n,invv[23],w[23],lim,tim,inv[N],fac[N],ifac[N];vector&lt;int&gt;rev[23];inline int C(int n,int m) &#123; return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[n-m],ifac[m])); &#125;inline void init() &#123; fac[0]=fac[1]=ifac[0]=ifac[1]=inv[1]=1; for(ri i=2;i&lt;=500000;++i) &#123; fac[i]=mul(fac[i-1],i); inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); ifac[i]=mul(ifac[i-1],inv[i]); &#125;&#125;inline void init_ntt() &#123; invv[0]=1,w[22]=ksm(3,(mod-1)&gt;&gt;23); for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;23;++i) invv[i]=mul(invv[i-1],iv); for(ri i=21;~i;--i) w[i]=mul(w[i+1],w[i+1]);&#125;inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,int typ) &#123; for(ri i=0;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1,mt;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=1; for(ri k=0;k&lt;i;++k,Mul(mt,w[t])) &#123; a0=a[j+k],a1=mul(mt,a[j+k+i]); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b) &#123; int n=a.size(),m=b.size(),t=n+m-1; if(t&lt;=64) &#123; poly c(t); for(ri i=0;i&lt;n;++i) if(a[i]) for(ri j=0;j&lt;m;++j) Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i) Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;inline poly operator-(poly a,poly b) &#123; if((int)a.size()&lt;(int)b.size()) a.resize((int)b.size()); for(ri i=0,up=(int)b.size();i&lt;up;++i) Dec(a[i],b[i]); return a;&#125;inline poly poly_inv(poly a,int K) &#123; poly b(1,Inv(a[0])),c; for(ri i=1;i&lt;K;i&lt;&lt;=1) &#123; init(i&lt;&lt;2); c=a,c.resize(i&lt;&lt;1),c.resize(lim),ntt(c,1); b.resize(lim),ntt(b,1); for(ri j=0;j&lt;lim;++j) Mul(b[j],dec(2,mul(b[j],c[j]))); ntt(b,-1),b.resize(i&lt;&lt;1); &#125; return b.resize(K),b;&#125;inline poly poly_integ(poly a) &#123; a.pb(0); for(ri i=(int)a.size()-1;i;--i)a[i]=mul(a[i-1],inv[i]); return a[0]=0,a;&#125;inline poly poly_direv(poly a) &#123; for(ri i=1,up=(int)a.size();i&lt;up;++i) a[i-1]=mul(a[i],i); return a.pop_back(),a;&#125;inline poly poly_ln(poly a,int K) &#123; poly res=poly_integ(poly_direv(a)*poly_inv(a,K)); return res.resize(K),res;&#125;int main() &#123; freopen(\"dagIV.in\",\"r\",stdin); freopen(\"dagIV.out\",\"w\",stdout); cin&gt;&gt;n; init(); init_ntt(); poly f(n+1); for(ri t,i=0;i&lt;=n;++i) &#123; t=mul(ifac[i],Inv(ksm(sqr2,(ll)i*i%(mod-1)))); f[i]=t?(i&amp;1?mod-t:t):0; &#125; f=poly_inv(f,n+1); for(ri i=0;i&lt;=n;++i) Mul(f[i],ksm(sqr2,(ll)i*i%(mod-1))); f=poly_ln(f,n+1); cout&lt;&lt;mul(f[n],fac[n]); return 0;&#125; arewell 解题思路： 容斥的思想跟上面的求 fff 的一样，枚举入度为 000 的点，然后发现转移变成了枚举子集，直接用子集卷积优化即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;int n,m,lim,coe,all,pw[25],ppw[405];poly cnt,f[25],g[25],bitcnt;inline void fwt(poly&amp;a,int typ) &#123; for(ri a0,a1,iv=mod+1&gt;&gt;1,i=1;i&lt;lim;i&lt;&lt;=1) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k) &#123; a0=a[j+k],a1=a[j+k+i]; a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); if(typ==-1) Mul(a[j+k],iv),Mul(a[j+k+i],iv); &#125;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); coe=mod+1&gt;&gt;1; pw[0]=1,ppw[0]=1; for(ri i=1;i&lt;=n;++i) pw[i]=pw[i-1]&lt;&lt;1; for(ri i=1;i&lt;=m;++i) ppw[i]=mul(ppw[i-1],coe); lim=pw[n],all=lim-1; cnt.resize(lim),bitcnt.resize(lim); for(ri i=0;i&lt;=n;++i) f[i].resize(lim),g[i].resize(lim); for(ri u,v,i=1;i&lt;=m;++i) &#123; u=read()-1,v=read()-1; for(ri s=all^pw[u]^pw[v],t=s;~t;t=t?(t-1)&amp;s:-1) ++cnt[t^pw[u]^pw[v]]; &#125; for(ri t,s=0;s&lt;lim;++s) &#123; bitcnt[s]=bitcnt[s&gt;&gt;1]+(s&amp;1); g[bitcnt[s]][s]=bitcnt[s]&amp;1?ppw[cnt[s]]:mod-ppw[cnt[s]]; &#125; for(ri i=0;i&lt;=n;++i) fwt(g[i],1); f[0][0]=1; fwt(f[0],1); for(ri i=0;i&lt;n;++i) for(ri s=0;s&lt;lim;++s) if(f[i][s]) for(ri j=1;i+j&lt;=n;++j) Add(f[i+j][s],mul(f[i][s],g[j][s])); fwt(f[n],-1); cout&lt;&lt;mul(f[n][all],Inv(mul(ppw[m],ksm(3,m)))); return 0;&#125; ffort 解题思路： 设总伤害为 XXX 的方案数为 f(X)f(X)f(X) 那么最后这个会对答案产生 (X−1n−1)\\binom{X-1}{n-1}(n−1X−1​) 的贡献，由于 XXX 非常大因此需要换一个角度思考，观察上述式子发现是要插入 n−1n-1n−1 个板，那么我们对 mmm 种数据结构分别构造生成函数 Fi(x)F_i(x)Fi​(x) ，其中 Fi(x)[xj]F_i(x)[x^j]Fi​(x)[xj] 表示其中放 jjj 个板的方案数，然后我们对每一种数据结构做一次多项式快速幂最后乘起来即可，注意最后一个要特殊处理 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef vector&lt;int&gt; poly;#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;const int N=500005;int invv[23],w[23],inv[N],lim,tim;vector&lt;int&gt;rev[23];inline void init() &#123; inv[1]=1; for(ri i=2;i&lt;=500000;++i) inv[i]=mul(inv[mod-mod/i*i],mod-mod/i);&#125;inline void init_ntt() &#123; invv[0]=1,w[22]=ksm(3,(mod-1)&gt;&gt;23); for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;23;++i) invv[i]=mul(invv[i-1],iv); for(ri i=21;~i;--i) w[i]=mul(w[i+1],w[i+1]);&#125;inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,int typ) &#123; for(ri i=0;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1,mt;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=1; for(ri k=0;k&lt;i;++k,Mul(mt,w[t])) &#123; a0=a[j+k],a1=mul(a[j+k+i],mt); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b) &#123; int n=a.size(),m=b.size(),t=n+m-1; if(t&lt;=64) &#123; poly c(t); for(ri i=0;i&lt;n;++i) if(a[i]) for(ri j=0;j&lt;m;++j) Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i) Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;inline poly operator-(poly a,poly b) &#123; if((int)a.size()&lt;(int)b.size()) a.resize((int)b.size()); for(ri i=0,up=(int)b.size();i&lt;up;++i) Dec(a[i],b[i]); return a;&#125;inline poly poly_inv(poly a,int K) &#123; poly b(1,Inv(a[0])),c; for(ri i=1;i&lt;K;i&lt;&lt;=1) &#123; init(i&lt;&lt;2); c=a,c.resize(i&lt;&lt;1),c.resize(lim),ntt(c,1); b.resize(lim),ntt(b,1); for(ri j=0;j&lt;lim;++j) Mul(b[j],dec(2,mul(b[j],c[j]))); ntt(b,-1),b.resize(i&lt;&lt;1); &#125; return b.resize(K),b;&#125;inline poly poly_deriv(poly a) &#123; for(ri i=1,up=(int)a.size();i&lt;up;++i) a[i-1]=mul(a[i],i); return a.pop_back(),a;&#125;inline poly poly_integ(poly a) &#123; a.pb(0); for(ri i=(int)a.size()-1;i;--i) a[i]=mul(inv[i],a[i-1]); return a[0]=0,a;&#125;inline poly poly_ln(poly a,int K) &#123; return a=poly_integ(poly_deriv(a)*poly_inv(a,K)),a.resize(K),a; &#125;inline poly poly_exp(poly a,int K) &#123; poly b(1,1),c; for(ri i=1;i&lt;K;i&lt;&lt;=1) &#123; c=a,c.resize(i&lt;&lt;1); c=c-poly_ln(b,i&lt;&lt;1); Add(c[0],1); b=b*c,b.resize(i&lt;&lt;1); &#125; return b.resize(K),b;&#125;inline poly poly_ksm(poly a,int pw,int K) &#123; int iv=Inv(a[0]),mt=ksm(a[0],pw); a.resize(K); for(ri i=0;i&lt;K;++i) Mul(a[i],iv); a=poly_ln(a,K); for(ri i=0;i&lt;K;++i) Mul(a[i],pw); a=poly_exp(a,K); for(ri i=0;i&lt;K;++i) Mul(a[i],mt); return a;&#125;int n,m,a[N],b[N];int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); init(),init_ntt(); for(ri i=1;i&lt;=m;++i) a[i]=read(),b[i]=read(); ++m,a[m]=1,b[m]=b[m-1]-1,--a[m-1]; poly res(1,1),f; for(ri t,iv,i=1;i&lt;=m;++i) if(a[i]) &#123; f.resize(n); f[0]=b[i]; for(ri mt=add(b[i],1),j=1;j&lt;n;++j) &#123; Mul(mt,mul(inv[j+1],b[i]+1-j)); f[j]=mt; &#125; if(i==m) Add(f[0],1); f=poly_ksm(f,a[i],n); res=res*f; res.resize(n); &#125; cout&lt;&lt;res[n-1]; return 0;&#125; Temperature Survey 解题思路： 考虑把问题看成走网格的方案数，那么不断把 (mid,amid)(mid,a_{mid})(mid,amid​) 当成矩形的右上角，然后递归分治可以递归划分出 O(n)O(n)O(n) 个矩形，这些矩形边长和是 O(nlog⁡n)O(n\\log n)O(nlogn) 级别的，然后对于每个矩形用 nttnttntt 计算其上/左边界对其下/右边界的贡献即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;bits/stdc++.h&gt;#include&lt;tr1/unordered_map&gt;#define ri register intusing namespace std;typedef long long ll;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125;&#125;using namespace modular;const int N=5e5+5;int lim,tim,invv[23],w[23],fac[N],ifac[N],a[N],n;vector&lt;int&gt;rev[23];inline void init_ntt() &#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=500000;++i) &#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=500000;++i) Mul(ifac[i],ifac[i-1]); w[22]=ksm(3,(mod-1)&gt;&gt;23); invv[0]=1; for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;23;++i) invv[i]=mul(invv[i-1],iv); for(ri i=21;~i;--i) w[i]=mul(w[i+1],w[i+1]);&#125;inline int C(int n,int m) &#123; return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m])); &#125;inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up)lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,int typ) &#123; for(ri i=0;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); for(ri mt,i=1,t=0,a0,a1;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=1; for(ri k=0;k&lt;i;++k,Mul(mt,w[t])) &#123; a0=a[j+k],a1=mul(a[j+k+i],mt); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b) &#123; int n=(int)a.size(),m=(int)b.size(),t=n+m-1; if(t&lt;=64) &#123; poly c(t); for(ri i=0;i&lt;n;++i) if(a[i]) for(ri j=0;j&lt;m;++j) Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i) Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;inline poly calc1(poly a,int len) &#123; int n=(int)a.size(); poly b(n); for(ri i=0;i&lt;n;++i) b[i]=C(i+len,i); a=a*b; return a.resize(n),a;&#125;inline poly calc2(poly a,int len) &#123; int n=(int)a.size(); poly b(len+n); for(ri i=0;i&lt;n;++i) Mul(a[i],ifac[n-i-1]); for(ri i=0;i&lt;len+n;++i) b[i]=fac[i]; b=a*b; a.resize(len+1); for(ri i=0;i&lt;=len;++i) a[i]=mul(ifac[i],b[i+n-1]); return a;&#125;tr1::unordered_map&lt;int,int&gt; f[N];inline void solve(int l,int r,int ql,int qr) &#123; if(l&gt;r||ql&gt;qr) return; int mid=l+r&gt;&gt;1,ps=mid+1; solve(l,mid-1,ql,a[mid-1]); poly F(a[mid]-ql+1),G; for(ri i=ql;i&lt;=a[mid];++i) F[i-ql]=f[mid-1][i]; G=calc1(F,r-mid); for(ri i=ql;i&lt;=a[mid];++i) Add(f[r][i],G[i-ql]); G=calc2(F,r-mid); for(ri i=mid;i&lt;r;++i) Add(f[i][a[mid]],G[i-mid]); F.clear(); F.resize(r-mid+1); for(ri i=mid;i&lt;=r;++i) F[i-mid]=f[i][ql-1]; G=calc1(F,a[mid]-ql); for(ri i=mid;i&lt;=r;++i) Add(f[i][a[mid]],G[i-mid]); G=calc2(F,a[mid]-ql); for(ri i=ql;i&lt;a[mid];++i) Add(f[r][i],G[i-ql]); while(ps&lt;=r&amp;&amp;a[ps]==a[mid]) ++ps; if(ps&lt;=r) solve(ps,r,a[mid]+1,qr);&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init_ntt(); for(ri tt=read();tt;--tt) &#123; n=read(); for(ri i=0;i&lt;=n;++i) f[i].clear(); for(ri i=1;i&lt;=n;++i) a[i]=read(); f[1][0]=1; solve(1,n,1,a[n]); int res=0; for(ri i=1;i&lt;=a[n];++i) Add(res,f[n][i]); cout&lt;&lt;res&lt;&lt;'\\n'; &#125; return 0;&#125; 算力训练 解题思路： 相当于是求 ⊕i=1n(1+xai)\\oplus_{i=1}^n(1+x^{a_i})⊕i=1n​(1+xai​) ，那么可以先参考一下 黎明前的巧克力 是怎么做的，这题也比较类似，大概是扩域将每个数表示成 ∑i=0KaiωKi\\sum\\limits_{i=0}^Ka_i\\omega_K^ii=0∑K​ai​ωKi​ 的形式，然后先把 ∑i=1n(1+xai)\\sum\\limits_{i=1}^n(1+x^{a_i})i=1∑n​(1+xai​) 给 fwtfwtfwt 了，接着对于每一维分别求出它是由 ttt 个 ωKi\\omega_K^iωKi​ 加起来的，那么这一维的实际值应该是 (1+ωKi)t(1+\\omega_K^i)^t(1+ωKi​)t 成功还原点值之后再 ifwtifwtifwt 回去即可 注意到这题有点卡常，因此求 (1+ωKi)t(1+\\omega_K^i)^t(1+ωKi​)t 要用 BSGSBSGSBSGS 卡常 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1l;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)int n,K,tim,lim,iv;inline int read(int B) &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=ans*B+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;const int N=1e6+5;struct cp &#123; int a[6]; cp() &#123; memset(a,0,sizeof(a)); &#125; inline int&amp;operator[](const int&amp;k) &#123; return a[k]; &#125; inline const int&amp;operator[](const int&amp;k) const &#123; return a[k]; &#125; friend inline cp operator+(cp a,cp b) &#123; for(ri i=0;i&lt;K;++i) Add(a[i],b[i]); return a; &#125; friend inline void operator+=(cp&amp;a,cp b) &#123; a=a+b; &#125; friend inline cp operator-(cp a,cp b) &#123; for(ri i=0;i&lt;K;++i) Dec(a[i],b[i]); return a; &#125; friend inline void operator-=(cp&amp;a,cp b) &#123; a=a-b; &#125; friend inline cp operator*(cp a,int b) &#123; for(ri i=0;i&lt;K;++i) Mul(a[i],b); return a; &#125; friend inline void operator*=(cp&amp;a,int b) &#123; a=a*b; &#125; friend inline cp operator*(cp a,cp b) &#123; cp res; for(ri i=0;i&lt;K;++i) if(a[i]) for(ri j=0;j&lt;K;++j) Add(res[i+j&lt;K?i+j:i+j-K],mul(a[i],b[j])); return res; &#125; friend inline void operator*=(cp&amp;a,cp b) &#123; a=a*b; &#125; inline int getval() &#123; return dec(add(a[0],a[1]),add(a[2],a[3])); &#125;&#125;a[N],w[6],cur[6];inline void init() &#123; w[0][0]=w[1][1]=1; for(ri i=2;i&lt;K;++i) w[i]=w[i-1]*w[1]; &#125;inline void dft(cp*a,int typ) &#123; static cp res[6]; for(ri i=0;i&lt;K;++i) &#123; res[i]=cp(); for(ri j=0;j&lt;K;++j) res[i]+=w[i*j%K]*a[j]; &#125; for(ri i=0;i&lt;K;++i) a[i]=res[i]; if(~typ) return; for(ri i=1;i+i&lt;K;++i) swap(a[i],a[K-i]); for(ri i=0;i&lt;K;++i) a[i]*=iv;&#125;inline void dwt(cp*a,int typ) &#123; for(ri i=1;i&lt;lim;i*=K) for(ri j=0,len=i*K;j&lt;lim;j+=len) &#123; for(ri k=0;k&lt;i;++k) &#123; for(ri o=0;o&lt;K;++o) cur[o]=a[j+k+o*i]; dft(cur,typ); for(ri o=0;o&lt;K;++o) a[j+k+o*i]=cur[o]; &#125; &#125;&#125;int sqr;cp tp[N],pws[N],pwb[N];inline cp getpow(int x) &#123; return pws[x%sqr]*pwb[x/sqr]; &#125;inline void trans(cp*a) &#123; for(ri i=0;i&lt;lim;++i) tp[i][0]=1; sqr=sqrt(1.0*n)+10; for(ri t=0;t&lt;K;++t) &#123; cp A; A[0]=pws[0][0]=pwb[0][0]=1,++A[t]; for(ri o=1;o&lt;=sqr;++o) pws[o]=A*pws[o-1]; pwb[1]=pws[sqr]; for(ri o=2;o&lt;=sqr;++o) pwb[o]=pwb[o-1]*pwb[1]; for(ri i=0;i&lt;lim;++i) tp[i]*=getpow(a[i][t]); &#125; for(ri i=0;i&lt;lim;++i) a[i]=tp[i];&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(10),K=read(10),tim=read(10),iv=Inv(K); lim=1; for(ri i=1;i&lt;=tim;++i) lim*=K; for(ri i=1;i&lt;=n;++i) ++a[read(K)][0]; init(); dwt(a,1); trans(a); dwt(a,-1); for(ri i=0;i&lt;lim;++i) cout&lt;&lt;a[i].getval()&lt;&lt;'\\n'; return 0;&#125; 魔力环 解题思路： 考虑 burnsideburnsideburnside 引理，发现只用枚举 d∣gcd⁡(n,m)d|\\gcd(n,m)d∣gcd(n,m) ，然后计算 f(d)f(d)f(d) 表示 md\\frac mddm​ 个黑球， n−md\\frac {n-m}ddn−m​ 个白球的序列，其中黑球（首尾的黑球要加起来）不连续超过 KKK 个的方案数 那么我们强制结尾没有黑球，枚举开头黑球有 ttt 个，方案数乘上 t+1t+1t+1 即可，现在问题变成了在 n−md\\frac{n-m}ddn−m​ 个白球中插入 md−t\\frac md-tdm​−t 个黑球，每个空隙不能插入超过 KKK 个，问方案数，那么容斥算即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125; inline int Inv(int a) &#123; return ksm(a,mod-2); &#125;&#125;using namespace modular;const int N=1e5+5;int n,m,K,fac[N],ifac[N],inv[N],g,tot=0,pri[N],phi[N];bool vs[N];inline int gcd(int a,int b) &#123; int t;while(b) t=a,a=b,b=t-t/a*a;return a; &#125;inline void init() &#123; fac[0]=fac[1]=ifac[0]=ifac[1]=inv[1]=1; for(ri i=2;i&lt;=n;++i) &#123; fac[i]=mul(fac[i-1],i); inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); ifac[i]=mul(ifac[i-1],inv[i]); &#125;&#125;inline int C(int n,int m) &#123; return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m])); &#125;inline int F(int a,int b) &#123; int res=0; for(ri i=0,t,up=min(a/(K+1),b-1);i&lt;=up;++i) &#123; t=mul(C(b-1,i),C(a+b-2-i*(K+1),a-i*(K+1))); i&amp;1?Dec(res,t):Add(res,t); &#125; return res;&#125;inline int calc(int a,int b) &#123; if(b==1) return a&lt;=K?a+1:0; int res=0; for(ri i=0;i&lt;=a&amp;&amp;i&lt;=K;++i) Add(res,mul(i+1,F(a-i,b))); return res;&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif cin&gt;&gt;n&gt;&gt;m&gt;&gt;K; if(n==m) return cout&lt;&lt;(K&gt;=n),0; init(); g=gcd(n,m); int res=0; for(ri tm=1;tm&lt;=g;++tm) &#123; if(tm==1) phi[tm]=1; else &#123; if(!vs[tm]) phi[tm]=tm-1,pri[++tot]=tm; for(ri i=1,lm=g/tm;i&lt;=tot&amp;&amp;pri[i]&lt;=lm;++i) &#123; vs[tm*pri[i]]=1; if(tm==tm/pri[i]*pri[i]) &#123; phi[tm*pri[i]]=phi[tm]*pri[i];break; &#125; phi[tm*pri[i]]=phi[tm]*(pri[i]-1); &#125; &#125; if(g==g/tm*tm) Add(res,mul(phi[tm],calc(m/tm,(n-m)/tm))); &#125; cout&lt;&lt;mul(res,inv[n]); return 0;&#125; 魔法小程序 解题思路： 读完题发现是个任意进制前缀和，那么我们把 ccc 拿来做 ifmtifmtifmt 即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch)) f^=ch=='-',ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl() &#123; ll ans=0; bool f=1; char ch=gc(); while(!isdigit(ch)) f^=ch=='-',ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int N=1e6+5;int len[N],n,m;ll c[N];int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif m=read(); cout&lt;&lt;m&lt;&lt;'\\n'; for(ri i=1;i&lt;=m;++i) cout&lt;&lt;(len[i]=read())&lt;&lt;' '; puts(\"\"); n=read(); len[++m]=n+1; for(ri i=0;i&lt;n;++i) c[i]=readl(); for(ri i=1,id=1;;i*=len[id++]) &#123; if(len[id]&gt;1) for(ri j=n-1;j&gt;=i;--j) if(j/i%len[id]&gt;0) c[j]-=c[j-i]; if(i&gt;n/len[id]) break; &#125; cout&lt;&lt;n&lt;&lt;'\\n'; for(ri i=0;i&lt;n;++i) cout&lt;&lt;c[i]&lt;&lt;' '; puts(\"\"); return 0;&#125; 如何优雅地求和 解题思路： 考虑构造组合数多项式： fj=∑i=0m(ji)aiaj=∑i=0m(ji)(−1)j−ifiajj!=(−1)j−i(j−i)!fii!ntt求出aires=∑i=0nfi(ni)xi(1−x)n−i=∑i=0n(∑j=0m(ij)aj)xi(1−x)n−i(ni)=∑j=0maj∑i=0n(ni)xi(1−x)n−i(ij)=∑j=0maj(nj)∑i=0nxi(1−x)n−i(n−ji−j)=∑j=0maj(nj)xj∑i=0n−jxi(1−x)n−j−i(n−ji)=∑j=0maj(nj)xi\\begin{aligned} f_j=&amp;\\sum\\limits_{i=0}^m\\binom jia_i\\\\ a_j=&amp;\\sum\\limits_{i=0}^m\\binom ji(-1)^{j-i}f_i\\\\ \\frac{a_j}{j!}=&amp;\\frac{(-1)^{j-i}}{(j-i)!}\\frac{f_i}{i!}\\\\ ntt&amp;求出a_i\\\\ res=&amp;\\sum\\limits_{i=0}^nf_i\\binom nix^i(1-x)^{n-i}\\\\ =&amp;\\sum\\limits_{i=0}^n(\\sum\\limits_{j=0}^m\\binom ija_j)x^i(1-x)^{n-i}\\binom ni\\\\ =&amp;\\sum\\limits_{j=0}^ma_j\\sum\\limits_{i=0}^n\\binom{n}{i}x^i(1-x)^{n-i}\\binom ij\\\\ =&amp;\\sum\\limits_{j=0}^ma_j\\binom nj\\sum\\limits_{i=0}^nx^i(1-x)^{n-i}\\binom {n-j}{i-j}\\\\ =&amp;\\sum\\limits_{j=0}^ma_j\\binom njx^j\\sum\\limits_{i=0}^{n-j}x^i(1-x)^{n-j-i}\\binom{n-j}i\\\\ =&amp;\\sum\\limits_{j=0}^ma_j\\binom njx^i\\\\ \\end{aligned} fj​=aj​=j!aj​​=nttres======​i=0∑m​(ij​)ai​i=0∑m​(ij​)(−1)j−ifi​(j−i)!(−1)j−i​i!fi​​求出ai​i=0∑n​fi​(in​)xi(1−x)n−ii=0∑n​(j=0∑m​(ji​)aj​)xi(1−x)n−i(in​)j=0∑m​aj​i=0∑n​(in​)xi(1−x)n−i(ji​)j=0∑m​aj​(jn​)i=0∑n​xi(1−x)n−i(i−jn−j​)j=0∑m​aj​(jn​)xji=0∑n−j​xi(1−x)n−j−i(in−j​)j=0∑m​aj​(jn​)xi​ 当然利用下降幂多项式同样能够解决问题 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read() &#123; int ans=0; char ch=gc(); while(!isdigit(ch)) ch=gc(); while(isdigit(ch)) ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular &#123; const int mod=998244353; inline int add(int a,int b) &#123; return a+b&lt;mod?a+b:a+b-mod; &#125; inline int dec(int a,int b) &#123; return a&lt;b?a-b+mod:a-b; &#125; inline int mul(int a,int b) &#123; return (ll)a*b%mod; &#125; inline void Add(int&amp;a,int b) &#123; a=a+b&lt;mod?a+b:a+b-mod; &#125; inline void Dec(int&amp;a,int b) &#123; a=a&lt;b?a-b+mod:a-b; &#125; inline void Mul(int&amp;a,int b) &#123; a=(ll)a*b%mod; &#125; inline int ksm(int a,int p) &#123; int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a)) (p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret; &#125;&#125;using namespace modular;const int N=20005;int invv[23],w[23],lim,tim,ifac[N],fac[N],n,m,t;vector&lt;int&gt; rev[23];inline void init_ntt() &#123; invv[0]=1,w[22]=ksm(3,(mod-1)&gt;&gt;23); for(ri i=21;~i;--i) w[i]=mul(w[i+1],w[i+1]); for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;23;++i) invv[i]=mul(invv[i-1],iv);&#125;inline void init(int up) &#123; lim=1,tim=0; while(lim&lt;up) lim&lt;&lt;=1,++tim; if(rev[tim].size()) return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i) rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,int typ) &#123; for(ri i=0;i&lt;lim;++i) if(i&lt;rev[tim][i]) swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1,mt;i&lt;lim;i&lt;&lt;=1,++t) for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) &#123; mt=1; for(ri k=0;k&lt;i;++k,Mul(mt,w[t])) &#123; a0=a[j+k],a1=mul(a[j+k+i],mt); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; &#125; if(~typ) return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i) Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b) &#123; int n=(int)a.size(),m=(int)b.size(),t=n+m-1; if(t&lt;=128) &#123; poly c(t); for(ri i=0;i&lt;n;++i) if(a[i]) for(ri j=0;j&lt;m;++j) Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i) Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;inline void init() &#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=m;++i) &#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=m;++i) Mul(ifac[i],ifac[i-1]);&#125;int main() &#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),t=read(); init_ntt(); init(); poly f(m+1),g(m+1); for(ri i=0;i&lt;=m;++i) f[i]=mul(ifac[i],read()),g[i]=i&amp;1?mod-ifac[i]:ifac[i]; f=f*g; int res=0; for(ri i=0,mt1=1,mt2=1,tim=n;i&lt;=m;++i,Mul(mt1,t),Mul(mt2,tim),--tim) Add(res,mul(mul(mt1,mt2),f[i])); cout&lt;&lt;res; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round9","slug":"sol9","date":"2019-11-27T14:19:34.000Z","updated":"2019-12-26T04:24:00.754Z","comments":true,"path":"sol9/","link":"","permalink":"http://ldxcaicai.github.io/sol9/","excerpt":"","text":"猎人杀 解题思路： 关键点在于对于一个死去的人的处理，根据题解观察可知这个概率等于在所有人中随机选人开枪，而在选到已经死去的人的时候重新选人，这样跟在未死去的人中随机选人的概率是相同的 在知道这一点之后就可以尝试容斥了，考虑至少 kkk 个人在第一个人之后死的概率发现这个可以把它们的权值放在生成函数指数上然后利用分治 nttnttntt 快速统计 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline int fix(int a)&#123;return (a%mod+mod)%mod;&#125;&#125;using namespace modular;int invv[23],w[23],lim,tim;vector&lt;int&gt;rev[23];inline void init_ntt()&#123; w[22]=ksm(3,(mod-1)&gt;&gt;23); for(ri i=21;~i;--i)w[i]=mul(w[i+1],w[i+1]); invv[0]=1; for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;23;++i)invv[i]=mul(invv[i-1],iv);&#125;inline void init(const int&amp;up)&#123; lim=1,tim=0; while(lim&lt;up)lim&lt;&lt;=1,++tim; if(rev[tim].size())return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i)rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,const int&amp;type)&#123; for(ri i=0;i&lt;lim;++i)if(i&lt;rev[tim][i])swap(a[i],a[rev[tim][i]]); for(ri i=1,a0,a1,t=0;i&lt;lim;i&lt;&lt;=1,++t)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0,mt=1;k&lt;i;++k,Mul(mt,w[t]))&#123; a0=a[j+k],a1=mul(a[j+k+i],mt); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; if(~type)return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i)Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b)&#123; int n=a.size(),m=b.size(),t=n+m-1; if(t&lt;=64)&#123; poly c(t); for(ri i=0;i&lt;n;++i)for(ri j=0;j&lt;m;++j) Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i)Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;const int N=1e5+5;int n,a[N],m=0,inv[N];inline poly solve(int l,int r)&#123; if(l==r)&#123; poly ret(a[l]+1); ret[0]=1,ret[a[l]]=mod-1; return ret; &#125; int mid=l+r&gt;&gt;1; return solve(l,mid)*solve(mid+1,r);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init_ntt(); n=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(),m+=a[i]; inv[1]=1; for(ri i=2;i&lt;=m;++i)inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); poly f=solve(2,n); int res=0; for(ri i=0;i&lt;f.size();++i)Add(res,mul(f[i],mul(a[1],inv[i+a[1]]))); cout&lt;&lt;res; return 0;&#125; 有意义的字符串 解题思路： 首先有个坑点是题目中数据范围不全，有一部分测试数据满足 b=1,d=5b=1,d=5b=1,d=5 ，现在考虑这题咋做 大概看到这个玩意儿会联系到数列里面用特征根方程求通项公式，不妨设 fn=(b+d2)n+(b−d2)nf_n=(\\frac{b+\\sqrt d}{2})^n+(\\frac{b-\\sqrt d}{2})^nfn​=(2b+d​​)n+(2b−d​​)n ，然后可以利用这个通项公式反解出数列递推式 fn=bfn−1+b2−d4fn−2f_n=bf_{n-1}+\\frac{b^2-d}4f_{n-2}fn​=bfn−1​+4b2−d​fn−2​ 这样就能搞出来 fnf_nfn​ ，然后由于题目给出的限制条件，这个 b−d2∈(−1,0]\\frac{b-\\sqrt d}2\\in(-1,0]2b−d​​∈(−1,0] ，所以这个 (b−d2)n∈(−1,1)(\\frac{b-\\sqrt d}2)^n\\in(-1,1)(2b−d​​)n∈(−1,1) ，也就是说最后需要特判 fnf_nfn​ 是否要减一 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef unsigned long long Ull;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline Ull readul()&#123; Ull ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const Ull mod=7528443412579576937;inline Ull add(Ull a,Ull b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125;inline void Add(Ull&amp;a,Ull b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125;inline Ull mul(Ull a,Ull b)&#123;return (a*b-(Ull)((long double)a/mod*b)*mod+mod)%mod;&#125;Ull d,b,n;struct mat&#123; Ull a[2][2]; mat()&#123;memset(a,0,sizeof(a));&#125; inline Ull*operator[](const int&amp;k)&#123;return a[k];&#125; friend inline mat operator*(mat a,mat b)&#123; mat c; for(ri i=0;i&lt;2;++i)for(ri k=0;k&lt;2;++k)if(a[i][k]) for(ri j=0;j&lt;2;++j)Add(c[i][j],mul(a[i][k],b[k][j])); return c; &#125;&#125;t;int f[105];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif b=readul(),d=readul(),n=readul(); if(n==0)&#123; cout&lt;&lt;1; return 0; &#125; if(n==1)&#123; cout&lt;&lt;b; return 0; &#125; t[0][0]=b,t[0][1]=1; t[1][0]=(d-b*b)&gt;&gt;2,t[1][1]=0; mat res=t; for(Ull p=n-2;p;t=t*t,p&gt;&gt;=1)if(p&amp;1)res=res*t; Ull ans=add(mul(res[0][0],b),mul(res[1][0],2)); ((n%2==0)&amp;&amp;(b*b!=d))&amp;&amp;(--ans); cout&lt;&lt;ans; return 0;&#125; 分拆数 解题思路： 貌似是个生成函数基础问题，大概是用多项式 expexpexp 和调和级数的性质来优化背包 大概就是对于每个数构造出其生成函数然后乘起来就可以算出答案，然后对多项式取对就变成加法，再用个求导的变化就能转成 expexpexp ，不理解的可以看看我博客里有一篇 Generating function 的背包优化部分 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef vector&lt;int&gt; poly;typedef long long ll;typedef pair&lt;int,int&gt; pii;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;int invv[23],w[23],lim,tim,inv[1&lt;&lt;23];vector&lt;int&gt;rev[23];inline void init_ntt()&#123; inv[1]=1; for(ri i=2,up=1&lt;&lt;23;i&lt;up;++i)inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); invv[0]=1; for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;23;++i)invv[i]=mul(invv[i-1],iv); w[22]=ksm(3,(mod-1)&gt;&gt;23); for(ri i=21;~i;--i)w[i]=mul(w[i+1],w[i+1]);&#125;inline void init(int up)&#123; lim=1,tim=0; while(lim&lt;up)lim&lt;&lt;=1,++tim; if(rev[tim].size())return; rev[tim].resize(lim); for(ri i=0;i&lt;lim;++i)rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,int type)&#123; for(ri i=0;i&lt;lim;++i)if(i&lt;rev[tim][i])swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1;i&lt;lim;i&lt;&lt;=1,++t)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0,mt=1;k&lt;i;++k,Mul(mt,w[t]))&#123; a0=a[j+k],a1=mul(a[j+k+i],mt); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; if(~type)return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i)Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b)&#123; int n=a.size(),m=b.size(),t=n+m-1; if(t&lt;=64)&#123; poly c(t); for(ri i=0;i&lt;n;++i)if(a[i])for(ri j=0;j&lt;m;++j)if(b[j]) Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i)Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;inline poly operator-(poly a,poly b)&#123; a.resize(max(a.size(),b.size())); for(ri i=0;i&lt;b.size();++i)Dec(a[i],b[i]); return a;&#125;inline poly poly_inv(poly a,int k)&#123; poly b(1,ksm(a[0],mod-2)),c; for(ri i=1;i&lt;k;i&lt;&lt;=1)&#123; init(i&lt;&lt;2); c=a,c.resize(i&lt;&lt;1); b.resize(lim),ntt(b,1); c.resize(lim),ntt(c,1); for(ri j=0;j&lt;lim;++j)Mul(b[j],dec(2,mul(b[j],c[j]))); ntt(b,-1),b.resize(i&lt;&lt;1); &#125; return b.resize(k),b;&#125;inline poly poly_deriv(poly a)&#123; for(ri i=0;i&lt;(int)a.size()-1;++i)a[i]=mul(a[i+1],i+1); return a.pop_back(),a;&#125;inline poly poly_integ(poly a)&#123; a.pb(0); for(ri i=a.size()-1;i;--i)a[i]=mul(a[i-1],inv[i]); return a[0]=0,a;&#125;inline poly poly_ln(poly a,int k)&#123; a=poly_integ(poly_deriv(a)*poly_inv(a,k)); return a.resize(k),a;&#125;inline poly poly_exp(poly a,int k)&#123; poly b(1,1),c; a.resize(k&lt;&lt;1); for(ri i=1;i&lt;k;i&lt;&lt;=1)&#123; c=poly_ln(b,i&lt;&lt;1); for(ri j=0;j&lt;c.size();++j)c[j]=dec(a[j],c[j]); Add(c[0],1); b=b*c,b.resize(i&lt;&lt;1); &#125; return b.resize(k),b;&#125;poly f;int n;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); init_ntt(); f.resize(n+1); for(ri i=1;i&lt;=n;++i)for(ri j=1;i*j&lt;=n;++j)Add(f[i*j],inv[j]); f=poly_exp(f,n+1); for(ri i=1;i&lt;=n;++i)cout&lt;&lt;f[i]&lt;&lt;'\\n'; return 0;&#125; 整数的lqp拆分 解题思路： 可以直接 dpdpdp 推式子，也可以用生成函数貌似都挺快的，最后反正是可以用矩乘优化然而我太懒了就没写 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef unsigned long long Ull;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;int n;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); if(n&lt;2)&#123; cout&lt;&lt;n; return 0; &#125; int pre1=0,pre2=1; for(ri tmp,i=2;i&lt;=n;++i)&#123; tmp=pre2; pre2=add(pre1,add(pre2,pre2)); pre1=tmp; &#125; cout&lt;&lt;pre2; return 0;&#125; Perpetual Subtraction 解题思路： 要用一点线性代数中矩阵对角化的知识，前置知识可以在 Linear algebra 学 这题想办法推一推转移矩阵的桥接矩阵 Φ\\PhiΦ ，发现还蛮有规律的，大概是 Φi,j=(−1)i+jCji\\Phi_{i,j}=(-1)^{i+j}C_j^iΦi,j​=(−1)i+jCji​ ，然后可以比较简单的推出 Φi,j−1=Cji\\Phi^{-1}_{i,j}=C_j^iΦi,j−1​=Cji​ ，然后左乘矩阵就是一个沙雕卷积直接做就好，感觉啥都没讲有问题评论区问吧 下面介绍另外一个方法： 首先设 f0,if_{0,i}f0,i​ 表示当前轮值为 iii 的概率，那么下一轮值为 iii 的概率 f1,if_{1,i}f1,i​ 可以用 f0f_0f0​ 递推 f1,i=∑j=inf0,j1j+1列出生成函数F0(x),F1(x)F1(x)=∑i=0nxi∑j=0nf0,j1j+1=∑j=0nf0,jj+1∑i=0jxi=∑j=0nf0,jxjj+1xj+1−1x−1=1x−1∑j=0nf0,j∫1xtjdt=∫1xF0(t)dtx−1令G1(x)=F1(x+1)=∫0xF0(t)dtx−1那么g1,i=g0,ii−1,gm,i=g0,i(i−1)m用二项式反演推出f,g正逆变换即可\\begin{aligned} f_{1,i}=&amp;\\sum\\limits_{j=i}^nf_{0,j}\\frac1{j+1}\\\\ 列出生成&amp;函数F_0(x),F_1(x)\\\\ F_1(x)=&amp;\\sum\\limits_{i=0}^nx^i\\sum\\limits_{j=0}^nf_{0,j}\\frac1{j+1}\\\\ =&amp;\\sum\\limits_{j=0}^n\\frac{f_{0,j}}{j+1}\\sum\\limits_{i=0}^jx^i\\\\ =&amp;\\sum\\limits_{j=0}^nf_{0,j}\\frac{x_j}{j+1}\\frac{x^{j+1}-1}{x-1}\\\\ =&amp;\\frac1{x-1}\\sum\\limits_{j=0}^nf_{0,j}\\int_1^xt^j\\text dt\\\\ =&amp;\\frac{\\int_1^xF_0(t)\\text dt}{x-1}\\\\ 令G_1(x)=&amp;F_1(x+1)=\\frac{\\int_0^xF_0(t)\\text dt}{x-1}\\\\ 那么g_{1,i}=&amp;\\frac{g_{0,i}}{i-1},g_{m,i}=\\frac{g_{0,i}}{(i-1)^m}\\\\ 用二项式&amp;反演推出 f,g 正逆变换即可 \\end{aligned} f1,i​=列出生成F1​(x)=====令G1​(x)=那么g1,i​=用二项式​j=i∑n​f0,j​j+11​函数F0​(x),F1​(x)i=0∑n​xij=0∑n​f0,j​j+11​j=0∑n​j+1f0,j​​i=0∑j​xij=0∑n​f0,j​j+1xj​​x−1xj+1−1​x−11​j=0∑n​f0,j​∫1x​tjdtx−1∫1x​F0​(t)dt​F1​(x+1)=x−1∫0x​F0​(t)dt​i−1g0,i​​,gm,i​=(i−1)mg0,i​​反演推出f,g正逆变换即可​ CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly; #define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=1e5+5;int n,invv[23],w[23],lim,tim;vector&lt;int&gt;rev[N];inline void init(const int&amp;up)&#123; lim=1,tim=0; while(lim&lt;up)lim&lt;&lt;=1,++tim; if(rev[tim].size())return; rev[tim].resize(lim); for(ri i=0;i&lt;lim;++i)rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;ll m;inline void init_ntt()&#123; w[22]=ksm(3,(mod-1)&gt;&gt;23); for(ri i=21;~i;--i)w[i]=mul(w[i+1],w[i+1]); invv[0]=1; for(ri i=1,iv=mod+1&gt;&gt;1;i&lt;23;++i)invv[i]=mul(invv[i-1],iv);&#125;inline void ntt(poly&amp;a,int type)&#123; for(ri i=0;i&lt;lim;++i)if(i&lt;rev[tim][i])swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1;i&lt;lim;i&lt;&lt;=1,++t)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0,mt=1;k&lt;i;++k,Mul(mt,w[t]))&#123; a0=a[j+k],a1=mul(a[j+k+i],mt); a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); &#125; if(~type)return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i)Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b)&#123; int n=a.size(),m=b.size(),t=n+m-1; if(t&lt;=64)&#123; poly c(t); for(ri i=0;i&lt;n;++i)for(ri j=0;j&lt;m;++j) Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i)Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;int fac[N],ifac[N],inv[N];inline void init_fac()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=inv[1]=1; for(ri i=2;i&lt;=n+1;++i)&#123; fac[i]=mul(fac[i-1],i); inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); ifac[i]=mul(ifac[i-1],inv[i]); &#125;&#125;poly a,f,g;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); m=readl(); a.resize(n+1),f.resize(n+1),g.resize(n+1); for(ri i=0;i&lt;=n;++i)a[i]=read(); init_ntt(),init_fac(); for(ri i=0;i&lt;=n;++i)f[i]=mul(fac[i],a[i]),g[i]=ifac[i]; reverse(f.begin(),f.end()); a=f*g; a.resize(n+1); reverse(a.begin(),a.end()); for(ri i=0;i&lt;=n;++i)Mul(a[i],ifac[i]); for(ri i=0;i&lt;=n;++i)Mul(a[i],ksm(inv[i+1],m%(mod-1))); for(ri i=0;i&lt;=n;++i)f[i]=mul(fac[i],a[i]),g[i]=i&amp;1?mod-ifac[i]:ifac[i]; reverse(f.begin(),f.end()); a=f*g; a.resize(n+1); reverse(a.begin(),a.end()); for(ri i=0;i&lt;=n;++i)Mul(a[i],ifac[i]); for(ri i=0;i&lt;=n;++i)cout&lt;&lt;a[i]&lt;&lt;' '; return 0;&#125; 黎明前的巧克力 解题思路： 对于每个数构造集合幂级数，发现是要求 ⊕i=1n(1+2xai)[x0]\\oplus_{i=1}^n(1+2x^{a_i})[x^0]⊕i=1n​(1+2xai​)[x0] 然后观察异或卷积的性质，假如第 iii 位为 111 ，那么它会根据 j&amp;ij\\&amp;ij&amp;i 的奇偶性对 jjj 位置产生 ±1\\pm1±1 的贡献，因此每个数 fwtfwtfwt 后每一位的结果一定为 111 或者 −3-3−3 ，这样我们直接把 ∑i=1n(1+2xai)\\sum_{i=1}^n(1+2x^{a_i})∑i=1n​(1+2xai​) 拿来 fwtfwtfwt ，然后解每一位有多少个 −1,3-1,3−1,3 然后求出真实的点值表达式的乘积结果，然后再 ifwtifwtifwt 回去即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef vector&lt;int&gt; poly;typedef long long ll;typedef pair&lt;int,int&gt; pii;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=2e6+5;int n,a[N],mx=0,lim,pw[N];inline void fwt(int*f)&#123; for(ri a0,a1,i=1;i&lt;lim;i&lt;&lt;=1)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k)&#123; a0=a[j+k],a1=a[j+k+i]; a[j+k]=a0+a1,a[j+k+i]=a0-a1; &#125;&#125;inline void ifwt(int*f)&#123; for(ri iv=mod+1&gt;&gt;1,a0,a1,i=1;i&lt;lim;i&lt;&lt;=1)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k)&#123; a0=a[j+k],a1=a[j+k+i]; a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); Mul(a[j+k],iv),Mul(a[j+k+i],iv); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); pw[0]=1; for(ri i=1,vl;i&lt;=n;++i)&#123; pw[i]=add(pw[i-1],add(pw[i-1],pw[i-1])); ++a[0]; a[vl=read()]+=2; mx=max(mx,vl); &#125; for(lim=1;lim&lt;=mx;lim&lt;&lt;=1); fwt(a); for(ri x,i=0;i&lt;lim;++i)&#123; x=(a[i]+n)/4; a[i]=(n-x)&amp;1?mod-pw[x]:pw[x]; &#125; ifwt(a); cout&lt;&lt;dec(a[0],1); return 0;&#125; Radix sum 解题思路： 不考虑模数的话就是 101010 进制 fwtfwtfwt 裸题，现在有了模数，那么可以暴力扩域，用一个向量 (a0,a1,...,a9)T(a_0,a_1,...,a_9)^{\\text T}(a0​,a1​,...,a9​)T 来表示一个数 ∑i=09aiω10i\\sum\\limits_{i=0}^9a_i\\omega_{10}^ii=0∑9​ai​ω10i​，这样就能够正常的 dftdftdft 了，然后再考虑怎么求 101010 的逆元，发现 555 的逆元可以广义欧拉定理直接搞， 222 可以直接除，这样就做完了，不过最后求答案的时候需要爆算一波 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;typedef unsigned long long ull;const ull inv_5=57646075230342349ull;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=1e5+5;int n,a[N],mx=0,lim;ull c[20];struct cp&#123; ull a[10]; inline void clear()&#123;for(ri i=0;i&lt;10;++i)a[i]=0;&#125; inline ull&amp;operator[](const int&amp;k)&#123;return a[k];&#125; inline const ull&amp;operator[](const int&amp;k)const&#123;return a[k];&#125; friend inline cp operator*(cp a,cp b)&#123; for(ri i=0;i&lt;10;++i)for(ri j=0;j&lt;10;++j)c[i+j]+=a[i]*b[j]; for(ri i=0;i&lt;10;++i)a[i]=c[i]+c[i+10],c[i]=c[i+10]=0; return a; &#125; friend inline void operator*=(cp&amp;a,cp b)&#123;a=a*b;&#125; friend inline cp operator^(cp a,int p)&#123; cp res; res.clear(),res[0]=1; for(;p;p&gt;&gt;=1,a=a*a)if(p&amp;1)res=res*a; return res; &#125; inline cp fix()&#123; cp res=*this; for(ri i=0;i&lt;10;++i)res[i]=(res[i]&gt;&gt;1)*inv_5; return res; &#125; inline ull val()&#123;return (a[0]-a[2]+a[7]-a[5])%(1ull&lt;&lt;58);&#125;&#125;f[N&lt;&lt;1];inline void dwt(cp*f)&#123; cp s[10]; for(ri i=1;i&lt;lim;i*=10)for(ri j=0,len=i*10;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k)&#123; for(ri ps,p=0;p&lt;10;++p)&#123; s[p].clear(); for(ri ps,q=0;q&lt;10;++q)&#123; ps=p*q%10; for(ri o=0;o+ps&lt;10;++o)s[p][o+ps]+=f[j+k+q*i][o]; for(ri o=10-ps;o&lt;10;++o)s[p][o+ps-10]+=f[j+k+q*i][o]; &#125; &#125; for(ri p=0;p&lt;10;++p)f[j+k+p*i]=s[p]; &#125;&#125;inline void idwt(cp*f)&#123; static cp s[10]; for(ri i=1;i&lt;lim;i*=10)for(ri j=0,len=i*10;j&lt;lim;j+=len) for(ri k=0;k&lt;i;++k)&#123; for(ri ps,p=0;p&lt;10;++p)&#123; s[p].clear(); for(ri ps,q=0;q&lt;10;++q)&#123; ps=p*q%10; ps=ps?10-ps:0; for(ri o=0;o+ps&lt;10;++o)s[p][o+ps]+=f[j+k+q*i][o]; for(ri o=10-ps;o&lt;10;++o)s[p][o+ps-10]+=f[j+k+q*i][o]; &#125; &#125; for(ri p=0;p&lt;10;++p)f[j+k+p*i]=s[p].fix(); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)++f[a[i]=read()][0],mx=max(mx,a[i]); for(lim=10;lim&lt;mx;lim*=10); dwt(f); for(ri i=0;i&lt;lim;++i)f[i]=f[i]^n; idwt(f); for(ri i=0;i&lt;n;++i)cout&lt;&lt;f[i].val()&lt;&lt;'\\n'; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round8","slug":"sol8","date":"2019-11-23T03:29:21.000Z","updated":"2019-12-26T04:24:49.106Z","comments":true,"path":"sol8/","link":"","permalink":"http://ldxcaicai.github.io/sol8/","excerpt":"","text":"青春猪头少年不会梦到兔女郎学姐 解题思路： 首先是处理环的问题，这貌似是一个常见套路，即规定开头一定是第一种算出方案数再扣去开头结尾都是第一种的方案数，最后乘上每种方案被计算的次数即可 现在只需考虑序列上如何做，显然要对每种颜色分开考虑，相当于是将每种颜色分成若干段然后在序列上拼接使得相邻的两段不能是同一种颜色，这不又是那道[JSOI2019]神经网络吗，显然用容斥+生成函数解决，那么现在只用求把 nnn 个颜色的球划分成 mmm 段，所有方案的段乘积之和，这个也可以生成函数推导一下，推导如下： Ans=[xn](∑i=0+∞ixi)m=[xn]xm(∑i=0+∞xi)2m=[xn−m](∑i=0+∞xi)2m=Cn+m−12m−1\\begin{aligned} Ans=&amp;[x^n](\\sum\\limits_{i=0}^{+\\infty}ix^i)^m\\\\ =&amp;[x^n]x^m(\\sum\\limits_{i=0}^{+\\infty}x^i)^{2m}\\\\ =&amp;[x^{n-m}](\\sum\\limits_{i=0}^{+\\infty}x^i)^{2m}\\\\ =&amp;C_{n+m-1}^{2m-1} \\end{aligned} Ans====​[xn](i=0∑+∞​ixi)m[xn]xm(i=0∑+∞​xi)2m[xn−m](i=0∑+∞​xi)2mCn+m−12m−1​​ 考虑枚举第 iii 种颜色分为了 bib_ibi​ 段，最后在序列上将相邻的段合起来后至少 cic_ici​ 段，那么现在可以列出序列上答案的式子： Ans=∑c∑b(∏Cai+bi−12bi−1Cbi−1ci−1(−1)bi−ci)(∑i=1nci)!∏i=−1nci!\\begin{aligned} Ans=&amp;\\sum\\limits_{c}\\sum\\limits_{b}(\\prod\\limits C_{a_i+b_i-1}^{2b_i-1}C_{b_i-1}^{c_i-1}(-1)^{b_i-c_i})\\frac{(\\sum\\limits_{i=1}^nc_i)!}{\\prod\\limits_{i=-1}^nc_i!} \\end{aligned} Ans=​c∑​b∑​(∏Cai​+bi​−12bi​−1​Cbi​−1ci​−1​(−1)bi​−ci​)i=−1∏n​ci​!(i=1∑n​ci​)!​​ 然后把式子拆开对每种球都构造生成函数最后分治 nttnttntt 合并起来即可，注意第一种颜色需要进行特殊处理，好吧还是列一个生成函数的式子： fi(x)=∑i=0aixii!(∑b≥iCai+b−12bCb−1i−1(−1)b−c)\\begin{aligned} f_i(x)=&amp;\\sum\\limits_{i=0}^{a_i}\\frac{x^i}{i!}(\\sum\\limits_{b\\ge i}C_{a_i+b-1}^{2b}C_{b-1}^{i-1}(-1)^{b-c}) \\end{aligned} fi​(x)=​i=0∑ai​​i!xi​(b≥i∑​Cai​+b−12b​Cb−1i−1​(−1)b−c)​ 显然可以卷积处理 还剩一个问题是每种环被计算的次数，假设循环节的长度为 len,m=∑i=1nailen,m=\\sum\\limits_{i=1}^na_ilen,m=i=1∑n​ai​ ，第一种颜色的球在一个循环节中被分成了 xxx 段，那么用上述做法实际被计算了 xmlen\\frac{x}{\\frac{m}{len}}lenm​x​ 次，二十几杀是哪个应该计算 lenlenlen 次，因此对于第一种颜色的球我们对每一位多除以一个 xxx ，之后的答案再乘上 mmm 即可得到正确答案 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;int invv[23],w[23],lim,tim;vector&lt;int&gt;rev[23];inline void init_ntt()&#123; invv[0]=1; for(ri iv=mod+1&gt;&gt;1,i=1;i&lt;23;++i)invv[i]=mul(invv[i-1],iv); w[22]=ksm(3,(mod-1)&gt;&gt;23); for(ri i=21;~i;--i)w[i]=mul(w[i+1],w[i+1]);&#125;inline void init(int up)&#123; lim=1,tim=0; while(lim&lt;up)lim&lt;&lt;=1,++tim; if(rev[tim].size())return; rev[tim].resize(lim); for(ri i=0;i&lt;lim;++i)rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,int typ)&#123; for(ri i=0;i&lt;lim;++i)if(i&lt;rev[tim][i])swap(a[i],a[rev[tim][i]]); for(ri i=1,a0,a1,t=0;i&lt;lim;i&lt;&lt;=1,++t)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0,mt=1;k&lt;i;++k,Mul(mt,w[t]))a0=a[j+k],a1=mul(a[j+k+i],mt),a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); if(~typ)return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i)Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b)&#123; int n=a.size(),m=b.size(),t=n+m-1; if(t&lt;=64)&#123; poly c(t); for(ri i=0;i&lt;n;++i)for(ri j=0;j&lt;m;++j)Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i)Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;inline void revv(poly&amp;a)&#123;reverse(a.begin(),a.end());&#125;const int N=2e5+5;int a[N],n,m=0,fac[N&lt;&lt;1],inv[N&lt;&lt;1],ifac[N&lt;&lt;1];poly f[N];inline poly fix(poly a)&#123;for(ri i=0;i&lt;a.size();++i)Mul(a[i],ifac[i]);return a;&#125;inline poly solve(int l,int r)&#123; if(l==r)return fix(f[l]); int mid=l+r&gt;&gt;1; return solve(l,mid)*solve(mid+1,r);&#125;inline void init_fac()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=inv[1]=1; for(ri i=2;i&lt;=m;++i)&#123; fac[i]=mul(fac[i-1],i); inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); ifac[i]=mul(ifac[i-1],inv[i]); &#125;&#125;inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;inline void check()&#123; poly f(8); for(ri i=0;i&lt;8;++i)f[i]=i; init(8); f.resize(lim); ntt(f,1); ntt(f,-1);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(),m+=a[i]; if(n==1)&#123; cout&lt;&lt;a[1]; return 0; &#125; init_fac(); init_ntt(); check(); for(ri i=1;i&lt;=n;++i)&#123; poly fa(a[i]+1),fb(a[i]+1); for(ri j=1;j&lt;=a[i];++j)fa[j]=mul(C(a[i]+j-1,a[i]-j),fac[j-1]); if(i==1)for(ri j=1;j&lt;=a[i];++j)Mul(fa[j],inv[j]); for(ri j=0;j&lt;=a[i];++j)fb[a[i]-j]=j&amp;1?mod-ifac[j]:ifac[j]; fa=fa*fb; f[i]=poly(a[i]+1); for(ri j=1;j&lt;=a[i];++j)f[i][j]=mul(fa[a[i]+j],ifac[j-1]); &#125; int res=0; poly g=solve(2,n),h(a[1]); for(ri i=0;i&lt;a[1];++i)h[i]=mul(f[1][i+1],ifac[i]); h=g*h; for(ri i=1;i&lt;h.size();++i)Add(res,mul(h[i],fac[i])); if(a[1]&gt;1)&#123; h=poly(a[1]-1); for(ri i=0;i&lt;a[1]-1;++i)h[i]=mul(f[1][i+2],ifac[i]); h=g*h; for(ri i=1;i&lt;h.size();++i)Dec(res,mul(h[i],fac[i])); &#125; cout&lt;&lt;mul(res,m); return 0;&#125; Endless Spin 解题思路： 又一道套路题，考虑用 min−maxmin-maxmin−max 容斥转化问题，变为求一个集合所有元素第一次被覆盖时间的最小值，这个可以用概率转化+一个简单 dpdpdp 来求，首先设这个集合某个元素被覆盖的概率为 PPP ，那么这个集合某个元素被覆盖的期望次数为 ∑i=0+∞(1−P1)i=1P\\sum\\limits_{i=0}^{+\\infty}(\\frac{1-P}{1})^i=\\frac1Pi=0∑+∞​(11−P​)i=P1​ ，设 fi,j,0/1f_{i,j,0/1}fi,j,0/1​ 表示处理到第 iii 个位置，有 jjj 个区间跟当前集合不相交，当前集合中元素的奇偶性为 0/10/10/1 的方案数，然后该怎么转移怎么转移，注意最后答案要维护一个小数类 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=55;int n;struct Db&#123; ll a[31]; inline ll&amp;operator[](const int&amp;k)&#123;return a[k];&#125; inline const ll&amp;operator[](const int&amp;k)const&#123;return a[k];&#125; inline void trans(ll _a,ll _b)&#123; a[0]=_a/_b; _a%=_b; for(ri i=1;i&lt;=30;++i)_a*=10,a[i]=_a/_b,_a%=_b; &#125; friend inline Db operator+(Db a,Db b)&#123; Db c; ll dt=0; for(ri i=30;~i;--i)&#123; c[i]=a[i]+b[i]+dt; if(i)dt=c[i]/10,c[i]%=10; &#125; return c; &#125; friend inline Db operator-(Db a,Db b)&#123; for(ri i=30;i;--i)&#123; if(a[i]&lt;b[i])--a[i-1],a[i]+=10; a[i]-=b[i]; &#125; return a[0]-=b[0],a; &#125; friend inline Db operator*(Db a,ll b)&#123; ll dt=0; for(ri i=30;~i;--i)&#123; a[i]*=b; a[i]+=dt; if(i)dt=a[i]/10,a[i]%=10; &#125; return a; &#125;&#125;res[N],tmp1,tmp2,tmp;inline void print(Db a)&#123; if(a[16]&gt;4)++a[15]; for(ri i=15;i;--i)&#123; if(a[i]==10)++a[i-1],a[i]=0; else break; &#125; cout&lt;&lt;a[0]&lt;&lt;'.'; for(ri i=1;i&lt;=15;++i)cout&lt;&lt;a[i]; puts(\"\");&#125;inline int calc(int x)&#123;return x*(x+1)&gt;&gt;1;&#125;ll f[N][N*N][2];//double res[N];inline void init()&#123; for(ri all,n=1;n&lt;=50;++n)&#123; memset(f,0,sizeof(f)); f[0][0][0]=1; for(ri i=1;i&lt;=n;++i)for(ri j=0;j&lt;i;++j) for(ri num=calc(i-j-1),up=calc(i);num&lt;=up;++num) for(ri op=0;op&lt;2;++op)f[i][num][op]+=f[j][num-calc(i-j-1)][!op]; all=calc(n); tmp1.trans(0,1); tmp2.trans(0,1); for(ri i=1;i&lt;=n;++i)for(ri num=0,up=calc(i);num&lt;=up;++num)if(f[i][num][1]!=f[i][num][0])&#123; tmp.trans(f[i][num][1],all-num-calc(n-i)); tmp1=tmp1+tmp*all; tmp.trans(f[i][num][0],all-num-calc(n-i)); tmp2=tmp2+tmp*all; &#125; res[n]=tmp1-tmp2; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init(); for(ri tt=read();tt;--tt)print(res[read()]); return 0;&#125; 斐波那契的最小公倍数 解题思路： 首先有一个结论 gcd⁡(fiba,fibb)=fibgcd⁡(a,b)\\gcd(fib_a,fib_b)=fib_{\\gcd(a,b)}gcd(fiba​,fibb​)=fibgcd(a,b)​ ，下面给出证明： 首先有两个引理 gcd⁡(fibi,fibi−1)=gcd⁡(fibi−1,fibi−2)=⋯=1\\gcd(fib_i,fib_{i-1})=\\gcd(fib_{i-1},fib_{i-2})=\\cdots=1gcd(fibi​,fibi−1​)=gcd(fibi−1​,fibi−2​)=⋯=1 fibn+m=fibn−1×fibm+fibn×fibm+1fib_{n+m}=fib_{n-1}\\times fib_{m}+fib_{n}\\times fib_{m+1}fibn+m​=fibn−1​×fibm​+fibn​×fibm+1​ ，这个考虑利用数学归纳法， m=1m=1m=1 时显然成立，那么 fibn+m=fibn+m−1+fibn+m−2=fibn−1fibm−1+fibnfibm+fibn−2fibm−1+fibn−1fibm=fibnfibm−1+fibnfibm+fibn−1fibm=fibn−1fibm+fibnfibm+1⇒gcd⁡(fibn+m,fibn)=gcd⁡(fibn−1fibm+fibnfibm+1,fibn)=gcd⁡(fibn−1fibm,fibn)=gcd⁡(fibn,fibm)\\begin{aligned} fib_{n+m}=&amp;fib_{n+m-1}+fib_{n+m-2}\\\\ =&amp;fib_{n-1}fib_{m-1}+fib_{n}fib_{m}+fib_{n-2}fib_{m-1}+fib_{n-1}fib_{m}\\\\ =&amp;fib_{n}fib_{m-1}+fib_{n}fib_{m}+fib_{n-1}fib_{m}\\\\ =&amp;fib_{n-1}fib_{m}+fib_{n}fib_{m+1}\\\\ \\Rightarrow \\gcd(fib_{n+m},fib_n)=&amp;\\gcd(fib_{n-1}fib_{m}+fib_{n}fib_{m+1},fib_n)\\\\ =&amp;\\gcd(fib_{n-1}fib_{m},fib_n)\\\\ =&amp;\\gcd(fib_n,fib_m) \\end{aligned} fibn+m​====⇒gcd(fibn+m​,fibn​)===​fibn+m−1​+fibn+m−2​fibn−1​fibm−1​+fibn​fibm​+fibn−2​fibm−1​+fibn−1​fibm​fibn​fibm−1​+fibn​fibm​+fibn−1​fibm​fibn−1​fibm​+fibn​fibm+1​gcd(fibn−1​fibm​+fibn​fibm+1​,fibn​)gcd(fibn−1​fibm​,fibn​)gcd(fibn​,fibm​)​ 发现就是辗转相除的形式，因此原命题得证 现在考虑到最后答案相当于是质因数的指数取 max⁡\\maxmax ，因此我们对指数给 min−maxmin-maxmin−max 容斥一波变成取 min⁡\\minmin lcm(f{S})=∏T⊆S,T≠∅fgcd⁡{T}(−1)∣T∣+1\\begin{aligned} lcm(f_{\\{S\\}})=\\prod\\limits_{T\\subseteq S,T\\not=\\emptyset}f_{\\gcd\\{T\\}}^{(-1)^{|T|+1}} \\end{aligned} lcm(f{S}​)=T⊆S,T​=∅∏​fgcd{T}(−1)∣T∣+1​​ 那么问题可以转化为求 gcd⁡=d\\gcd=dgcd=d 且集合大小为奇数/偶数的集合有多少个，显然可以用 MobiusMobiusMobius 反演搞，复杂度 O(nln⁡n)O(n\\ln n)O(nlnn) CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p,int md)&#123;int ret=1;for(;p;p&gt;&gt;=1,a=(ll)a*a%md)(p&amp;1)&amp;&amp;(ret=(ll)ret*a%md);return ret;&#125;&#125;using namespace modular;const int N=50005,M=1e6+5;int fib[M],pw[M],cnt[M],a[N],mu[M],pri[M],tot=0,mx=0,n,ct[M];bool vs[M];inline void init()&#123; fib[1]=fib[2]=1; for(ri i=3;i&lt;=mx;++i)fib[i]=add(fib[i-1],fib[i-2]); for(ri i=1;i&lt;=mx;++i)for(ri j=i;j&lt;=mx;j+=i)cnt[i]+=ct[j]; mu[1]=1; for(ri i=2;i&lt;=mx;++i)&#123; if(!vs[i])pri[++tot]=i,mu[i]=mod-2; for(ri j=1,up=mx/i;j&lt;=tot&amp;&amp;pri[j]&lt;=up;++j)&#123; vs[i*pri[j]]=1; if(i==i/pri[j]*pri[j])&#123; mu[i*pri[j]]=0; break; &#125; mu[i*pri[j]]=mod-1-mu[i]; &#125; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(),mx=max(mx,a[i]); sort(a+1,a+n+1),n=unique(a+1,a+n+1)-a-1; for(ri i=1;i&lt;=n;++i)++ct[a[i]]; init(); for(ri i=1;i&lt;=mx;++i)cnt[i]&amp;&amp;(cnt[i]=ksm(2,cnt[i]-1,mod-1)); for(ri i=1;i&lt;=mx;++i)for(ri j=i;j&lt;=mx;j+=i) pw[i]=(pw[i]+(ll)mu[j/i]*cnt[j]%(mod-1))%(mod-1); for(ri i=1;i&lt;=mx;++i)cnt[i]&amp;&amp;(--cnt[i]); for(ri i=1;i&lt;=mx;++i)for(ri j=i;j&lt;=mx;j+=i) pw[i]=(pw[i]-(ll)mu[j/i]*cnt[j]%(mod-1)+(mod-1))%(mod-1); int res=1; for(ri i=1;i&lt;=mx;++i)Mul(res,ksm(fib[i],pw[i],mod)); cout&lt;&lt;res; return 0;&#125; 最小公倍佩尔数 解题思路： 首先可以解出递推式 fi=2fi−1+fi−2f_i=2f_{i-1}+f_{i-2}fi​=2fi−1​+fi−2​ ，跟上一道题一样可以推出 gcd⁡(fi,fj)=fgcd⁡(i,j)\\gcd(f_i,f_j)=f_{\\gcd(i,j)}gcd(fi​,fj​)=fgcd(i,j)​ ，但发现这题每组数据要求多个答案，因此上道题的方法貌似已经不适用了，我们考虑一种新的转化： lcm(f{S})=∏T⊆S,T≠∅fgcd⁡{T}(−1)∣T∣+1\\begin{aligned} lcm(f_{\\{S\\}})=\\prod\\limits_{T\\subseteq S,T\\not=\\emptyset}f_{\\gcd\\{T\\}}^{(-1)^{|T|+1}} \\end{aligned} lcm(f{S}​)=T⊆S,T​=∅∏​fgcd{T}(−1)∣T∣+1​​ 考虑构造函数 g(x)g(x)g(x) 满足 ∏d∣xg(d)=f(x)\\prod\\limits_{d|x}g(d)=f(x)d∣x∏​g(d)=f(x) ，发现这个 g(x)g(x)g(x) 居然也能 O(nln⁡n)O(n\\ln n)O(nlnn) 的时间预处理出来，且 lcm(f{S})=∏T⊆S,T≠∅(∏d∣gcd⁡{T}g(d))(−1)∣T∣+1=∏dgd∑T⊆S,T≠∅,d∣gcd⁡{T}(−1)T=∏dgd\\begin{aligned} lcm(f_{\\{S\\}})=&amp;\\prod\\limits_{T\\subseteq S,T\\not=\\emptyset}(\\prod\\limits_{d|\\gcd{\\{T\\}}}g(d))^{(-1)^{|T|+1}}\\\\ =&amp;\\prod\\limits_{d}g_d^{\\sum\\limits_{T\\subseteq S,T\\not=\\emptyset,d|\\gcd{\\{T\\}}}(-1)^T}\\\\ =&amp;\\prod\\limits_{d}g_d \\end{aligned} lcm(f{S}​)===​T⊆S,T​=∅∏​(d∣gcd{T}∏​g(d))(−1)∣T∣+1d∏​gdT⊆S,T​=∅,d∣gcd{T}∑​(−1)T​d∏​gd​​ CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; int mod; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125;&#125;using namespace modular;const int N=1e6+5;int f[N],g[N],n;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; n=read(),mod=read(); f[1]=g[1]=1; for(ri i=2;i&lt;=n;++i)f[i]=g[i]=add(add(f[i-1],f[i-1]),f[i-2]); for(ri t,i=2;i&lt;=n;++i)&#123; t=Inv(g[i]); for(ri j=i+i;j&lt;=n;j+=i)Mul(g[j],t); &#125; int res=0,pre=1; for(ri i=1;i&lt;=n;++i)Mul(pre,g[i]),Add(res,mul(pre,i)); cout&lt;&lt;res&lt;&lt;'\\n'; &#125; return 0;&#125; 生成树计数 解题思路： 考虑 kkk 次幂的组合意义可以用生成函数表示，那么对于每一条边构造生成函数 ft(x)=∑i=0+∞(wtx)ii!f_t(x)=\\sum\\limits_{i=0}^{+\\infty}\\frac{(w_tx)^i}{i!}ft​(x)=i=0∑+∞​i!(wt​x)i​ ，然后把这个当成元素求行列式值最后取多项式的第 KKK 项系数即可，然而直接用多项式求值不是很好做，因此我们带入点值进去算最后用牛顿插值/拉格朗日插值把系数搞出来就行了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline int fix(int x)&#123;return (x%mod+mod)%mod;&#125;&#125;using namespace modular;const int N=55,M=10005;int n,K,m,w[N][N],a[N][N],f[N],fac[M],ifac[M],inv[M];inline void init()&#123; fac[0]=ifac[0]=fac[1]=ifac[1]=inv[1]=1; for(ri i=2;i&lt;=10000;++i)&#123; fac[i]=mul(fac[i-1],i); inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); ifac[i]=mul(ifac[i-1],inv[i]); &#125;&#125;inline int calc()&#123; int res=1; for(ri ps,i=1;i&lt;n;++i)&#123; for(ps=i;ps&lt;=n;++ps)if(a[ps][i])&#123; ps=i; break; &#125; if(ps==n+1)return 0; if(ps^i)&#123; for(ri j=1;j&lt;=n;++j)swap(a[ps][j],a[i][j]); res=res?mod-res:0; &#125; for(ri j=1,t,iv=Inv(a[i][i]);j&lt;=n;++j)if(j!=i&amp;&amp;a[j][i])&#123; t=mul(a[j][i],iv); for(ri k=i;k&lt;=n;++k)Dec(a[j][k],mul(t,a[i][k])); &#125; Mul(res,a[i][i]); &#125; return res;&#125;struct Newton_Inter&#123; int up,px[M],py[M],cur,dt[2][M],f[M],ff[M]; Newton_Inter()&#123;up=cur=0;&#125; inline int&amp;operator[](const int&amp;k)&#123;return f[k];&#125; inline const int&amp;operator[](const int&amp;k)const&#123;return f[k];&#125; inline void insert(int x,int y)&#123; px[++up]=x,py[up]=y; if(up==1)dt[cur][0]=f[0]=y,ff[0]=1; else&#123; cur^=1,dt[cur][0]=y; for(ri i=1;i&lt;up;++i)dt[cur][i]=mul(dec(dt[cur][i-1],dt[!cur][i-1]),inv[px[up]-px[up-i]]); for(ri i=up-1;~i;--i)ff[i]=add(i?ff[i-1]:0,mul(mod-px[up-1],ff[i])); for(ri i=0;i&lt;up;++i)Add(f[i],mul(ff[i],dt[cur][up-1])); &#125; &#125;&#125;F;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),K=read(); init(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=n;++j)w[i][j]=read(); m=n*K; for(ri t=0;t&lt;=m;++t)&#123; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=n;++j)a[i][j]=0; for(ri res,i=1;i&lt;=n;++i)for(ri j=1;j&lt;i;++j)&#123; res=0; for(ri mt=1,_t=mul(t,w[i][j]),_pw=0;_pw&lt;=K;++_pw)&#123; Add(res,mul(mt,ifac[_pw])); Mul(mt,_t); &#125; Add(a[i][i],res); Add(a[j][j],res); Dec(a[i][j],res); Dec(a[j][i],res); &#125; F.insert(t,calc()); &#125; cout&lt;&lt;mul(F[K],fac[K]); return 0;&#125; Mike and Fish 解题思路： 考虑将行列扯出来建二分图，然后将限制改为 black=whiteblack=whiteblack=white 且保证合法怎么做，发现只用在二分图上跑欧拉回路即可，那么现在可能有度数为奇数的点，我们在两边各建一个虚点处理即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=4e5+5;int n,idx=0;bool col[N],vs[N];pii a[N];vector&lt;pii&gt;e[N];void dfs(int p)&#123; pii tmp; while((int)e[p].size())&#123; tmp=e[p].back(); e[p].pop_back(); if(vs[tmp.se])continue; vs[tmp.se]=1; col[tmp.se]=p&lt;tmp.fi; dfs(tmp.fi); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)&#123; a[i].fi=read(); a[i].se=read()+200000; ++idx; e[a[i].fi].pb(pii(a[i].se,idx)); e[a[i].se].pb(pii(a[i].fi,idx)); &#125; for(ri i=1;i&lt;=400000;++i)&#123; if(((int)e[i].size())&amp;1)&#123; ++idx; e[i].pb(pii(400001,idx)); e[400001].pb(pii(i,idx)); &#125; &#125; for(ri i=1;i&lt;=400001;++i)dfs(i); for(ri i=1;i&lt;=n;++i)cout&lt;&lt;(col[i]?'r':'b'); return 0;&#125; XOR Replace 解题思路： 设 an+1=⊕i=1naia_{n+1}=\\oplus_{i=1}^na_ian+1​=⊕i=1n​ai​ ，仔细观察发现每次操作相当于 swap(ai,an+1)swap(a_i,a_{n+1})swap(ai​,an+1​) ，那么我们将不同的 (ai,bi)(a_i,b_i)(ai​,bi​) 连边，最后按照连通块数讨论即可得到答案，大概就是联通块内按照置换的方式一定可以用连通块大小数次换完，两个连通块之间需要用一次来进行转换 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=4e5+5;int n,a[N],b[N],_a[N],_b[N];inline bool check()&#123; for(ri i=1;i&lt;=n+1;++i)_a[i]=a[i],_b[i]=b[i]; sort(_a+1,_a+n+2); sort(_b+1,_b+n+2); for(ri i=1;i&lt;=n+1;++i)if(_a[i]^_b[i])return 0; return 1;&#125;int vl[N&lt;&lt;1],sig=0;inline int Find(int x)&#123;return lower_bound(vl+1,vl+sig+1,x)-vl;&#125;int ft[N&lt;&lt;1];inline int find(int x)&#123;return x^ft[x]?ft[x]=find(ft[x]):x;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[n+1]^=(a[i]=read()); for(ri i=1;i&lt;=n;++i)b[n+1]^=(b[i]=read()); if(!check())&#123; cout&lt;&lt;-1; return 0; &#125; int res=0; vl[++sig]=a[n+1]; vl[++sig]=b[n+1]; for(ri i=1;i&lt;=n;++i)&#123; if(a[i]==b[i])continue; vl[++sig]=a[i]; vl[++sig]=b[i]; ++res; &#125; if(!res)&#123; cout&lt;&lt;0; return 0; &#125; sort(vl+1,vl+sig+1),sig=unique(vl+1,vl+sig+1)-vl-1; for(ri i=1;i&lt;=sig;++i)ft[i]=i; for(ri i=1;i&lt;=n+1;++i)&#123; if(a[i]==b[i])continue; a[i]=find(Find(a[i])); b[i]=find(Find(b[i])); if(a[i]^b[i])ft[b[i]]=a[i]; &#125; for(ri i=1;i&lt;=sig;++i)if(ft[i]==i)++res; cout&lt;&lt;res-1; return 0;&#125; Two Trees 解题思路： 能否构造只需考虑同一个点在两棵树中儿子数的奇偶性是否相同，下面给出相同时的构造方案 首先一棵树中一定有奇数个值为奇数的点，不妨设为 2k+12k+12k+1 个，考虑让其中 2k2k2k 个两两配对一个 111 一个 −1-1−1 ，剩下一个随意 111 或者 −1-1−1 就能保证这个子树的权值和绝对值为 111 ，那么考虑怎么限制 111 和 −1-1−1 匹配的关系：可以将当前未匹配且儿子数为偶数的点放到一个序列中然后每两个连一条边，这样两棵树都连好后一定搞出来一个二分图，二分图染色即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int N=1e5+5;int n,ans[N];vector&lt;int&gt;e[N];struct Tree&#123; vector&lt;int&gt;g[N]; int rt,stk[N],top; void dfs(int p)&#123; for(ri i=0,v;i&lt;g[p].size();++i)dfs(v=g[p][i]); if(!(((int)g[p].size())&amp;1))stk[++top]=p; while(top&gt;1)&#123; e[stk[top]].pb(stk[top-1]); e[stk[top-1]].pb(stk[top]); top-=2; &#125; &#125; inline void init()&#123; for(ri ft,i=1;i&lt;=n;++i)&#123; ft=read(); if(ft==-1)rt=i; else g[ft].pb(i); &#125; &#125; inline void solve()&#123; top=0; dfs(rt); &#125;&#125;t[2];bool vs[N],col[N];void dfs(int p,int cl)&#123; if(vs[p])return; vs[p]=1; col[p]=cl; for(ri i=0;i&lt;e[p].size();++i)dfs(e[p][i],cl^1);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=0;i&lt;2;++i)t[i].init(); for(ri i=1;i&lt;=n;++i)if(((int)t[0].g[i].size()+(int)t[1].g[i].size())&amp;1)&#123; puts(\"IMPOSSIBLE\"); return 0; &#125; puts(\"POSSIBLE\"); for(ri i=0;i&lt;2;++i)t[i].solve(); for(ri i=1;i&lt;=n;++i)dfs(i,0); for(ri i=1;i&lt;=n;++i)cout&lt;&lt;((((int)t[0].g[i].size())&amp;1)?0:(col[i]?1:-1))&lt;&lt;' '; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round7","slug":"sol7","date":"2019-11-18T03:35:12.000Z","updated":"2019-12-26T04:26:08.642Z","comments":true,"path":"sol7/","link":"","permalink":"http://ldxcaicai.github.io/sol7/","excerpt":"","text":"Sockpuppets 解题思路： 考虑到题目的匹配条件显然需要建一棵 trietrietrie 树出来，注意到这棵树深度不超过 101010 ，考虑设 fi,j,kf_{i,j,k}fi,j,k​ 表示当前处理到子树 iii ，子树中有 jjj 个点需要进行匹配，自己的祖先已经有 kkk 个被提前选用匹配的方案数，然后按照当前点的类型分开转移即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef double db;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef pair&lt;ll,ll&gt; pll;typedef unsigned long long Ull;typedef unsigned int uii;typedef double db;typedef long double ld;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=20005;int f[N][15][25],tmp[15][25],n,m;inline int calc1(int x)&#123;return x&lt;2?1:mod+1&gt;&gt;1;&#125;inline int calc2(int x,int y)&#123; if(!x)return 1; if(x==1)return y; return (ll)y*(y-1)/2%mod;&#125;namespace trie&#123; int tot,son[N][26],cnt1[N],cnt2[N]; inline int newnode()&#123; ++tot; memset(son[tot],0,sizeof(son[tot])); cnt1[tot]=cnt2[tot]=0; return tot; &#125; inline void insert(char*s,int len,int c1,int c2)&#123; int p=0; for(ri x,i=1;i&lt;=len;++i)&#123; x=s[i]-'a'; if(!son[p][x])son[p][x]=newnode(); p=son[p][x]; &#125; cnt1[p]+=c1,cnt2[p]+=c2; &#125; void dfs(int p)&#123; for(ri i=0;i&lt;=10;++i)for(ri j=0;j&lt;=20;++j)f[p][i][j]=0; f[p][0][0]=1; for(ri v,s=0;s&lt;26;++s)if(son[p][s])&#123; dfs(v=son[p][s]); for(ri i=0;i&lt;=10;++i)for(ri j=0;j&lt;=20;++j)if(f[p][i][j]) for(ri k=0;k+i&lt;=10;++k)for(ri l=0;j+l&lt;=20;++l)if(f[v][k][l]) Add(tmp[i+k][j+l],mul(f[p][i][j],f[v][k][l])); for(ri i=0;i&lt;=10;++i)for(ri j=0;j&lt;=20;++j)&#123; f[p][i][j]=tmp[i][j]; tmp[i][j]=0; &#125; &#125; if(!cnt1[p]&amp;&amp;!cnt2[p])return; for(ri i=0;i&lt;=10;++i)for(ri j=0;j&lt;=20;++j)if(f[p][i][j])&#123; if(cnt1[p])&#123; for(ri k=0;k&lt;=2;++k)for(ri l=0;l&lt;=2;++l) if(k+l&gt;0&amp;&amp;k+l&lt;3&amp;&amp;i+k&lt;=10&amp;&amp;j&gt;=l)Add(tmp[i+k][j-l],mul(f[p][i][j],mul(calc1(k),calc2(l,j)))); &#125; else&#123; if(i)Add(tmp[i-1][j],mul(i,f[p][i][j])); if(j&lt;20)Add(tmp[i][j+1],f[p][i][j]); &#125; &#125; for(ri i=0;i&lt;=10;++i)for(ri j=0;j&lt;=20;++j)&#123; Add(f[p][i][j],tmp[i][j]); tmp[i][j]=0; &#125; &#125;&#125;char s[15];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read(),cas=1;cas&lt;=tt;++cas)&#123; printf(\"Case #%d: \",cas); n=read(),m=read(); trie::tot=0; memset(trie::son[0],0,sizeof(trie::son[0])); for(ri i=1,len;i&lt;=n;++i)&#123; len=Read(s); trie::insert(s,len,1,0); &#125; for(ri i=1,len;i&lt;=m;++i)&#123; len=Read(s); trie::insert(s,len,0,1); &#125; trie::dfs(0); cout&lt;&lt;f[0][0][0]&lt;&lt;'\\n'; &#125; return 0;&#125; Drazil and Morning Exercise 解题思路： 我写的是自己想的一个垃圾 O(Tnlog⁡n)O(Tn\\log n)O(Tnlogn) 看了一下 mayaohuamayaohuamayaohua 神仙的 blogblogblog 貌似能用并查集优化到 O(Tnα(n))O(Tn\\alpha(n))O(Tnα(n)) ，首先预处理出每个点到其最远点的距离，然后发现若对于两个点 (u,v)(u,v)(u,v) 按照其距离从大的往小的连边会连出来一棵内向树，且对于这棵树每个点的合法范围一定是一个以其为根的连通块，那么用个离散化+ dfsdfsdfs 序+主席树就可以求子树内比某个数小的点数 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef double db;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef pair&lt;ll,ll&gt; pll;typedef unsigned long long Ull;typedef unsigned int uii;typedef double db;typedef long double ld;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;char xxx;const int N=1e5+5;vector&lt;pii&gt;e[N];int n,sig=0,rt[N];ll f[N],_f[N],g[N],vl[N],a[N];inline int find(ll x)&#123;return lower_bound(vl+1,vl+sig+1,x)-vl;&#125;void dfs1(int p,int ft)&#123; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==ft)continue; dfs1(v,p); if(f[v]+e[p][i].se&gt;=f[p])&#123; _f[p]=f[p]; f[p]=f[v]+e[p][i].se; &#125; else ckmax(_f[p],f[v]+e[p][i].se); &#125;&#125;void dfs2(int p,int ft)&#123; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==ft)continue; g[v]=max(g[p],f[v]+e[p][i].se==f[p]?_f[p]:f[p])+e[p][i].se; dfs2(v,p); &#125;&#125;int in[N],out[N],pred[N],tot=0,ps[N];void dfs(int p,int ft)&#123; pred[in[p]=++tot]=p; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==ft)continue; dfs(v,p); &#125; out[p]=tot;&#125;namespace sgt&#123; #define lc (son[p][0]) #define rc (son[p][1]) #define mid (l+r&gt;&gt;1) int siz[N*100],son[N*100][2],cnt=0; inline void update(int&amp;p,int o,int l,int r,int k)&#123; p=++cnt; siz[p]=siz[o]+1,lc=son[o][0],rc=son[o][1]; if(l==r)return; k&lt;=mid?update(lc,lc,l,mid,k):update(rc,rc,mid+1,r,k); &#125; inline int query(int a,int b,int l,int r,int ql,int qr)&#123; if(siz[a]==siz[b])return 0; if(ql&lt;=l&amp;&amp;r&lt;=qr)return siz[b]-siz[a]; if(qr&lt;=mid)return query(son[a][0],son[b][0],l,mid,ql,qr); if(ql&gt;mid)return query(son[a][1],son[b][1],mid+1,r,ql,qr); return query(son[a][0],son[b][0],l,mid,ql,qr)+query(son[a][1],son[b][1],mid+1,r,ql,qr); &#125; #undef lc #undef rc #undef mid&#125;char yyy;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); cerr&lt;&lt;(&amp;yyy-&amp;xxx)/1024/1024&lt;&lt;\"ldxcaicai\\n\"; #endif n=read(); for(ri i=1,u,v,w;i&lt;n;++i)&#123; u=read(),v=read(),w=read(); e[u].pb(pii(v,w)); e[v].pb(pii(u,w)); &#125; dfs1(1,0); dfs2(1,0); for(ri i=1;i&lt;=n;++i)vl[i]=a[i]=max(f[i],g[i]); sort(vl+1,vl+n+1),sig=unique(vl+1,vl+n+1)-vl-1; for(ri i=1;i&lt;=n;++i)a[i]=find(a[i]); int _rt=1; for(ri i=2;i&lt;=n;++i)if(a[i]&lt;a[_rt])_rt=i; dfs(_rt,0); for(ri i=1;i&lt;=n;++i)sgt::update(rt[i],rt[i-1],1,sig,a[pred[i]]); for(ri tt=read();tt;--tt)&#123; ll x=readl(); for(ri l=1,r=0;l&lt;=sig;++l)&#123; while(r&lt;sig&amp;&amp;vl[r+1]-vl[l]&lt;=x)++r; ps[l]=r; &#125; int res=0; for(ri L,R,i=1;i&lt;=n;++i)&#123; ckmax(res,sgt::query(rt[in[i]-1],rt[out[i]],1,sig,a[i],ps[a[i]])); &#125; cout&lt;&lt;res&lt;&lt;'\\n'; &#125; return 0;&#125; Numbers on the blackboard 解题思路： 这题比较有意思，考虑离线下所有询问将其放在其右端点处，同时用增量法构造一些组，最后从左向右合并每个组，而组内则从右向左合并。 考虑如何分组最优，如果一个组的所有数从右向左的累加和大于 000 就跟前一个组进行合并，否则就不合并，这个可以用并查集随便维护一下然后就做完了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std; //MoBannamespace MoBan&#123;//Typetypedef long long ll;typedef double db;typedef long double ld;typedef unsigned long long Ull;typedef unsigned int uii;typedef const int csi; // Pairtypedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;#define fi first#define se second //Vectortypedef vector&lt;int&gt; vi;typedef vector&lt;pii&gt; vii;typedef vector&lt;pll&gt; vll;typedef vector&lt;pli&gt; vli;typedef vector&lt;pil&gt; vil;#define pb push_back //Maptypedef map&lt;int,int&gt; mii;typedef map&lt;ll,int&gt; mli;typedef map&lt;int,bool&gt; mbi; //Settypedef set&lt;int&gt; si;typedef set&lt;pii&gt; sii;typedef set&lt;pli&gt; sli;typedef set&lt;pil&gt; sil;typedef set&lt;pll&gt; sll;#define ins insert#define del erase const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++) //Inputinline int read()&#123; bool f=1; int ans=0; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125; //Fileinline void file()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); freopen(\"lx.out\",\"w\",stdout); #endif&#125; //Functionstemplate&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;&#125;using namespace MoBan; //Modularnamespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(csi&amp;a)&#123;return ksm(a,mod-2);&#125; inline int fix(csi&amp;a)&#123;return (a%mod+mod)%mod;&#125;&#125;using namespace modular; //My solconst int N=5e5+5,inf=1e9+7;int n,a[N],ft[N],m,ans[N],sum[N],idx[N],vl[N],pre[N],top=0,pw[N],ipw[N],ss[N];pii stk[N];vector&lt;pii&gt;qry[N];inline int find(int x)&#123;return ft[x]^x?ft[x]=find(ft[x]):x;&#125;inline int calc(int l,int r)&#123;return mul(ipw[l],dec(ss[r],ss[l-1]));&#125; //Mainsigned main()&#123; file(); n=read(),m=read(); pw[0]=ipw[0]=1; for(ri i=1;i&lt;=n;++i)&#123; a[i]=read(),ft[i]=i; pw[i]=add(pw[i-1],pw[i-1]); ipw[i]=mul(ipw[i-1],mod+1&gt;&gt;1); &#125; for(ri i=1,l,r;i&lt;=m;++i)&#123; l=read(),r=read(); qry[r].pb(pii(l,i)); &#125; for(ri i=1;i&lt;=n;++i)&#123; ss[i]=add(ss[i-1],mul(pw[i],fix(a[i]))); idx[i]=++top; stk[top]=pii(i,i); sum[top]=a[i]; vl[top]=fix(a[i]); while(top&gt;1&amp;&amp;sum[top]&gt;0)&#123; int fx=find(stk[top].fi),fy=find(stk[top-1].fi); ft[fx]=fy; if(stk[top-1].se-stk[top-1].fi+1&gt;=30||sum[top]==inf||sum[top-1]==inf)sum[top-1]=inf; else sum[top-1]=min((ll)inf,(((ll)sum[top])&lt;&lt;(stk[top-1].se-stk[top-1].fi+1))+sum[top-1]); vl[top-1]=add(mul(pw[stk[top-1].se-stk[top-1].fi+1],vl[top]),vl[top-1]); stk[top-1].se=stk[top].se; --top; &#125; pre[top]=add(pre[top-1],vl[top]); for(ri res=0,j=0,l,r,L,R,id;j&lt;qry[i].size();++j)&#123; l=qry[i][j].fi,r=i,id=qry[i][j].se; L=idx[find(l)],R=idx[find(r)]; ans[id]=add(calc(l,stk[L].se),mul(2,dec(pre[R],pre[L]))); &#125; &#125; for(ri i=1;i&lt;=m;++i)cout&lt;&lt;ans[i]&lt;&lt;'\\n'; return 0;&#125; 主旋律 解题思路： 比较套路的一道题，考虑这种 DAGDAGDAG 计数都是删去入度或者出度为 000 的点，然后枚举子集补集转化转移即可，关于这道题，定义 fsf_sfs​ 表示集合 sss 合法方案数， gsg_sgs​ 表示集合 sss 由若干强连通分量拼接而成的方案数， sumssum_ssums​ 表示集合 sss 中的边数， coes,tcoe_{s,t}coes,t​ 表示集合 sss 中子集 ttt 的出度为 000 的方案数，对于 gsg_sgs​ ，我们先不把 fsf_sfs​ 算入其中，这样就有 fs=2sums−∑T⊂SgTcoeS,Tf_s=2^{sum_s}-\\sum\\limits_{T\\subset S}g_Tcoe_{S,T}fs​=2sums​−T⊂S∑​gT​coeS,T​ ，显然 coecoecoe 是很好处理的，问题转化为求 ggg ，对于 ggg 我们枚举其最小标号所在的连通块然后就可以转移了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;//MoBannamespace MoBan&#123;//Typetypedef long long ll;typedef double db;typedef long double ld;typedef unsigned long long Ull;typedef unsigned int uii;typedef const int csi;// Pairtypedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;#define fi first#define se second//Vectortypedef vector&lt;int&gt; vi;typedef vector&lt;pii&gt; vii;typedef vector&lt;pll&gt; vll;typedef vector&lt;pli&gt; vli;typedef vector&lt;pil&gt; vil;#define pb push_back//Maptypedef map&lt;int,int&gt; mii;typedef map&lt;ll,int&gt; mli;typedef map&lt;int,bool&gt; mbi;//Settypedef set&lt;int&gt; si;typedef set&lt;pii&gt; sii;typedef set&lt;pli&gt; sli;typedef set&lt;pil&gt; sil;typedef set&lt;pll&gt; sll;#define ins insert#define del eraseconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)//Inputinline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;//Fileinline void file()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #else #ifndef ONLINE_JUDGE freopen(\"a.in\",\"r\",stdin); freopen(\"a.out\",\"w\",stdout); #endif #endif&#125;//Functionstemplate&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;&#125;using namespace MoBan;//Modularnamespace modular&#123; const int mod=1e9+7; inline int add(csi&amp;a,csi&amp;b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(csi&amp;a,csi&amp;b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(csi&amp;a,csi&amp;b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,csi&amp;b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,csi&amp;b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,csi&amp;b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,1),1);return ret;&#125; inline int Inv(csi&amp;a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;//My solconst int N=16;int n,m,in[1&lt;&lt;15],out[1&lt;&lt;15],pw[N*N],all,cnt[1&lt;&lt;15],f[1&lt;&lt;15],g[1&lt;&lt;15],sum[1&lt;&lt;15],coe[1&lt;&lt;15];inline void dfs(int S,int cur)&#123; if(!cur)return; dfs(S,(cur-1)&amp;S); int t=cur&amp;-cur; coe[cur]=add(dec(coe[cur^t],cnt[out[t]&amp;cur]),cnt[in[t]&amp;(S^cur)]);&#125;//Mainint main()&#123; file(); n=read(),m=read(); pw[0]=1; for(ri i=1;i&lt;=m;++i)pw[i]=add(pw[i-1],pw[i-1]); for(ri i=1,u,v;i&lt;=m;++i)&#123; u=read()-1,v=read()-1; out[pw[u]]|=pw[v]; in[pw[v]]|=pw[u]; &#125; all=pw[n]; for(ri s=1,t;s&lt;all;++s)&#123; t=s&amp;-s; cnt[s]=cnt[s^t]+1; sum[s]=sum[s^t]+cnt[in[t]&amp;s]+cnt[out[t]&amp;s]; dfs(s,s); for(ri ns=t^s,nt=ns;nt;nt=(nt-1)&amp;ns)Dec(g[s],mul(g[nt],f[s^nt])); f[s]=pw[sum[s]]; for(ri nt=s;nt;nt=(nt-1)&amp;s)Dec(f[s],mul(g[nt],pw[sum[s^nt]+coe[nt]])); Add(g[s],f[s]); &#125; cout&lt;&lt;f[all-1]; return 0;&#125; Biconnected 解题思路： 跟上一题思路类似，这不过这题缩完点之后变成了一棵树，因此要预处理一个 fsf_sfs​ 表示点集 sss 连通的方案数，剩下的跟上题基本一样，这里不一一赘述 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;//MoBannamespace MoBan&#123;//Typetypedef long long ll;typedef double db;typedef long double ld;typedef unsigned long long Ull;typedef unsigned int uii;typedef const int csi;// Pairtypedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;#define fi first#define se second//Vectortypedef vector&lt;int&gt; vi;typedef vector&lt;pii&gt; vii;typedef vector&lt;pll&gt; vll;typedef vector&lt;pli&gt; vli;typedef vector&lt;pil&gt; vil;#define pb push_back//Maptypedef map&lt;int,int&gt; mii;typedef map&lt;ll,int&gt; mli;typedef map&lt;int,bool&gt; mbi;//Settypedef set&lt;int&gt; si;typedef set&lt;pii&gt; sii;typedef set&lt;pli&gt; sli;typedef set&lt;pil&gt; sil;typedef set&lt;pll&gt; sll;#define ins insert#define del eraseconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)//Inputinline int read()&#123; bool f=1; int ans=0; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;//Fileinline void file()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif&#125;//Functionstemplate&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;&#125;using namespace MoBan;//Modularnamespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(csi&amp;a)&#123;return ksm(a,mod-2);&#125; inline int fix(csi&amp;a)&#123;return (a%mod+mod)%mod;&#125;&#125;using namespace modular;//My solconst int N=15;int n,m,f[1&lt;&lt;11],g[1&lt;&lt;11],cnt[1&lt;&lt;11],tot[1&lt;&lt;11],pw[15*15],res[1&lt;&lt;11],h[1&lt;&lt;11][1&lt;&lt;11];inline void init()&#123; pw[0]=1; for(ri i=1;i&lt;144;++i)pw[i]=add(pw[i-1],pw[i-1]); for(ri s=1;s&lt;pw[11];++s)cnt[s]=cnt[s&gt;&gt;1]+(s&amp;1);&#125;inline int lowbit(int x)&#123;return x&amp;-x;&#125;inline void init_f()&#123; f[0]=1; for(ri s=1;s&lt;pw[n];++s)&#123; g[s]=0; for(ri ns=s^lowbit(s),nt=ns;nt;nt=(nt-1)&amp;ns)Add(g[s],mul(f[s^nt],pw[tot[nt]])); f[s]=dec(pw[tot[s]],g[s]); &#125;&#125;inline int Connect(int s,int t)&#123;return dec(tot[s|t],add(tot[s],tot[t]));&#125;inline void init_h()&#123; for(ri s=0;s&lt;pw[n];++s)h[0][s]=1; for(ri s=1;s&lt;pw[n];++s)for(ri t=(pw[n]-1)^s,S=t;t;t=(t-1)&amp;S)&#123; h[s][t]=0; for(ri ns=s^lowbit(s),nt=ns;;nt=(nt-1)&amp;ns)&#123; Add(h[s][t],mul(mul(h[nt][t],f[s^nt]),Connect(s^nt,t))); if(!nt)break; &#125; &#125;&#125;//Mainint main()&#123; file(); init(); for(ri tt=read();tt;--tt)&#123; n=read(),m=read(); for(ri i=1;i&lt;pw[n];++i)tot[i]=cnt[i]*(cnt[i]-1)/2; for(ri i=1,u,v;i&lt;=m;++i)&#123; u=read()-1,v=read()-1; for(ri s=(pw[n]-1)^pw[u]^pw[v],t=s;;t=(t-1)&amp;s)&#123; --tot[t^pw[u]^pw[v]]; if(!t)break; &#125; &#125; init_f(); init_h(); for(ri s=0;s&lt;pw[n];++s)&#123; res[s]=f[s]; for(ri ns=s^lowbit(s),nt=ns;nt;nt=(nt-1)&amp;ns) Dec(res[s],mul(h[nt][s^nt],res[s^nt])); &#125; cout&lt;&lt;res[pw[n]-1]&lt;&lt;'\\n'; &#125; return 0;&#125; 集合选数 解题思路： 把题目上的限制拎出来建一个图发现是由若干网格图拼接起来的，且对于每个不被 2,32,32,3 整除的数一定作为一个网格图的左上角，每个矩阵行数约为 log⁡2n\\log_2 nlog2​n ，列数约为 log⁡3n\\log_3 nlog3​n ，这样把列状压起来转移即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std; //MoBannamespace MoBan&#123;//Typetypedef long long ll;typedef double db;typedef long double ld;typedef unsigned long long Ull;typedef unsigned int uii;typedef const int csi; // Pairtypedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;#define fi first#define se second //Vectortypedef vector&lt;int&gt; vi;typedef vector&lt;pii&gt; vii;typedef vector&lt;pll&gt; vll;typedef vector&lt;pli&gt; vli;typedef vector&lt;pil&gt; vil;#define pb push_back //Maptypedef map&lt;int,int&gt; mii;typedef map&lt;ll,int&gt; mli;typedef map&lt;int,bool&gt; mbi; //Settypedef set&lt;int&gt; si;typedef set&lt;pii&gt; sii;typedef set&lt;pli&gt; sli;typedef set&lt;pil&gt; sil;typedef set&lt;pll&gt; sll;#define ins insert#define del erase const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++) //Inputinline int read()&#123; bool f=1; int ans=0; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125; //Fileinline void file()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif&#125; //Functionstemplate&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;&#125;using namespace MoBan; //Modularnamespace modular&#123; const int mod=1e9+1; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(csi&amp;a)&#123;return ksm(a,mod-2);&#125; inline int fix(csi&amp;a)&#123;return (a%mod+mod)%mod;&#125;&#125;using namespace modular; //My solconst int N=1&lt;&lt;12;int f[2][N],n,cur;bool trans[N];inline int calc(int x)&#123; memset(f,0,sizeof(f)); vector&lt;int&gt;cnt; for(ri i=x,_cnt;i&lt;=n;i&lt;&lt;=1)&#123; _cnt=0; for(ri j=i;j&lt;=n;j*=3)++_cnt; cnt.pb(_cnt); &#125; cur=0; for(ri i=0,up=1&lt;&lt;cnt[0];i&lt;up;++i)f[cur][i]=trans[i]; for(ri i=1;i&lt;cnt.size();++i)&#123; cur^=1; for(ri t=0,_up=1&lt;&lt;cnt[i];t&lt;_up;++t)f[cur][t]=0; for(ri s=0,up=1&lt;&lt;cnt[i-1];s&lt;up;++s)if(f[cur^1][s]) for(ri t=0,_up=1&lt;&lt;cnt[i];t&lt;_up;++t)if(trans[t]&amp;&amp;(!(s&amp;t))) Add(f[cur][t],f[cur^1][s]); &#125; int res=0; for(ri i=0,up=1&lt;&lt;(cnt.back());i&lt;up;++i)Add(res,f[cur][i]); return res;&#125; //Mainint main()&#123; file(); n=read(); for(ri i=0;i&lt;(1&lt;&lt;12);++i)trans[i]=(i&lt;&lt;1)&amp;i?0:1; int res=1; for(ri i=1;i&lt;=n;++i)&#123; if(i==i/2*2||i==i/3*3)continue; Mul(res,calc(i)); &#125; cout&lt;&lt;res; return 0;&#125; 进攻！ 解题思路： 考虑一个矩形被计算的次数等于其 2×22\\times 22×2 的子矩形数+ 1×11\\times 11×1 的子矩形数- 1×21\\times 21×2 的子矩形数- 2×12\\times 12×1 的子矩形数，那么分别统计每个小矩形被计算的次数。 有一个比较显然的方法是枚举每个空白矩形然后差分，然而也可以直接对于每个点处理出其在差分数组中的值然后直接前缀和，这个用单调栈即可搞定，不会的可以看看这道题 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(bool*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch^48,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;const int N=2005;bool s[N][N];int n,m,K,stk[N],top=0,ht[N][N],a[N][N];int cnt1[N][N],cnt2[N][N],cnt3[N][N],cnt4[N][N],ss[N][N];//cnt3:×óÉÏ½Ç//cnt4:×óÏÂ½Ç//cnt1:ÓÒÏÂ½Ç//cnt2:ÓÒÉÏ½Ç void init(int cnt[][N],bool f1,bool f2)&#123; for(ri i=1;i&lt;=n;++i)&#123; top=0; for(ri j=1;j&lt;=m;++j)&#123; ht[i][j]=s[i][j]?ht[i-1][j]+1:0; while(top&amp;&amp;ht[i][stk[top]]&gt;ht[i][j])--top; cnt[i][j]=cnt[i][stk[top]]+ht[i][j]*(j-stk[top]); stk[++top]=j; &#125; &#125; if(f1)for(ri i=1;i+i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)swap(cnt[i][j],cnt[n-i+1][j]); if(f2)for(ri i=1;i&lt;=n;++i)for(ri j=1;j+j&lt;=m;++j)swap(cnt[i][j],cnt[i][m-j+1]);&#125;inline int solve()&#123; int res=0; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; a[i][j]=add(dec(a[i][j],a[i-1][j-1]),add(a[i-1][j],a[i][j-1])); Add(res,ksm(a[i][j],K)); &#125; return res;&#125;inline void clear()&#123;for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)a[i][j]=0;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),K=read(); for(ri i=1;i&lt;=n;++i)Read(s[i]); init(cnt1,0,0); for(ri i=1;i+i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)swap(s[i][j],s[n-i+1][j]); init(cnt2,1,0); for(ri i=1;i&lt;=n;++i)for(ri j=1;j+j&lt;=m;++j)swap(s[i][j],s[i][m-j+1]); init(cnt3,1,1); for(ri i=1;i+i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)swap(s[i][j],s[n-i+1][j]); init(cnt4,0,1); int res=0; clear(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; Add(a[i][j],cnt3[i][j]); Dec(a[i+1][j],cnt4[i][j]); Add(a[i+1][j+1],cnt1[i][j]); Dec(a[i][j+1],cnt2[i][j]); &#125; Add(res,solve()); clear(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; Add(a[i][j],cnt3[i][j]); Dec(a[i+1][j],cnt4[i][j]); Add(a[i+1][j],cnt1[i][j]); Dec(a[i][j],cnt2[i][j]); &#125; Dec(res,solve()); clear(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; Add(a[i][j],cnt3[i][j]); Dec(a[i][j],cnt4[i][j]); Add(a[i][j+1],cnt1[i][j]); Dec(a[i][j+1],cnt2[i][j]); &#125; Dec(res,solve()); clear(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; Add(a[i][j],cnt3[i][j]); Dec(a[i][j],cnt4[i][j]); Add(a[i][j],cnt1[i][j]); Dec(a[i][j],cnt2[i][j]); &#125; Add(res,solve()); cout&lt;&lt;res; return 0;&#125; Permuted Matrices 解题思路： 考虑只有一行的时候咋做，考虑把整个序列分成 ⌊nk⌋\\lfloor\\frac{n}{k}\\rfloor⌊kn​⌋ 段，设 fif_ifi​ 表示前 iii 段带容斥系数的答案，然后枚举最后 jjj 段可以强制合并成一段转移即可，即 fi=∑j=1ifi−jCikjkf_{i}=\\sum\\limits_{j=1}^if_{i-j}C_{ik}^{jk}fi​=j=1∑i​fi−j​Cikjk​ ，加上行的限制就是把后面的组合数给行数次方，然后变个形就能上多项式搞 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;#define fi first#define se second#define pb push_backconst int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)namespace modular&#123; const int mod=1000000123; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=50005;int fac[N],ifac[N],f[N],n,pre[N];inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=n;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=n;++i)Mul(ifac[i],ifac[i-1]); for(ri i=1;i&lt;=n;++i)&#123; fac[i]=ksm(fac[i],n); ifac[i]=ksm(ifac[i],n); &#125;&#125;inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;vector&lt;int&gt;a;inline int solve()&#123; f[0]=1; for(ri ss,pre=0,i=1;i&lt;a.size();++i)&#123; pre+=a[i]; f[i]=0; ss=0; for(ri j=i-1;~j;--j)&#123; ss+=a[j+1]; if((i-j)&amp;1)Add(f[i],mul(f[j],C(pre,ss))); else Dec(f[i],mul(f[j],C(pre,ss))); &#125; &#125; return f[a.size()-1];&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=50000; init(); int res=0; for(ri i=1;i&lt;=n;++i)&#123; a.resize(1); for(ri j=n;j;j-=a.back())a.pb(min(i,j)); Add(res,solve()); &#125; cout&lt;&lt;res; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round6","slug":"sol6","date":"2019-11-07T08:41:52.000Z","updated":"2019-12-26T04:26:31.458Z","comments":true,"path":"sol6/","link":"","permalink":"http://ldxcaicai.github.io/sol6/","excerpt":"","text":"随机数生成器 解题思路： 看了一下网上的解法大概是 O(nX)O(nX)O(nX) 的？其实有个 O(n2)O(n^2)O(n2) 的在这里讲一下吧 考虑用 min−maxmin-maxmin−max 容斥转化为求所有子集询问到的位置的最小值的期望，这样答案只跟所有询问覆盖的长度有关，首先考虑 nnn 个 [1,x][1,x][1,x] 间随机整数的期望最小值怎么求，考虑枚举最小值是多少以及有哪些位置是最小值然后进行变形即可，下面推一波式子： Emin=∑i=1xi∑j=1nCnj(x−i)n−jxn=∑i=1xi((x−i+1)n−(x−i)n)xn=∑i=1xinxn\\begin{aligned} E_{min}=&amp;\\frac{\\sum\\limits_{i=1}^xi\\sum\\limits_{j=1}^nC_n^j(x-i)^{n-j}}{x^n}\\\\ =&amp;\\frac{\\sum\\limits_{i=1}^xi((x-i+1)^n-(x-i)^n)}{x^n}\\\\ =&amp;\\frac{\\sum\\limits_{i=1}^xi^n}{x^n} \\end{aligned} Emin​===​xni=1∑x​ij=1∑n​Cnj​(x−i)n−j​xni=1∑x​i((x−i+1)n−(x−i)n)​xni=1∑x​in​​ 上式利用拉格朗日插值可以 O(n2)O(n^2)O(n2) 预处理，但由于该题的 xxx 范围跟 nnn 同阶因此代码里直接算的 那么现在只用考虑所有询问的子集对长度个数的贡献，因此考虑如下 dpdpdp ： 将所有的询问按左端点单增排序，设 fi,jf_{i,j}fi,j​ 表示当前覆盖长度为 iii ，之前被选中的询问覆盖到的最远点为 jjj 的带容斥系数方案数 假设当前询问区间为 [l,r][l,r][l,r] ，长度为 lenlenlen ，这样对于所有状态有如下三种转移： fi+len,r←(−1)fi,j&lt;lf_{i+len,r}\\leftarrow(-1)f_{i,j&lt;l}fi+len,r​←(−1)fi,j&lt;l​ ，维护一个行前缀和可以很快求 fi+r−j,r←(−1)fi,l≤j&lt;rf_{i+r-j,r}\\leftarrow(-1)f_{i,l\\le j&lt;r}fi+r−j,r​←(−1)fi,l≤j&lt;r​ ,维护一个对角线前缀和可以很快求 fi,j←(−1)fi,jf_{i,j}\\leftarrow(-1)f_{i,j}fi,j​←(−1)fi,j​ ，要求支持一个区间清零？？？ 经过讨论发现可以用线段树优化 dpdpdp ，复杂度为 O(n2log⁡n)O(n^2\\log n)O(n2logn) ，能过但复杂度貌似不太优秀 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174#include&lt;bits/stdc++.h&gt;#include&lt;tr1/unordered_map&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef tr1::unordered_map&lt;ll,int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch)&amp;&amp;ch!='?')ch=gc(); while(isdigit(ch)||ch=='?')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=666623333; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=2005;int cnt=0,f[N][N],g[N],n,q,x;inline void init()&#123; static int pw[N]; for(ri i=1;i&lt;=x;++i)pw[i]=1; for(ri i=0,res,iv=Inv(x),mt=1;i&lt;=n;++i,Mul(mt,iv))&#123; res=0; for(ri j=1;j&lt;=x;++j)&#123; Add(res,pw[j]); Mul(pw[j],j); &#125; g[i]=mul(res,mt); &#125;&#125;pii a[N];inline void check()&#123; static bool vs[N]; static int ans[N]; for(ri s=0,up=1&lt;&lt;q;s&lt;up;++s)&#123; int ct1=0,ct2=0; for(ri i=1;i&lt;=q;++i)&#123; if(s&gt;&gt;(i-1)&amp;1)&#123; ++ct1; for(ri j=a[i].fi;j&lt;=a[i].se;++j)vs[j]=1; &#125; &#125; for(ri i=1;i&lt;=n;++i)&#123; if(vs[i])++ct2; vs[i]=0; &#125; ct1&amp;1?Dec(ans[ct2],1):Add(ans[ct2],1); &#125; int res=0; for(ri i=1;i&lt;=n;++i)cerr&lt;&lt;ans[i]&lt;&lt;' '; for(ri i=1;i&lt;=n;++i)Add(res,mul(ans[i],g[i])); q&amp;1?res=dec(0,res):0; puts(\"\"); cerr&lt;&lt;res&lt;&lt;'\\n';&#125;struct sgt&#123; #define lc (p&lt;&lt;1) #define rc (p&lt;&lt;1|1) #define mid (l+r&gt;&gt;1) int ss[N&lt;&lt;2]; bool cle[N&lt;&lt;2]; inline void pushnow(int p)&#123; ss[p]=0; cle[p]=1; &#125; inline void pushdown(int p)&#123; if(cle[p])&#123; pushnow(lc); pushnow(rc); cle[p]=0; &#125; &#125; inline void pushup(int p)&#123;ss[p]=add(ss[lc],ss[rc]);&#125; inline void update(int p,int l,int r,int k,int v)&#123; if(l==r)&#123; Add(ss[p],v); return; &#125; pushdown(p); k&lt;=mid?update(lc,l,mid,k,v):update(rc,mid+1,r,k,v); pushup(p); &#125; inline void modify(int p,int l,int r,int ql,int qr)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return pushnow(p); pushdown(p); if(qr&lt;=mid)modify(lc,l,mid,ql,qr); else if(ql&gt;mid)modify(rc,mid+1,r,ql,qr); else modify(lc,l,mid,ql,qr),modify(rc,mid+1,r,ql,qr); pushup(p); &#125; inline int query(int p,int l,int r,int ql,int qr)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return ss[p]; pushdown(p); if(qr&lt;=mid)return query(lc,l,mid,ql,qr); if(ql&gt;mid)return query(rc,mid+1,r,ql,qr); return add(query(lc,l,mid,ql,qr),query(rc,mid+1,r,ql,qr)); &#125; #undef lc #undef rc #undef mid&#125;s1[N],s2[N];inline void update(int a,int b,int vl)&#123; if(!vl)return; s1[a].update(1,0,n,b,vl); s2[b-a].update(1,0,n,a,vl);&#125;int sig=0;inline bool cmp(pii a,pii b)&#123;return a.fi^b.fi?a.fi&gt;b.fi:a.se&lt;b.se;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),x=read(),q=read(); init(); for(ri i=1;i&lt;=q;++i)a[i].fi=read(),a[i].se=read(); sort(a+1,a+q+1,cmp); int mnr=0x3f3f3f3f; for(ri i=1;i&lt;=q;++i)&#123; if(mnr&gt;a[i].se)&#123; mnr=a[i].se; a[++sig]=a[i]; &#125; &#125; q=sig; sort(a+1,a+q+1); update(0,0,mod-1); for(ri i=1,l,r,len;i&lt;=q;++i)&#123; l=a[i].fi,r=a[i].se,len=r-l+1; for(ri j=0;j+len&lt;=n&amp;&amp;j&lt;l;++j)update(j+len,r,dec(0,s1[j].query(1,0,n,0,l-1))); if(l&lt;r)for(ri j=1;j&lt;r;++j)update(j+1,r,dec(0,s2[r-j-1].query(1,0,n,max(j+l-r+1,1),j))); &#125; int res=0; for(ri i=1;i&lt;=n;++i)Add(res,mul(g[i],s1[i].query(1,0,n,0,n))); cout&lt;&lt;res; return 0;&#125; 考虑继续优化 经过观察发现如果一个大区间包含了一个小区间，那么大区间可以舍掉，因为最终答案一定在小区间中，于是在进行掉这一步处理之后所有询问区间的左右端点都是单增的，也就是说对于第三种转移后面的 fi,jf_{i,j}fi,j​ 本来就是 000 ，那么只用维护行前缀和和对角线前缀和即可，复杂度为 O(qlog⁡q+n2)O(q\\log q+n^2)O(qlogq+n2) ，可以加强到 n≤5000,x≤1e9,q≤1e6n\\le5000,x\\le 1e9,q\\le1e6n≤5000,x≤1e9,q≤1e6 了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121#include&lt;bits/stdc++.h&gt;#include&lt;tr1/unordered_map&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef tr1::unordered_map&lt;ll,int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch)&amp;&amp;ch!='?')ch=gc(); while(isdigit(ch)||ch=='?')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=666623333; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=2005;int cnt=0,f[N][N],g[N],n,q,x;inline void init()&#123; static int pw[N]; for(ri i=1;i&lt;=x;++i)pw[i]=1; for(ri i=0,res,iv=Inv(x),mt=1;i&lt;=n;++i,Mul(mt,iv))&#123; res=0; for(ri j=1;j&lt;=x;++j)&#123; Add(res,pw[j]); Mul(pw[j],j); &#125; g[i]=mul(res,mt); &#125;&#125;pii a[N];int s1[N][N],s2[N][N];int sig=0;inline bool cmp(pii a,pii b)&#123;return a.fi^b.fi?a.fi&gt;b.fi:a.se&lt;b.se;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),x=read(),q=read(); init(); for(ri i=1;i&lt;=q;++i)a[i].fi=read(),a[i].se=read(); sort(a+1,a+q+1,cmp); int mnr=0x3f3f3f3f; for(ri i=1;i&lt;=q;++i)&#123; if(mnr&gt;a[i].se)&#123; mnr=a[i].se; a[++sig]=a[i]; &#125; &#125; q=sig; sort(a+1,a+q+1); s1[0][0]=s2[0][0]=f[0][0]=mod-1; int prer=0; for(ri i=1,prer=0,l,r,len;i&lt;=q;++i)&#123; l=a[i].fi,r=a[i].se,len=r-l+1; while(prer&lt;r-1)&#123; ++prer; for(ri j=0;j&lt;=prer;++j)&#123; s1[j][prer]=add(s1[j][prer-1],f[j][prer]); s2[prer-j][j]=add(j?s2[prer-j][j-1]:0,f[j][prer]); &#125; &#125; for(ri t,j=0;j+len&lt;=n&amp;&amp;j&lt;l;++j)&#123; t=s1[j][l-1]; if(t)Add(f[j+len][r],mod-t); &#125; if(l&lt;r)for(ri t,j=1;j&lt;r;++j)&#123; t=dec(s2[r-j-1][j],s2[r-j-1][max(j+l-r,0)]); if(t)Add(f[j+1][r],mod-t); &#125; &#125; while(prer&lt;n)&#123; ++prer; for(ri i=0;i&lt;=prer;++i)&#123; s1[i][prer]=add(s1[i][prer-1],f[i][prer]); s2[prer-i][i]=add(i?s2[prer-i][i-1]:0,f[i][prer]); &#125; &#125; int res=0; for(ri i=1;i&lt;=n;++i)Add(res,mul(g[i],s1[i][n])); cout&lt;&lt;res; return 0;&#125; 地震后的幻想乡 解题思路： 看到全排列就想到状压连通块子集 dpdpdp ，设 fs,if_{s,i}fs,i​ 表示当前连通块为 sss ，用了 iii 条边使得其连通的方案数， gs,ig_{s,i}gs,i​ 表示其不连通的方案数，补集转化转移最后统计答案即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef double db;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch)&amp;&amp;ch!='?')ch=gc(); while(isdigit(ch)||ch=='?')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=666623333; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;db f[1&lt;&lt;10][46],g[1&lt;&lt;10][46],C[46][46];int n,m,all,cnt[1&lt;&lt;10],pw[11];inline void init()&#123; pw[0]=1; for(ri i=1;i&lt;=n;++i)pw[i]=pw[i-1]+pw[i-1]; for(ri i=0;i&lt;=m;++i)&#123; C[i][0]=1; for(ri j=1;j&lt;=i;++j)C[i][j]=C[i-1][j-1]+C[i-1][j]; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); init(); all=pw[n]-1; for(ri i=1,a,b;i&lt;=m;++i)&#123; a=read()-1,b=read()-1; for(ri s=all^pw[a]^pw[b],t=s;;t=(t-1)&amp;s)&#123; ++cnt[t^pw[a]^pw[b]]; if(!t)break; &#125; &#125; for(ri s=0;s&lt;=all;++s)&#123; for(ri i=0;i&lt;=cnt[s];++i)&#123; for(ri ts=s^(s&amp;-s),t=ts;t;t=(t-1)&amp;ts)&#123; for(ri j=0,up=min(cnt[t],i);j&lt;=up;++j) g[s][i]+=C[cnt[t]][j]*f[s^t][i-j]; &#125; f[s][i]=C[cnt[s]][i]-g[s][i]; &#125; &#125; db res=0; for(ri i=0;i&lt;=m;++i)res+=g[all][i]/C[m][i]; res/=m+1; printf(\"%.6lf\",res); return 0;&#125; Hero meet devil 解题思路： [TJOI2018][TJOI2018][TJOI2018] 某题的原型吧，设 fi,jf_{i,j}fi,j​ 表示当前枚举到构造串的第 iii 位，对于模板串的 LCSLCSLCS 状态为 jjj 的方案数，然后直接转移就行了 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef double db;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;char str[20];int n,f[2][1&lt;&lt;15|5],cur,all,pw[16],cnt[1&lt;&lt;15|5],ans[20],m,a[20],b[20],trans[1&lt;&lt;15|5][4];inline void init()&#123; pw[0]=1; for(ri i=1;i&lt;=15;++i)pw[i]=pw[i-1]+pw[i-1]; for(ri i=1;i&lt;pw[15];++i)cnt[i]=cnt[i&gt;&gt;1]+(i&amp;1);&#125;char cmp[4]=&#123;'A','T','C','G'&#125;;inline void Init()&#123; for(ri s=0;s&lt;=all;++s)&#123; for(ri ns,op=0;op&lt;4;++op)&#123; for(ri j=1;j&lt;=m;++j)&#123; a[j]=(s&gt;&gt;(j-1)&amp;1)+a[j-1]; b[j]=max(max(a[j],b[j-1]),a[j-1]+(str[j]==cmp[op])); &#125; ns=0; for(ri j=1;j&lt;=m;++j)ns|=(b[j]-b[j-1])&lt;&lt;(j-1); trans[s][op]=ns; &#125; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init(); for(ri tt=read();tt;--tt)&#123; m=Read(str); for(ri i=1;i&lt;=m;++i)ans[i]=0; n=read(),all=pw[m]-1; f[cur=0][0]=1; Init(); for(ri i=1;i&lt;=all;++i)f[cur][i]=0; for(ri i=1;i&lt;=n;++i)&#123; cur^=1; for(ri s=0;s&lt;=all;++s)f[cur][s]=0; for(ri s=0;s&lt;=all;++s)if(f[cur^1][s])for(ri op=0;op&lt;4;++op) Add(f[cur][trans[s][op]],f[cur^1][s]); &#125; for(ri i=0;i&lt;=all;++i)Add(ans[cnt[i]],f[cur][i]); for(ri i=0;i&lt;=m;++i)cout&lt;&lt;ans[i]&lt;&lt;'\\n'; &#125; return 0;&#125; 购票 解题思路： 有一眼的状态转移式和限制条件，放在序列上面的话直接斜率优化即可，现在放在树上就需要用 cdqcdqcdq 分治的思想先更新祖先，那么每次选当前树的重心然后将其儿子抠掉递归处理剩余部分，然后用剩余部分更新抠掉的部分，然后递归抠掉的部分即可 口胡：貌似也可以利用 dfsdfsdfs 序搞四维偏序，但没实现不知道正确性 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef double db;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef pair&lt;ll,ll&gt; pll;typedef unsigned long long Ull;typedef unsigned int uii;typedef double db;typedef long double ld;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=2e5+5;int n,typ,siz[N],fa[N],all,msz,rt;bool vs[N];vector&lt;int&gt;e[N];ll dis[N],p[N],q[N],lm[N],f[N];void getroot(int p)&#123; siz[p]=1; int ms=0; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if(vs[v=e[p][i]])continue; getroot(v); siz[p]+=siz[v]; ckmax(ms,siz[v]); &#125; ckmax(ms,all-siz[p]); if(msz&gt;ms&amp;&amp;siz[p]!=1)msz=ms,rt=p;&#125;pll a1[N],a2[N];int top1,top2;void get(int p)&#123; a2[++top2]=pll(dis[p]-lm[p],p); for(ri i=0,v;i&lt;e[p].size();++i)if(!vs[v=e[p][i]])get(v);&#125;inline ll calc(int x,pll y)&#123;return y.se+q[x]+(dis[x]-y.fi)*p[x];&#125;const ld inf=1e499;const ll inff=1e18;inline ld slope(pll a,pll b)&#123;return a.fi==b.fi?inf:(ld)(a.se-b.se)/(ld)(a.fi-b.fi);&#125;void dfs(int p,int sz)&#123; if(sz==1)return; all=msz=sz,rt=p; getroot(p); int cur=rt,x; for(ri i=0;i&lt;e[cur].size();++i)vs[e[cur][i]]=1; dfs(p,sz-siz[cur]+1); top2=0; for(ri i=0;i&lt;e[cur].size();++i)get(e[cur][i]); sort(a2+1,a2+top2+1); x=cur; a1[top1=0]=pll(0ll,inff); pll tmp; for(ri i=top2;i;--i)&#123; while(x!=fa[p]&amp;&amp;dis[x]&gt;=a2[i].fi)&#123; tmp=pll(dis[x],f[x]); while(top1&gt;1&amp;&amp;slope(tmp,a1[top1-1])&gt;=slope(a1[top1],a1[top1-1]))--top1; a1[++top1]=tmp; x=fa[x]; &#125; if(top1)&#123; int l=1,r=top1,res=1; while(l&lt;=r)&#123; int mid=l+r&gt;&gt;1; if(calc(a2[i].se,a1[mid])&lt;=calc(a2[i].se,a1[mid-1]))res=mid,l=mid+1; else r=mid-1; &#125; ckmin(f[a2[i].se],calc(a2[i].se,a1[res])); &#125; &#125; for(ri i=0,v;i&lt;e[cur].size();++i)dfs(e[cur][i],siz[e[cur][i]]);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); freopen(\"lx.out\",\"w\",stdout); #endif n=read(),typ=read(); for(ri i=2;i&lt;=n;++i)&#123; fa[i]=read(); dis[i]=dis[fa[i]]+readl(); e[fa[i]].pb(i); p[i]=readl(); q[i]=readl(); lm[i]=readl(); &#125; for(ri i=2;i&lt;=n;++i)f[i]=inff; dfs(1,n); for(ri i=2;i&lt;=n;++i)cout&lt;&lt;f[i]&lt;&lt;'\\n'; return 0;&#125; 随机游走 解题思路： 考虑设 fs,if_{s,i}fs,i​ 表示从 iii 出发走完集合 sss 的期望步数，发现对于 i∈si\\in si∈s ，可以从 sss 的子集转移，否则就与儿子和父亲有一个带环的转移，这样从小到大枚举 sss 再利用树上消元的思想就能用 O(2nnlog⁡)O(2^nn\\log)O(2nnlog) 预处理出答案（ log⁡\\loglog 是快速幂求逆元） CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef double db;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch)&amp;&amp;ch!='?')ch=gc(); while(isdigit(ch)||ch=='?')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=19;int n,q,x,f[1&lt;&lt;18][19],pw[19],all,inv[19];vector&lt;int&gt;e[N];int que[N],hd,tl,fa[N];struct coef&#123; int a,b; coef(int a=0,int b=0):a(a),b(b)&#123;&#125;&#125;g[19];inline void init()&#123; pw[0]=1; for(ri i=1;i&lt;=n;++i)pw[i]=pw[i-1]+pw[i-1]; all=pw[n]-1; inv[1]=1; for(ri i=2;i&lt;=n;++i)inv[i]=mul(inv[mod-mod/i*i],mod-mod/i);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),q=read(),x=read(); init(); for(ri u,v,i=1;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v); e[v].pb(u); &#125; que[hd=tl=1]=1; while(hd&lt;=tl)&#123; int x=que[hd++]; for(ri i=0,v;i&lt;e[x].size();++i)&#123; if((v=e[x][i])==fa[x])continue; fa[v]=x,que[++tl]=v; &#125; &#125; for(ri s=0;s&lt;=all;++s)&#123; for(ri p,t,i=n;i;--i)&#123; p=que[i]; if(s==pw[p-1])g[p]=coef(0,0); else if(s&amp;pw[p-1])&#123; g[p]=coef(0,0); for(ri j=0;j&lt;e[p].size();++j)Add(g[p].b,f[s^pw[p-1]][e[p][j]]+1); Mul(g[p].b,inv[e[p].size()]); &#125; else&#123; g[p].a=inv[e[p].size()]; g[p].b=0; t=0; for(ri j=0,v;j&lt;e[p].size();++j)if((v=e[p][j])!=fa[p])&#123; Add(g[p].b,g[v].b); Add(t,g[v].a); &#125; Mul(g[p].b,inv[e[p].size()]); Mul(t,inv[e[p].size()]); Add(g[p].b,1); t=dec(1,t); Mul(g[p].a,Inv(t)); Mul(g[p].b,Inv(t)); &#125; &#125; for(ri p,i=1;i&lt;=n;++i)&#123; p=que[i]; f[s][p]=add(mul(g[p].a,f[s][fa[p]]),g[p].b); &#125; &#125; while(q--)&#123; int k=read(),s=0; while(k--)s^=pw[read()-1]; cout&lt;&lt;f[s][x]&lt;&lt;'\\n'; &#125; return 0;&#125; 随机算法 解题思路： 貌似我写的 O(n2n)O(n2^n)O(n2n) 被 cyktxdycyktxdycyktxdy 的 O(n22n)O(n^22^n)O(n22n) 吊着打，被喷惨了=_= 设 fsf_{s}fs​ 表示集合 sss 的答案， gsg_sgs​ 表示集合 sss 的最大独立集大小，那么我们观察 sss 中哪些点在最大独立集中，把它们和它们相邻的点删点从子集转移过来即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef double db;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch)&amp;&amp;ch!='?')ch=gc(); while(isdigit(ch)||ch=='?')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;int m,trans[21],f[1&lt;&lt;20],n,pw[21],all,g[1&lt;&lt;20],inv[21];inline void init()&#123; pw[0]=1; for(ri i=1;i&lt;=n;++i)pw[i]=pw[i-1]+pw[i-1]; all=pw[n]-1; inv[1]=1; for(ri i=2;i&lt;=n;++i)inv[i]=mul(inv[mod-mod/i*i],mod-mod/i);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); init(); for(ri i=1,u,v;i&lt;=m;++i)&#123; u=read()-1,v=read()-1; trans[u]|=pw[v]; trans[v]|=pw[u]; &#125; for(ri s=f[0]=1,ct;s&lt;=all;++s)&#123; ct=0; for(ri t,i=0;i&lt;n;++i)if(s&amp;pw[i])&#123; t=(s&amp;(~trans[i]))^pw[i]; ++ct; if(g[t]+1==g[s])Add(f[s],f[t]); else if(g[t]+1&gt;g[s])g[s]=g[t]+1,f[s]=f[t]; &#125; Mul(f[s],inv[ct]); &#125; cout&lt;&lt;f[all]; return 0;&#125; Slay the Spire 解题思路： 易得一个性质：最多选一张攻击牌 在知道这个性质之后直接枚举选出来攻击牌的数量然后左右的贡献可以 dpdpdp 预处理出来，组合数学算就完了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef double db;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch)&amp;&amp;ch!='?')ch=gc(); while(isdigit(ch)||ch=='?')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=3005;int n,m,K,fac[N],ifac[N],a1[N],a2[N],f1[N][N],f2[N][N];inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=3000;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=3000;++i)Mul(ifac[i],ifac[i-1]);&#125;inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;inline int calc1(int x,int ps)&#123; if(x&gt;n)return 0; int res=0; for(ri i=x-ps+1;i&lt;=n;++i)Add(res,mul(C(i-1,x-ps),dec(f1[i][ps],f1[i+1][ps]))); return res;&#125;inline int calc2(int x,int ps)&#123; if(!ps)return C(n,x); if(x&gt;n)return 0; int res=0; for(ri i=x-ps+1;i&lt;=n;++i)Add(res,mul(C(i-1,x-ps),dec(f2[i][ps],f2[i+1][ps]))); return res;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init(); for(ri tt=read();tt;--tt)&#123; n=read(),m=read(),K=read(); for(ri i=1;i&lt;=n;++i)a2[i]=read(); for(ri i=1;i&lt;=n;++i)a1[i]=read(); sort(a1+1,a1+n+1); sort(a2+1,a2+n+1); for(ri i=1;i&lt;=n+1;++i)for(ri j=0;j&lt;=n+1;++j)f1[i][j]=f2[i][j]=0; for(ri i=n;i;--i)for(ri j=1;j&lt;=n-i+1;++j) f1[i][j]=add(add(f1[i+1][j],f1[i+1][j-1]),mul(C(n-i,j-1),a1[i])); f2[n+1][0]=1; for(ri i=n;i;--i)for(ri j=0;j&lt;=n-i+1;++j) f2[i][j]=add(f2[i+1][j],mul(a2[i],j?f2[i+1][j-1]:0)); int res=0; for(ri L,R,i=1,up=min(m,n);i&lt;=m;++i)&#123; if(m-i&gt;n)continue; R=min(K-1,m-i); L=K-R; Add(res,mul(calc1(i,L),calc2(m-i,R))); &#125; cout&lt;&lt;res&lt;&lt;'\\n'; &#125; return 0;&#125; 珍珠 解题思路： 考虑到每种数会出现奇数次或者偶数次，其中奇数次的最多有 n−2mn-2mn−2m 种，那么显然可以列出如下式子： Ans= n!∑i=0n−2mCDi(ex−e−x2)i(ex+e−x2)D−i[xn]\\begin{aligned} Ans=&amp;\\ n!\\sum\\limits_{i=0}^{n-2m}C_D^i(\\frac{e^x-e^{-x}}2)^i(\\frac{e^x+e^{-x}}2)^{D-i}[x^n] \\end{aligned} Ans=​ n!i=0∑n−2m​CDi​(2ex−e−x​)i(2ex+e−x​)D−i[xn]​ 但这样变形后并不好计算，于是考虑加一个函数对出现奇数次的生成函数进行限制： Ans= n!∑i=0n−2m(ex+e−x2+yex−e−x2)D[xn][yi]=n!2D∑i=0n−2m((1+y)ex+(1−y)e−x)D[xn][yi]=n!2D∑i=0n−2m∑j=0DCDj(1+y)j(1−j)D−je(2i−D)x[xn][yi]=n!2D∑i=0DCDi(2i−D)nn!∑j=0n−2m(1+y)i(1−y)D−i[yj]观察到(1+y)+(1−y)=2=12D∑i=0DCDi(2i−D)n∑j=0n−2m(2−(1−y))i(1−y)D−i[yj]=12D∑i=0DCDi(2i−D)n∑j=0n−2m∑k=0iCik2k(−1)i−k(1−y)D−k[yj]=12D∑i=0DCDi(2i−D)n∑j=0iCij2j(−1)i−j∑k=0n−2mCD−jk(−1)k\\begin{aligned} Ans=&amp;\\ n!\\sum\\limits_{i=0}^{n-2m}(\\frac{e^x+e^{-x}}2+y\\frac{e^x-e^{-x}}2)^D[x^n][y^i]\\\\ =&amp;\\frac{n!}{2^D}\\sum\\limits_{i=0}^{n-2m}((1+y)e^x+(1-y)e^{-x})^D[x^n][y^i]\\\\ =&amp;\\frac{n!}{2^D}\\sum\\limits_{i=0}^{n-2m}\\sum\\limits_{j=0}^DC_{D}^{j}(1+y)^j(1-j)^{D-j}e^{(2i-D)x}[x^n][y^i]\\\\ =&amp;\\frac{n!}{2^D}\\sum\\limits_{i=0}^DC_{D}^{i}\\frac{(2i-D)^n}{n!}\\sum\\limits_{j=0}^{n-2m}(1+y)^i(1-y)^{D-i}[y^j]\\\\ &amp;观察到(1+y)+(1-y)=2\\\\ =&amp;\\frac1{2^D}\\sum\\limits_{i=0}^DC_{D}^{i}(2i-D)^n\\sum\\limits_{j=0}^{n-2m}(2-(1-y))^i(1-y)^{D-i}[y^j]\\\\ =&amp;\\frac1{2^D}\\sum\\limits_{i=0}^DC_{D}^{i}(2i-D)^n\\sum\\limits_{j=0}^{n-2m}\\sum\\limits_{k=0}^iC_{i}^{k}2^k(-1)^{i-k}(1-y)^{D-k}[y^j]\\\\ =&amp;\\frac1{2^D}\\sum\\limits_{i=0}^DC_{D}^{i}(2i-D)^n\\sum\\limits_{j=0}^iC_{i}^{j}2^j(-1)^{i-j}\\sum\\limits_{k=0}^{n-2m}C_{D-j}^{k}(-1)^k\\\\ \\end{aligned} Ans=======​ n!i=0∑n−2m​(2ex+e−x​+y2ex−e−x​)D[xn][yi]2Dn!​i=0∑n−2m​((1+y)ex+(1−y)e−x)D[xn][yi]2Dn!​i=0∑n−2m​j=0∑D​CDj​(1+y)j(1−j)D−je(2i−D)x[xn][yi]2Dn!​i=0∑D​CDi​n!(2i−D)n​j=0∑n−2m​(1+y)i(1−y)D−i[yj]观察到(1+y)+(1−y)=22D1​i=0∑D​CDi​(2i−D)nj=0∑n−2m​(2−(1−y))i(1−y)D−i[yj]2D1​i=0∑D​CDi​(2i−D)nj=0∑n−2m​k=0∑i​Cik​2k(−1)i−k(1−y)D−k[yj]2D1​i=0∑D​CDi​(2i−D)nj=0∑i​Cij​2j(−1)i−jk=0∑n−2m​CD−jk​(−1)k​ 推导到这里已经有 60pts60pts60pts 了 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=4005;int n,m,D,C[N][N],pw[N],_s[N][N];inline void init()&#123; pw[0]=1; for(ri i=1;i&lt;=D;++i)pw[i]=add(pw[i-1],pw[i-1]); for(ri i=0;i&lt;=D;++i)&#123; C[i][0]=1; for(ri j=1;j&lt;=i;++j) C[i][j]=add(C[i-1][j-1],C[i-1][j]); &#125; for(ri i=0;i&lt;=D;++i)&#123; _s[i][0]=C[i][0]; for(ri j=1;j&lt;=i;++j) _s[i][j]=add(_s[i][j-1],j&amp;1?mod-C[i][j]:C[i][j]); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif D=read(),n=read(),m=read(); if(n&lt;2*m)return puts(\"0\"),0; init(); int res=0; for(ri c1,c2,i=0;i&lt;=D;++i)&#123; c1=mul(C[D][i],ksm(dec(2*i,D),n)); for(ri j=0;j&lt;=i;++j)&#123; c2=mul(pw[j],C[i][j]); if((i-j)&amp;1)c2=mod-c2; Add(res,mul(c1,mul(c2,_s[D-j][min(D-j,n-2*m)]))); &#125; &#125; cout&lt;&lt;mul(res,ksm(pw[D],mod-2)); return 0;&#125; 继续推导 然后经过简单推导容易发现，s(n,m)=∑i=0mCni(−1)i=(−1)mCi−1m (m≠0)s(n,m)=\\sum\\limits_{i=0}^mC_{n}^{i}(-1)^i=(-1)^mC_{i-1}^{m}\\ (m\\not=0)s(n,m)=i=0∑m​Cni​(−1)i=(−1)mCi−1m​ (m​=0) 令 fi=s(D−i,n−m∗2)f_i=s(D-i,n-m*2)fi​=s(D−i,n−m∗2) 原式变为： 12D∑i=0DCDi(2i−D)n∑j=0iCijfj2j(−1)i−j=12D∑i=0DCDi(2i−D)ni!∑j=0ifj2jj!(−1)i−j(i−j)!\\begin{aligned} &amp;\\frac1{2^D}\\sum\\limits_{i=0}^DC_{D}^{i}(2i-D)^n\\sum\\limits_{j=0}^iC_{i}^{j}f_j2^j(-1)^{i-j}\\\\ =&amp;\\frac1{2^D}\\sum\\limits_{i=0}^DC_{D}^{i}(2i-D)^ni!\\sum\\limits_{j=0}^i\\frac{f_j2^j}{j!}\\frac{(-1)^{i-j}}{(i-j)!}\\\\ \\end{aligned} =​2D1​i=0∑D​CDi​(2i−D)nj=0∑i​Cij​fj​2j(−1)i−j2D1​i=0∑D​CDi​(2i−D)ni!j=0∑i​j!fj​2j​(i−j)!(−1)i−j​​ 然后卷积处理出 gi=∑j=0ifj2jj!(−1)i−j(i−j)!g_i=\\sum\\limits_{j=0}^i\\frac{f_j2^j}{j!}\\frac{(-1)^{i-j}}{(i-j)!}gi​=j=0∑i​j!fj​2j​(i−j)!(−1)i−j​ 即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef vector&lt;int&gt; poly;typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125;&#125;using namespace modular;const int N=1e5+5;int n,m,D,fac[N],ifac[N],pw[N];inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1,pw[0]=1,pw[1]=2; for(ri i=2;i&lt;=D;++i)&#123; pw[i]=add(pw[i-1],pw[i-1]); fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=D;++i)Mul(ifac[i],ifac[i-1]);&#125;vector&lt;int&gt;rev[23];int invv[23],w[23];inline void init_ntt()&#123; invv[0]=1; for(ri iv=mod+1&gt;&gt;1,i=1;i&lt;23;++i) invv[i]=mul(invv[i-1],iv); w[22]=ksm(3,(mod-1)&gt;&gt;23); for(ri i=21;~i;--i)w[i]=mul(w[i+1],w[i+1]);&#125;int lim,tim;inline void init(int up)&#123; lim=1,tim=0; while(lim&lt;up)lim&lt;&lt;=1,++tim; if(rev[tim].size())return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i)rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,int type)&#123; for(ri i=0;i&lt;lim;++i)if(i&lt;rev[tim][i])swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1;i&lt;lim;i&lt;&lt;=1,++t)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0,mt=1;k&lt;i;++k,Mul(mt,w[t])) a0=a[j+k],a1=mul(a[j+k+i],mt),a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); if(~type)return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i)Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b)&#123; int n=a.size(),m=b.size(),t=n+m-1; if(t&lt;=64)&#123; poly c(t); for(ri i=0;i&lt;n;++i)for(ri j=0;j&lt;m;++j) Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i)Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;int f[N],g[N];inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif D=read(),n=read(),m=read(); if(n&lt;2*m)return puts(\"0\"),0; init(); init_ntt(); if(n==2*m)for(ri i=0;i&lt;=D;++i)f[i]=1; else&#123; if(n&amp;1)for(ri i=0;i&lt;=D;++i)f[i]=n-m*2&gt;=i?!i:add(dec(0,C(i-1,n-m*2)),i==1); else for(ri i=0;i&lt;=D;++i)f[i]=n-m*2&gt;=i?!i:add(C(i-1,n-m*2),i==1); &#125; poly a(D+1),b(D+1); for(ri i=0;i&lt;=D;++i)a[i]=mul(f[D-i],mul(pw[i],ifac[i])),b[i]=i&amp;1?dec(0,ifac[i]):ifac[i]; a=a*b; int res=0; for(ri i=0;i&lt;=D;++i)Add(res,mul(mul(C(D,i),ksm(dec(2*i,D),n)),mul(a[i],fac[i]))); cout&lt;&lt;mul(res,Inv(pw[D])); return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round5","slug":"sol5","date":"2019-11-05T14:40:45.000Z","updated":"2019-12-26T04:28:08.918Z","comments":true,"path":"sol5/","link":"","permalink":"http://ldxcaicai.github.io/sol5/","excerpt":"","text":"染色 解题思路： 对于 k=2k=2k=2 的情况特判一下，然后剩下的点发现用状压 dpdpdp 会 TLETLETLE ，于是按格子转移，写个 kkk 进制轮廓线即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112#include&lt;bits/stdc++.h&gt;#include&lt;tr1/unordered_map&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef tr1::unordered_map&lt;int,int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=376544743; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=1e5+5;int n,m,K,a1[N],a2[N],cur=0,pw[15],sta=0;tr1::unordered_map&lt;int,int&gt;f[2],tmp;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),K=read(); for(ri i=1;i&lt;=m;++i)a1[i]=read(); for(ri i=1;i&lt;=m;++i)a2[i]=read(); if(K==2)&#123; for(ri i=1;i&lt;=m;++i)&#123; if(i&gt;1&amp;&amp;(a1[i]==a1[i-1]||a2[i]==a2[i-1]))&#123; puts(\"0\"); return 0; &#125; if(!(a1[i]^a2[i]^(n&amp;1)))&#123; puts(\"0\"); return 0; &#125; &#125; puts(\"1\"); return 0; &#125; pw[0]=1; int ss=0; for(ri i=1;i&lt;=m;++i)pw[i]=pw[i-1]*K,ss+=pw[i]*a1[i]; f[cur=0][ss]=1; for(ri ns,sta,trans,i=2;i&lt;n;++i)&#123; for(ri j=1;j&lt;=m;++j)&#123; cur^=1; f[cur].clear(); for(It it=f[cur^1].begin();it!=f[cur^1].end();++it)&#123; sta=it-&gt;fi,trans=it-&gt;se; for(ri k=0;k&lt;K;++k)&#123; if((j!=1&amp;&amp;(k==sta/pw[j-1]%K))||k==sta/pw[j]%K)continue; ns=sta-(sta/pw[j]%K)*pw[j]-(sta/pw[j-1]%K)*pw[j-1]; ns+=k*pw[j]+k*pw[j-1]; Add(f[cur][ns],trans); &#125; &#125; &#125; tmp.clear(); for(It it=f[cur].begin();it!=f[cur].end();++it)tmp[it-&gt;fi%pw[m]*K]=it-&gt;se; f[cur]=tmp; &#125; int res=0,sta,trans; for(It it=f[cur].begin();it!=f[cur].end();++it)&#123; bool ff=1; sta=it-&gt;fi,trans=it-&gt;se; for(ri i=1;i&lt;=m;++i)if(sta/pw[i]%K==a2[i])&#123; ff=0; break; &#125; if(ff)Add(res,trans); &#125; cout&lt;&lt;res; return 0;&#125; 外星人 解题思路： 考虑把所有人从小到大排序，然后一个一个插入现在的序列，这样一个人有贡献当且仅当其在队首，然后转移即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;#include&lt;tr1/unordered_map&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef tr1::unordered_map&lt;int,int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=5005;int n,x,a[N],cur;struct F&#123; int x,y; F(int x=0,int y=0):x(x*(y!=0)),y(y)&#123;&#125; friend inline F operator+(F a,F b)&#123;return a.x^b.x?(a.x&gt;b.x?a:b):F(a.x,add(a.y,b.y));&#125; friend inline void operator+=(F&amp;a,F b)&#123;a=a+b;&#125; friend inline F operator*(F a,int b)&#123;return F(a.x,mul(a.y,b));&#125;&#125;f[2][N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),x=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); sort(a+1,a+n+1); cur=0; for(ri i=0;i&lt;=x;++i)f[cur][i]=F(i,1); for(ri i=1;i&lt;=n;++i)&#123; cur^=1; for(ri j=0;j&lt;=x;++j)f[cur][j]=f[cur^1][j]*(i-1); for(ri j=0;j&lt;=x;++j)f[cur][j]+=f[cur^1][j%a[i]]; &#125; cout&lt;&lt;f[cur][x].x&lt;&lt;'\\n'&lt;&lt;f[cur][x].y; return 0;&#125; Lesson Timetable 解题思路： 比较简单的组合计数 先不考虑标号，设 fi,jf_{i,j}fi,j​ 表示前 iii 个位置放了 jjj 个人的方案数，可以轻松转移，最后再计算标号的贡献即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;cstdio&gt;#include&lt;iostream&gt;#include&lt;algorithm&gt;#include&lt;map&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef map&lt;int,int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=1005;int f[2][N],n,m,cur=0,fac[N],ifac[N],sum[N];inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=m;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=m;++i)Mul(ifac[i],ifac[i-1]);&#125;inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)sum[i]=sum[i-1]+read(); m=sum[n]; init(); f[cur=0][0]=1; for(ri i=1,x;i&lt;=n;++i)&#123; x=read(); cur^=1; for(ri j=0;j&lt;=sum[i];++j)f[cur][j]=0; for(ri j=0;j&lt;=sum[i-1];++j)if(f[cur^1][j])for(ri k=0,up=min(sum[i]-j,x);k&lt;=up;++k) Add(f[cur][j+k],mul(f[cur^1][j],C(sum[i]-j,k))); &#125; int res=f[cur][m]; for(ri i=1;i&lt;=n;++i)Mul(res,C(sum[n]-sum[i-1],sum[i]-sum[i-1])); cout&lt;&lt;res; return 0;&#125; On the Bench 解题思路： 考虑到若有 a×b,a×ca\\times b,a\\times ca×b,a×c 均为完全平方数的话，那么 b×cb\\times cb×c 也为完全平方数，于是可以把整个数列分成若干不相交组，组内元素相乘必定为完全平方数，不同组两个数相乘必定不为完全平方数 那么现在问题转化成了给你 mmm 个组，这 mmm 个组一共有 nnn 个数，让你将这 nnn 个数进行排列，使得相邻两个数不属于同一个组，问方案数 随便构造个带容斥系数的额生成函数乘起来即可，跟 [JSOI2019]神经网络 类似 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef map&lt;int,int&gt;::iterator It;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=305;int n,all=0,fac[N],ifac[N];vector&lt;int&gt;vl[N];poly f,g;inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=n;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=n;++i)Mul(ifac[i],ifac[i-1]);&#125;inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;inline bool check(int a,int b)&#123; int c=sqrt((ll)a*b); return (ll)c*c==(ll)a*b;&#125;inline poly operator*(poly a,poly b)&#123; int n=a.size(),m=b.size(),t=n+m-1; poly c(t); for(ri i=0;i&lt;n;++i)for(ri j=0;j&lt;m;++j) Add(c[i+j],mul(a[i],b[j])); return c;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); init(); for(ri x,i=1;i&lt;=n;++i)&#123; x=read(); bool ff=1; for(ri j=1;j&lt;=all;++j)if(check(vl[j].back(),x))&#123; ff=0; vl[j].pb(x); break; &#125; if(ff)vl[++all].pb(x); &#125; f=poly(1,1); int mt=1,res=0; for(ri pre=0,i=1;i&lt;=all;++i)&#123; g.resize(vl[i].size()+1); g[0]=0; for(ri j=1,up=vl[i].size();j&lt;=up;++j)g[j]=(up-j)&amp;1?mod-C(up-1,j-1):C(up-1,j-1); for(ri j=0;j&lt;=vl[i].size();++j)Mul(g[j],ifac[j]); f=f*g; pre+=vl[i].size(); Mul(mt,fac[vl[i].size()]); &#125; for(ri i=0;i&lt;f.size();++i)Add(res,mul(f[i],fac[i])); cout&lt;&lt;mul(mt,res); return 0;&#125; 摘苹果 解题思路： 首先考虑一个位置 vvv 在第一轮被走到的概率，发现是 ∑u,[(u,v)⊂e]duu2m×duu=∑duv12m=duv2m\\sum\\limits_{u,[(u,v)\\subset e]}\\frac{du_u}{2m}\\times du_u=\\sum\\limits_{du_v}\\frac1{2m}=\\frac{du_v}{2m}u,[(u,v)⊂e]∑​2mduu​​×duu​=duv​∑​2m1​=2mduv​​ 这样推下去那么每一轮走到点 iii 的概率都是 dui2m\\frac{du_i}{2m}2mdui​​ ，成 sbsbsb 题了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef map&lt;int,int&gt;::iterator It;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=1e5+5;vector&lt;int&gt;e[N];int n,K,m,a[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),K=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); for(ri i=1,u,v;i&lt;=m;++i)&#123; u=read(),v=read(); e[u].pb(v); e[v].pb(u); &#125; int res=0; for(ri i=1,iv=Inv(2*m);i&lt;=n;++i)Add(res,mul(mul(e[i].size(),iv),a[i])); cout&lt;&lt;mul(res,K); return 0;&#125; 假面 解题思路： 考虑设 fi,jf_{i,j}fi,j​ 表示第 iii 个人还剩 jjj 点血的概率，然后对一个人 111 操作直接 O(ai)O(a_i)O(ai​) 转移 fif_ifi​ ， 222 操作把需要的点提出来补集转化即可 当然如果你像我一样懒的话也可以写一个暴力前后缀优化艹过去，不过复杂度是错的，当然我尝试加上了ntt优化结果本来能卡过去的TLE了。 CODE(暴力非正解优化) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef map&lt;int,int&gt;::iterator It;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=205;int n,q,c,a[N],f[N][N],m,g[N],ps[N],inv[N];inline void init()&#123; inv[1]=1; for(ri i=2;i&lt;=n;++i)inv[i]=mul(inv[mod-mod/i*i],mod-mod/i);&#125;inline int query(int id)&#123; int res=0,ad=0; for(ri i=0;i&lt;=a[id];++i)Add(ad,f[id][i]); assert(ad==1); for(ri i=1;i&lt;=a[id];++i)Add(res,mul(i,f[id][i])); return res;&#125;inline void DP()&#123; static int pre[N][N],suf[N][N],ss[N]; m=read(); for(ri i=1;i&lt;=m;++i)ps[i]=read(); for(ri i=1;i&lt;=m;++i)pre[0][i]=suf[m+1][i]=0; pre[0][0]=suf[m+1][0]=1; for(ri i=1,P1,P2;i&lt;=m;++i)&#123; P1=dec(1,f[ps[i]][0]),P2=f[ps[i]][0]; for(ri j=1;j&lt;=m;++j)pre[i][j]=add(mul(pre[i-1][j-1],P1),mul(pre[i-1][j],P2)); pre[i][0]=mul(pre[i-1][0],P2); &#125; for(ri i=m,P1,P2;i;--i)&#123; P1=dec(1,f[ps[i]][0]),P2=f[ps[i]][0]; for(ri j=1;j&lt;=m;++j)suf[i][j]=add(mul(suf[i+1][j-1],P1),mul(suf[i+1][j],P2)); suf[i][0]=mul(suf[i+1][0],P2); &#125; for(ri res=0,i=1,P;i&lt;=m;++i,res=0)&#123; P=dec(1,f[ps[i]][0]); for(ri j=0;j&lt;m;++j)if(pre[i-1][j])for(ri k=0;j+k&lt;m;++k)if(suf[i+1][k]) Add(ss[j+k],mul(pre[i-1][j],suf[i+1][k])); for(ri j=0;j&lt;m;++j)&#123; Add(res,mul(ss[j],inv[j+1])); ss[j]=0; &#125; cout&lt;&lt;mul(res,P)&lt;&lt;' '; &#125; puts(\"\");&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)&#123; a[i]=read(); f[i][a[i]]=1; &#125; init(); for(ri op,p,vl,tt=read();tt;--tt)&#123; op=read(); if(!op)&#123; p=read(),vl=read(); Mul(vl,Inv(read())); for(ri i=0;i&lt;=a[p];++i)f[p][i]=add(mul(f[p][i],i?dec(1,vl):1),mul(f[p][i+1],vl)); &#125; else DP(); &#125; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;query(i)&lt;&lt;' '; return 0;&#125; 记忆的轮廓 解题思路： 水题，考虑预处理一下 wi,jw_{i,j}wi,j​ 表示当前 i,ji,ji,j 为特殊点， i+1⋯j−1i+1\\cdots j-1i+1⋯j−1 均不为特殊点时从 iii 到 jjj 的期望步数，然后显然 wi,jw_{i,j}wi,j​ 满足四边形不等式，于是随便上一个决策单调性优化即可，不过该题用 O(n2)O(n^2)O(n2) 的写法的话最好 infinfinf 设到 1e3001e3001e300 左右，另外两种可以不用 infinfinf 因此就不存在什么问题 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef pair&lt;int,int&gt; pii;typedef long long ll;typedef unsigned long long Ull;typedef unsigned int Uint;typedef double db;typedef long double ld;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef pair&lt;ll,ll&gt; pll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch)&amp;&amp;ch!='?')ch=gc(); while(isdigit(ch)||ch=='?')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b-mod:a+b;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmax(T&amp;a,T&amp;b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T&amp;b)&#123;a&gt;b?a=b:0;&#125;const int N=1505,M=705;int n,m,K,cur=0;ld dis[M],f[2][M],w[M][M];vector&lt;int&gt;e[N];void dfs(int p,int dep,int ori,ld coe)&#123; if(!e[p].size())&#123; dis[ori]+=coe*dep; return; &#125; int du=e[p].size()+(ori==p); for(ri i=0;i&lt;e[p].size();++i) dfs(e[p][i],dep+1,ori,coe/(ld)du);&#125;inline ld calc(int x,int p)&#123;return f[cur^1][x]+w[x][p];&#125;inline void solve(int l,int r,int L,int R)&#123; if(L==R)&#123; for(ri i=l;i&lt;=r;++i)f[cur][i]=calc(L,i); return; &#125; int mid=l+r&gt;&gt;1,ps=L; ld tmp=calc(ps,mid),t; for(ri i=ps+1;i&lt;=R&amp;&amp;i&lt;mid;++i)if((t=calc(i,mid))&lt;tmp)&#123; tmp=t; ps=i; &#125; f[cur][mid]=tmp; if(l&lt;mid)solve(l,mid-1,L,ps); if(mid&lt;r)solve(mid+1,r,ps,R);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; n=read(),m=read(),K=read(); for(ri i=1;i&lt;=m;++i)e[i].clear(); for(ri i=1;i&lt;=n;++i)dis[i]=0; for(ri i=1,u,v;i&lt;=m-n;++i)&#123; u=read(),v=read(); e[u].pb(v); &#125; for(ri i=1;i&lt;=n;++i)if(e[i].size())dfs(i,1,i,1); ld coe,sum=0; for(ri len,i=1;i&lt;=n;++i)&#123; w[i][i]=0; coe=1.0/((ld)e[i].size()+1); len=1,sum=dis[i]; for(ri j=i+1;j&lt;=n;++j)&#123; w[i][j]=len+sum/coe; sum+=coe*dis[j]; sum+=coe*(1.0-1.0/((ld)e[j].size()+1))*len; ++len; coe*=1.0/((ld)e[j].size()+1); &#125; &#125; cur=0; for(ri i=2;i&lt;=n;++i)f[cur][i]=w[1][i]; for(ri i=3;i&lt;=K;++i)cur^=1,solve(i,n,i-1,n); printf(\"%.4Lf\\n\",f[cur][n]); &#125; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round4","slug":"sol4","date":"2019-11-03T14:46:34.000Z","updated":"2019-12-26T04:28:23.115Z","comments":true,"path":"sol4/","link":"","permalink":"http://ldxcaicai.github.io/sol4/","excerpt":"","text":"交与并 解题思路： 容易探究出如下性质： 所有合法集合可以由集合中的两个区间代替 那么对于每个区间找一个跟它交并长度乘积最大的区间即可 发现有两种相交和包含，那么先考虑如何处理包含的情况 考虑先左端点递增后右端点递减的顺序进行排序，维护当前最右端点来判断是否包含，并跟当前最右端点对应区间求贡献，但这样不一定能求出所有包含当前区间中最长的那个，这个时候考虑如下一点性质： 假设存在 A⊂B,A⊂CA\\subset B,A\\subset CA⊂B,A⊂C ，那么 B,CB,CB,C 产生的贡献优于 A,BA,BA,B 和 A,CA,CA,C 产生的贡献 这样就可以放心搞掉所有被包含的区间了，剩下的区间两两不包含且左右端点均递增，于是区间 i,ji,ji,j 的贡献为 (ri−lj+1)×(rj−li+1)(r_i-l_j+1)\\times(r_j-l_i+1)(ri​−lj​+1)×(rj​−li​+1) 拆开看发现有决策单调性，直接分治搞搞即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;inline bool cmp(pii a,pii b)&#123;return a.fi^b.fi?a.fi&lt;b.fi:a.se&gt;b.se;&#125;const int N=1e6+5;pii a[N];int n,sig=0;ll ans=0;inline ll calc(int x,int p)&#123;return (ll)(a[p].se-a[x].fi)*(a[x].se-a[p].fi);&#125;inline void solve(int l,int r,int L,int R)&#123; if(l&gt;r)return; if(L==R)&#123; for(ri i=l;i&lt;=r;++i)if(i&gt;L)ckmax(ans,calc(L,i)); return; &#125; int mid=l+r&gt;&gt;1,ps=L; ll tmp=calc(ps,mid),t; for(ri i=ps+1;i&lt;=R&amp;&amp;i&lt;mid;++i)if((t=calc(i,mid))&gt;tmp)&#123; tmp=t; ps=i; &#125; if(ps&lt;mid)ckmax(ans,tmp); solve(l,mid-1,L,ps); solve(mid+1,r,ps,R); &#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[i].fi=read(),a[i].se=read(); sort(a+1,a+n+1,cmp); sig=1; for(ri ps=1,mx=a[1].se,i=2;i&lt;=n;++i)&#123; if(a[i].se&gt;mx)&#123; mx=a[i].se; ps=i; a[++sig]=a[i]; &#125; else ckmax(ans,(ll)(a[i].se-a[i].fi)*(a[ps].se-a[ps].fi)); &#125; solve(1,sig,1,sig); cout&lt;&lt;ans; return 0;&#125; 地图 解题思路： 首先考虑一个贪心，将所有数进行排序然后分成不超过 mmm 块一定是最优的，证明显然 然后就可以 fi,jf_{i,j}fi,j​ 表示前 iii 个数分为 jjj 块的最优贡献，预处理所有区间的贡献即可，复杂度 O(n2m)O(n^2m)O(n2m) CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=3005,M=22;const ll inf=1e18;ll f[N][M],w[N][N],s[N];int n,m,a[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); sort(a+1,a+n+1); for(ri i=1;i&lt;=n;++i)s[i]=a[i]+s[i-1]; for(ri mid,len=2;len&lt;=n;++len)for(ri l=1,r=len;r&lt;=n;++l,++r)&#123; mid=l+r&gt;&gt;1; w[l][r]=(ll)a[mid]*(mid-l)-(s[mid-1]-s[l-1])+(s[r]-s[mid])-(ll)a[mid]*(r-mid); &#125; for(ri i=0;i&lt;=n;++i)for(ri j=0;j&lt;=m;++j)f[i][j]=inf; f[0][0]=0; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=min(m,i);++j)for(ri k=1;k&lt;=i;++k) if(f[k-1][j-1]!=inf)ckmin(f[i][j],f[k-1][j-1]+w[k][i]); cout&lt;&lt;f[n][m]; return 0;&#125; 魔兽地图DotR 解题思路： 设 fi,j,kf_{i,j,k}fi,j,k​ 表示 iii 为根的子树花费至多 jjj 元，最后拼出来了 kkk 个 iii 的最大贡献，然后由于是森林因此要分组转移，转移的时候利用提前计算贡献的思想加上后缀和优化就好 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int inf=1e9;int g[2005],f[55][2005][105],suf[55][2005][105],cur=0,du[55],a[55],b[55],vl[55],n,m;vector&lt;pii&gt;e[55];void dfs(int p)&#123; if(!e[p].size())&#123; ckmin(b[p],m/a[p]); for(ri i=b[p];~i;--i)&#123; f[p][a[p]*i][i]=vl[p]*i; for(ri j=1;j&lt;=m;++j)&#123; ckmax(f[p][j][i],f[p][j-1][i]); suf[p][j][i]=max(f[p][j][i],suf[p][j][i+1]); &#125; &#125; return; &#125; b[p]=inf,a[p]=0; for(ri v,w,i=0;i&lt;e[p].size();++i)&#123; v=e[p][i].fi,w=e[p][i].se; dfs(v); a[p]+=a[v]*w; ckmin(b[p],b[v]/w); &#125; ckmin(b[p],m/a[p]); for(ri i=b[p];~i;--i)&#123; f[p][i*a[p]][i]=i*vl[p]; for(ri j=0,v,w,sw,svl;j&lt;e[p].size();++j)&#123; v=e[p][j].fi,w=e[p][j].se,sw=w*i*a[v],svl=w*i*vl[v]; for(ri k=m;k&gt;=i*a[p];--k)for(ri l=0,up=m-max(k,sw);l&lt;=up;++l) ckmax(f[p][k+l][i],f[p][k][i]+suf[v][sw+l][w*i]-svl); &#125; for(ri j=1;j&lt;=m;++j)&#123; ckmax(f[p][j][i],f[p][j-1][i]); suf[p][j][i]=max(f[p][j][i],suf[p][j][i+1]); &#125; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); char ch; for(ri i=1;i&lt;=n;++i)&#123; vl[i]=read(); ch=gc(); while(!isalpha(ch))ch=gc(); if(ch=='B')a[i]=read(),b[i]=read(); else&#123; for(ri tt=read(),v,w;tt;--tt)&#123; v=read(),w=read(); e[i].pb(pii(v,w)); ++du[v]; &#125; &#125; &#125; memset(f,-0x3f,sizeof(f)); memset(suf,-0x3f,sizeof(suf)); for(ri i=1;i&lt;=n;++i)&#123; if(du[i])continue; dfs(i); for(ri j=m;j;--j)for(ri k=0;k&lt;=j;++k)ckmax(g[j],g[j-k]+suf[i][k][0]); &#125; cout&lt;&lt;g[m]; return 0;&#125; 小 Y 和二叉树 解题思路： 显然要选一个 du≤2du\\le2du≤2 的最小编号作为根，剩下的用 dfsdfsdfs 处理出子树中 du≤2du\\le2du≤2 的最小编号来贪心构造即可 实际上就是分类讨论一波 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=1e6+5,inf=0x3f3f3f3f;vector&lt;int&gt;e[N];int n,du[N],rt,mn[N];void dfs(int p,int ft)&#123; if(du[p]&lt;=2)mn[p]=p; else mn[p]=inf; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; dfs(v,p),ckmin(mn[p],mn[v]); &#125;&#125;inline int get1(int x,int ft)&#123; int res=0x3f3f3f3f; for(ri i=0,v;i&lt;e[x].size();++i)&#123; if((v=e[x][i])==ft)continue; ckmin(res,mn[e[x][i]]); &#125; return res;&#125;inline int get2(int x,int ft)&#123; int res=0x3f3f3f3f,siz=du[x]-(ft!=0); if(!siz)return x; if(siz==1)return min(x,get1(x,ft)); return get1(x,ft);&#125;void print(int p,int ft,bool f)&#123; vector&lt;int&gt;tmp; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; tmp.pb(v); &#125; if(!tmp.size())cout&lt;&lt;p&lt;&lt;' '; else if(tmp.size()==1)&#123; if(f)&#123; cout&lt;&lt;p&lt;&lt;' '; if(get1(tmp[0],p)&lt;tmp[0])print(tmp[0],p,0); else print(tmp[0],p,1); &#125; else&#123; if(p&lt;mn[tmp[0]])&#123; cout&lt;&lt;p&lt;&lt;' '; print(tmp[0],p,0); &#125; else&#123; print(tmp[0],p,0); cout&lt;&lt;p&lt;&lt;' '; &#125; &#125; &#125; else&#123; if(f)&#123; if(get2(tmp[0],p)&gt;get2(tmp[1],p))swap(tmp[0],tmp[1]); cout&lt;&lt;p&lt;&lt;' '; print(tmp[0],p,0); print(tmp[1],p,1); &#125; else&#123; if(mn[tmp[0]]&gt;mn[tmp[1]])swap(tmp[0],tmp[1]); print(tmp[0],p,0); cout&lt;&lt;p&lt;&lt;' '; print(tmp[1],p,0); &#125; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)&#123; du[i]=read(); for(ri j=1;j&lt;=du[i];++j)e[i].pb(read()); &#125; rt=n+1; for(ri i=1;i&lt;=n;++i)if(du[i]&lt;3)ckmin(rt,i); dfs(rt,0); print(rt,0,1); return 0;&#125; Anthem of Berland 解题思路： 有一个很显然的暴力思路 fi,jf_{i,j}fi,j​ 表示走到 sss 前 iii 为匹配到 ttt 的第 jjj 位的最优值，然后暴力转移（貌似还能过） 现在考虑一个不那么暴力的思路，设 fif_ifi​ 表示前 iii 位的最优值，首先考虑 s[i−m+1⋯i]s[i-m+1\\cdots i]s[i−m+1⋯i] 是否能与 ttt 匹配，如果可以就能从其 borderborderborder ， borderborderborder 的 borderborderborder 等位置转移过来，因此我们再记录一个 gig_igi​ 表示以 iii 结尾的位置跟 ttt 匹配上的最优值，然后就能转移啦 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=1e5+5;char s[N],t[N];int n,m,f[N],g[N],nxt[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif scanf(\"%s%s\",s+1,t+1); n=strlen(s+1),m=strlen(t+1); for(ri i=1,j=0;i&lt;m;++i)&#123; while(j&amp;&amp;t[i+1]!=t[j+1])j=nxt[j]; nxt[i+1]=t[i+1]==t[j+1]?++j:0; &#125; for(ri p,i=m;i&lt;=n;++i)&#123; bool ff=1; for(ri j=i-m+1,k=1;j&lt;=i;++j,++k)if(s[j]!='?'&amp;&amp;s[j]!=t[k])&#123; ff=0; break; &#125; if(ff)&#123; ckmax(g[i],f[i-m]+1); p=nxt[m]; while(p)&#123; ckmax(g[i],g[i-m+p]+1); p=nxt[p]; &#125; &#125; f[i]=max(f[i-1],g[i]); &#125; cout&lt;&lt;f[n]; return 0;&#125; 火鼠的皮衣 -不焦躁的内心- 解题思路： 推式子题： =∑i=0⌊n2⌋(a)2ibn−2iCn2i=∑i=0n(a)ibn−iCni[2∣i]\\begin{aligned} =&amp;\\sum\\limits_{i=0}^{\\lfloor\\frac{n}2\\rfloor}(\\sqrt a)^{2i}b^{n-2i}C_{n}^{2i}\\\\ =&amp;\\sum\\limits_{i=0}^n(\\sqrt a)^ib^{n-i}C_{n}^i[2|i] \\end{aligned} ==​i=0∑⌊2n​⌋​(a​)2ibn−2iCn2i​i=0∑n​(a​)ibn−iCni​[2∣i]​ 单位根反演一下成 sbsbsb 题了 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;bits/stdc++.h&gt;#define int long long#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; int mod; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (a*b-(ll)((long double)a/mod*b)*mod+mod)%mod;&#125;&#125;using namespace modular;ll n,A,B;struct F&#123; ll x,y; F(ll x=0,ll y=0):x(x),y(y)&#123;&#125; friend inline F operator*(F &amp;a,F &amp;b)&#123;return F(add(mul(a.x,b.y),mul(a.y,b.x)),add(mul(a.y,b.y),mul(mul(a.x,b.x),A)));&#125; friend inline F operator+(F &amp;a,F &amp;b)&#123;return F(add(a.x,b.x),add(a.y,b.y));&#125;&#125;;inline F ksm(F x,ll b)&#123; F res=F(0,1); for(;b;b&gt;&gt;=1,x=x*x)if(b&amp;1)&#123; res=res*x; &#125; return res;&#125;signed main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; n=readl(),A=readl(),B=readl(),mod=readl(); F a=F(1,B%mod); a=ksm(a,n); cout&lt;&lt;a.y&lt;&lt;'\\n'; &#125; return 0;&#125; Ternary String Counting 解题思路： 设 fi,j,kf_{i,j,k}fi,j,k​ 表示填了前 iii 位，最近不同颜色出现位置为 j,kj,kj,k 的方案数 (i&gt;j&gt;k)(i&gt;j&gt;k)(i&gt;j&gt;k) ，然后能得到如下转移： fi,j,k→fi+1,i,kf_{i,j,k}\\rightarrow f_{i+1,i,k}fi,j,k​→fi+1,i,k​ fi,j,k→fi+1,j,kf_{i,j,k}\\rightarrow f_{i+1,j,k}fi,j,k​→fi+1,j,k​ fi,j,k→fi+1,i,jf_{i,j,k}\\rightarrow f_{i+1,i,j}fi,j,k​→fi+1,i,j​ 然后把每个 iii 对应的 fff 矩阵拎出来看发现等价于是每次给你画一个矩形，把外面的值变为 000 ，然后将一列/一行的和加给一个格子，并且一个位置被清零后之后那个地方不会再被修改，且对于每一行来说有值的是连续区间，于是对每一行维护有值的左右端点，行和，列和即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;template&lt;class T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;class T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;const int N=5005;int n,m;signed main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; n=read(),m=read(); vector&lt;int&gt;mn1(n+2),mx1(n+2),mn2(n+2),mx2(n+2),row(n+2),col(n+2),lp(n+2),rp(n+2); vector&lt;vector&lt;int&gt; &gt;f(n+2); for(ri i=0;i&lt;=n+1;++i)&#123; mx1[i]=mx2[i]=i-1; f[i].resize(n+2); &#125; for(ri l,r,v,i=1;i&lt;=m;++i)&#123; l=read(),r=read(),v=read(); if(v==1)&#123; ckmin(mx1[r],l-1); ckmin(mx2[r],l-1); &#125; else if(v==2)&#123; ckmax(mn1[r],l); ckmin(mx2[r],l-1); &#125; else&#123; ckmax(mn1[r],l); ckmax(mn2[r],l); &#125; &#125; bool ff=1; for(ri i=1;i&lt;=n;++i)if(mn1[i]&gt;mx1[i]||mn2[i]&gt;mx2[i])&#123; ff=0; break; &#125; if(!ff)&#123; puts(\"0\"); continue; &#125; row[0]=col[0]=f[0][0]=3,lp[0]=rp[0]=0; for(ri cur=2;cur&lt;=n;++cur)&#123; if(mx1[cur]+1==cur)&#123; for(ri i=mn2[cur];i&lt;=mx2[cur];++i) Add(f[cur-1][i],add(row[i],col[i])); for(ri i=mn2[cur];i&lt;=mx2[cur];++i) Add(col[i],f[cur-1][i]),Add(row[cur-1],f[cur-1][i]); lp[cur-1]=mn2[cur],rp[cur-1]=mx2[cur]; &#125; else lp[cur-1]=1,rp[cur-1]=0; for(ri i=0;i&lt;mn1[cur];++i)&#123; if(lp[i]&gt;rp[i])continue; for(ri j=lp[i];j&lt;=rp[i];++j)Dec(col[j],f[i][j]); row[i]=0; lp[i]=1,rp[i]=0; &#125; for(ri i=mn1[cur];i&lt;=mx1[cur];++i)&#123; if(lp[i]&lt;=rp[i])&#123; if(lp[i]&gt;mx2[cur]||rp[i]&lt;mn2[cur])&#123; for(ri j=lp[i];j&lt;=rp[i];++j)Dec(col[j],f[i][j]); row[i]=0; lp[i]=1,rp[i]=0; &#125; else&#123; for(ri j=lp[i];j&lt;mn2[cur];++j) Dec(col[j],f[i][j]),Dec(row[i],f[i][j]); ckmax(lp[i],mn2[cur]); for(ri j=rp[i];j&gt;mx2[cur];--j) Dec(col[j],f[i][j]),Dec(row[i],f[i][j]); ckmin(rp[i],mx2[cur]); &#125; &#125; &#125; for(ri i=mx1[cur]+1;i&lt;cur-1;++i)&#123; if(lp[i]&gt;rp[i])continue; for(ri j=lp[i];j&lt;=rp[i];++j)Dec(col[j],f[i][j]); row[i]=0; lp[i]=1,rp[i]=0; &#125; &#125; int res=0; for(ri i=0;i&lt;n;++i)Add(res,row[i]); cout&lt;&lt;res&lt;&lt;'\\n'; &#125; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round3","slug":"sol3","date":"2019-11-01T14:39:01.000Z","updated":"2019-12-26T04:29:22.187Z","comments":true,"path":"sol3/","link":"","permalink":"http://ldxcaicai.github.io/sol3/","excerpt":"","text":"建设游乐场 解题思路： 在 mmm 很小的时候可以考虑用轮廓线做，但现在 mmm 较大，因此要对该题的特殊条件进行分析： 考虑到最后会形成若干回路，因此若将整张图进行黑白染色，那么一个白格一定连接两个黑格，由于弯道的权值为 vli,jvl_{i,j}vli,j​ ，直道的权值为 000 ，因此可以将每个格子按照横纵方向建两个点并进行如下连边： 源点向每个白格对应点连边，费用 000 ，流量 222 每个黑格对应点向汇点连边，费用 000 ，流量 222 每个格子的横/纵向对应点向格子对应点连两条边，一条费用 000 ，流量 111 ，一条费用 vli,jvl_{i,j}vli,j​ ，流量 111 相邻的合法格子在对应方向连边 然后跑最大费用流即可，若是弯道会被计算 2vli,j2vl_{i,j}2vli,j​ 的费用，直道会被计算 vli,jvl_{i,j}vli,j​ 的费用，因此最后减去所有合法格子的权值即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int inf=0x3f3f3f3f,N=155,M=35,L=N*M*3;int n,m,vl[N][M],ct=0;struct edge&#123;int v,next,c,w;&#125;;namespace mcmf&#123; int d[L],cnt,first[L],s,t,id[L],res,fl; bool in[L]; edge e[L&lt;&lt;4]; inline void init()&#123; s=0; t=n*m*3+1; cnt=-1; for(ri i=s;i&lt;=t;++i)first[i]=-1; res=0; fl=0; &#125; inline void addedge(int u,int v,int c,int w)&#123; e[++cnt]=(edge)&#123;v,first[u],c,w&#125;; first[u]=cnt; &#125; inline void add_(int u,int v,int c,int w)&#123; addedge(u,v,c,w); addedge(v,u,0,-w); &#125; inline bool spfa()&#123; static int que[L&lt;&lt;4],hd,tl; for(ri i=s;i&lt;=t;++i)d[i]=-inf; que[hd=tl=1]=s; d[s]=0; while(hd&lt;=tl)&#123; int x=que[hd++]; in[x]=0; for(ri i=first[x],v;~i;i=e[i].next)&#123; v=e[i].v; if(e[i].c&gt;0&amp;&amp;d[v]&lt;d[x]+e[i].w)&#123; d[v]=d[x]+e[i].w; id[v]=i; if(!in[v])&#123; in[v]=1; que[++tl]=v; &#125; &#125; &#125; &#125; if(d[t]==-inf)return 0; res+=d[t]; ++fl; int p=t; while(p!=s)--e[id[p]].c,++e[id[p]^1].c,p=e[id[p]^1].v; return 1; &#125; inline int solve()&#123; while(spfa()); if(fl!=ct)puts(\"-1\"),exit(0); return res; &#125;&#125;bool s[N][M];inline int idx(int a,int b,int c)&#123;return c*n*m+(a-1)*m+b;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)s[i][j]=read(); int res=0; mcmf::init(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; vl[i][j]=read(); if(!s[i][j])res-=vl[i][j],++ct; &#125; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; if(s[i][j])continue; if((i+j)&amp;1)&#123; mcmf::add_(mcmf::s,idx(i,j,2),2,0); mcmf::add_(idx(i,j,2),idx(i,j,0),1,0); mcmf::add_(idx(i,j,2),idx(i,j,0),1,vl[i][j]); mcmf::add_(idx(i,j,2),idx(i,j,1),1,0); mcmf::add_(idx(i,j,2),idx(i,j,1),1,vl[i][j]); if(i!=1&amp;&amp;!s[i-1][j])mcmf::add_(idx(i,j,0),idx(i-1,j,0),1,0); if(i!=n&amp;&amp;!s[i+1][j])mcmf::add_(idx(i,j,0),idx(i+1,j,0),1,0); if(j!=1&amp;&amp;!s[i][j-1])mcmf::add_(idx(i,j,1),idx(i,j-1,1),1,0); if(j!=m&amp;&amp;!s[i][j+1])mcmf::add_(idx(i,j,1),idx(i,j+1,1),1,0); &#125; else&#123; mcmf::add_(idx(i,j,2),mcmf::t,2,0); mcmf::add_(idx(i,j,0),idx(i,j,2),1,0); mcmf::add_(idx(i,j,0),idx(i,j,2),1,vl[i][j]); mcmf::add_(idx(i,j,1),idx(i,j,2),1,0); mcmf::add_(idx(i,j,1),idx(i,j,2),1,vl[i][j]); &#125; &#125; res+=mcmf::solve(); cout&lt;&lt;res; return 0;&#125; Druzyny 解题思路： 考虑设 fi=(a,b)f_{i}=(a,b)fi​=(a,b) 表示当前序列段开头为 iii ，之前最多有 aaa 段序列，方案数为 bbb 很明显可以考虑枚举该段的结尾位置然后进行转移，复杂度为 O(n2)O(n^2)O(n2) 转移式条件如下： 若i能向j转移，则max⁡{ci⋯j}≤j−i+1≤min⁡{di⋯j}若i能向j转移，则\\max\\{c_{i\\cdots j}\\}\\le j-i+1\\le\\min\\{d_{i\\cdots j}\\}若i能向j转移，则max{ci⋯j​}≤j−i+1≤min{di⋯j​} 观察转移条件容易发现合法的转移区间被分成了若干连续段，而如果只有一个限制条件我们可以通过预处理每个数延伸的最远位置来进行 dpdpdp 优化，因此现在问题变为用巧妙的方法去掉其中一个限制条件 那么利用最值分治的思想即可，每一层分别先更新出最值左边的答案，然后用其更新右侧答案，然后递归分治右边即可 在更新的时候通过手画可以发现要么是区间中间的一段，要么是区间的一个前缀，对于后者直接记录前缀和转移即可，每层复杂度 O(1)O(1)O(1) ，总复杂度为 O(nlog⁡n)O(n\\log n)O(nlogn) ，而对于前者在所有层中只会出现 O(n)O(n)O(n) 次，每次用线段树查询区间和，复杂度 O(nlog⁡n)O(n\\log n)O(nlogn) 但由于笔者的实现不够好成功被卡了空间，于是线段树变成了 N×3N\\times 3N×3 的上限 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171#include&lt;bits/stdc++.h&gt;#define ri int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;const int N=1e6+5;struct F&#123; int a,b; F(int a=-1000000,int b=0):a(a),b(b)&#123;&#125; friend inline F operator+(F a,F b)&#123;return a.a^b.a?(a.a&gt;b.a?a:b):F(a.a,add(a.b,b.b));&#125; friend inline void operator+=(F&amp;a,F b)&#123;a=a+b;&#125;&#125;f[N];namespace sgt&#123; #define lc (p&lt;&lt;1) #define rc (p&lt;&lt;1|1) #define mid (l+r&gt;&gt;1) F vl[N*3],tg[N*3]; void pushnow(int p,F v)&#123; vl[p]+=v; tg[p]+=v; &#125; void pushdown(int p)&#123; if(tg[p].a||tg[p].b)&#123; pushnow(lc,tg[p]); pushnow(rc,tg[p]); tg[p]=F(0,0); &#125; &#125; void pushup(int p)&#123;vl[p]=vl[lc]+vl[rc];&#125; void update(int p,int l,int r,int ql,int qr,F v)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return pushnow(p,v); pushdown(p); if(qr&lt;=mid)update(lc,l,mid,ql,qr,v); else if(ql&gt;mid)update(rc,mid+1,r,ql,qr,v); else update(lc,l,mid,ql,qr,v),update(rc,mid+1,r,ql,qr,v); pushup(p); &#125; F query(int p,int l,int r,int ql,int qr)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return vl[p]; pushdown(p); if(qr&lt;=mid)return query(lc,l,mid,ql,qr); if(ql&gt;mid)return query(rc,mid+1,r,ql,qr); return query(lc,l,mid,ql,qr)+query(rc,mid+1,r,ql,qr); &#125;&#125;int n,mn[N],mx[N],ps[N];namespace sgtt&#123; int vl[N*3]; void pushup(int p)&#123;vl[p]=mn[vl[lc]]&gt;mn[vl[rc]]?vl[lc]:vl[rc];&#125; void build(int p,int l,int r)&#123; if(l==r)&#123; vl[p]=l; return; &#125; build(lc,l,mid),build(rc,mid+1,r); pushup(p); &#125; int query(int p,int l,int r,int ql,int qr)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return vl[p]; if(qr&lt;=mid)return query(lc,l,mid,ql,qr); if(ql&gt;mid)return query(rc,mid+1,r,ql,qr); int res1=query(lc,l,mid,ql,qr),res2=query(rc,mid+1,r,ql,qr); return mn[res1]&gt;mn[res2]?res1:res2; &#125; int query(int l,int r)&#123;return query(1,1,n,l,r);&#125; #undef lc #undef rc #undef mid&#125;F pre,upd;void solve(int l,int r)&#123; if(l&gt;r)return; if(l==r)&#123; sgt::update(1,1,n,l,l,f[l]); f[l]=sgt::query(1,1,n,l,l); return; &#125; int mid=sgtt::query(l,r-1); solve(l,mid); int pos=max(mid,l+mn[mid]-1); if(pos-mn[mid]+1&gt;l)&#123; upd=sgt::query(1,1,n,l,pos-mn[mid]); pre=F(upd.a+1,upd.b); &#125; else pre=F(); for(ri L,R,res,ql=l,qr=pos-mn[mid]+1,i=pos;i&lt;r;++i,++qr)&#123; if(ps[i]&gt;mid)break; if(qr&gt;=l)&#123; pre+=F(f[qr].a+1,f[qr].b); if(qr==mid)&#123; L=i,R=r-1,res=i-1; while(L&lt;=R)&#123; int md=L+R&gt;&gt;1; if(ps[md]&lt;=l)L=md+1,res=md; else R=md-1; &#125; if(i&lt;=res)sgt::update(1,1,n,i+1,res+1,pre); for(i=res+1;i&lt;r;++i)&#123; if(ps[i]&gt;mid)break; upd=sgt::query(1,1,n,ps[i],qr); f[i+1]+=F(upd.a+1,upd.b); &#125; break; &#125; if(ps[i]&gt;l)&#123; if(ps[i]&lt;=qr)&#123; upd=sgt::query(1,1,n,ps[i],qr); f[i+1]+=F(upd.a+1,upd.b); &#125; continue; &#125; f[i+1]+=pre; &#125; &#125; solve(mid+1,r);&#125;struct Que&#123; priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;a,b; inline void ins(int x)&#123;a.push(x);&#125; inline void del(int x)&#123;b.push(x);&#125; inline int top()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();return a.top();&#125;&#125;vl;signed main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)mn[i]=read(),mx[i]=read(); ++n; mn[n]=mx[n]=1; f[1]=F(0,1); sgtt::build(1,1,n); for(ri l=1,r=1;r&lt;=n;++r)&#123; vl.ins(mx[r]); while(vl.top()&lt;r-l+1)vl.del(mx[l++]); ps[r]=l; &#125; while(vl.a.size())vl.a.pop(); while(vl.b.size())vl.b.pop(); solve(1,n); F res=f[n]; if(!res.b)puts(\"NIE\"); else cout&lt;&lt;res.a&lt;&lt;' '&lt;&lt;res.b; return 0;&#125; MachineWorks 解题思路： 考虑把所有机器按照 did_idi​ 排序，然后设 fif_ifi​ 表示到第 iii 个物品手中能有的最多的钱 那么转移式为 fi=max⁡{fj+(di−dj−1)×gj+rj}f_i=\\max\\{f_j+(d_i-d_j-1)\\times g_j+r_j\\}fi​=max{fj​+(di​−dj​−1)×gj​+rj​} 貌似可以斜率优化，然后发现 gjg_jgj​ 不是单增的，于是利用 cdqcdqcdq 分治来维护这个偏序即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=1e5+5;int n,C,D,cas=0;const ll inf=1e13;struct F&#123; int d,p,r,g; friend inline bool operator&lt;(F a,F b)&#123;return a.d&lt;b.d;&#125;&#125;a[N];pil b[N],c[N];ll f[N];int q[N],hd,tl,t1,t2;inline double slope(pil a,pil b)&#123;return a.fi==b.fi?inf:(double)(a.se-b.se)/(double)(a.fi-b.fi);&#125;inline void solve(int l,int r)&#123; if(l==r)&#123; f[l]-=a[l].p; if(f[l]&lt;0)f[l]=-inf; return; &#125; int mid=l+r&gt;&gt;1; solve(l,mid); t1=0,t2=0; for(ri i=l;i&lt;=mid;++i)if(f[i]!=-inf)b[++t1]=pil(a[i].g,f[i]+a[i].r-(ll)(a[i].d+1)*a[i].g); for(ri i=mid+1;i&lt;=r;++i)c[++t2]=pil(a[i].d,i); sort(b+1,b+t1+1); sort(c+1,c+t2+1); hd=1,tl=0; for(ri i=1;i&lt;=t1;++i)&#123; while(tl-hd&gt;=1&amp;&amp;slope(b[i],b[q[tl]])&gt;slope(b[q[tl]],b[q[tl-1]]))--tl; q[++tl]=i; &#125; if(hd&lt;=tl)for(ri i=1;i&lt;=t2;++i)&#123; while(tl-hd&gt;=1&amp;&amp;slope(b[q[hd]],b[q[hd+1]])&gt;-c[i].fi)++hd; ckmax(f[c[i].se],b[q[hd]].se+(ll)b[q[hd]].fi*c[i].fi); &#125; solve(mid+1,r);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif while(1)&#123; n=read(),C=read(),D=read(); if(!(n+C+D))break; ++cas; cout&lt;&lt;\"Case \"&lt;&lt;cas&lt;&lt;\": \"; for(ri i=1;i&lt;=n;++i)&#123; a[i].d=read(),a[i].p=read(),a[i].r=read(),a[i].g=read(); f[i+1]=-inf; &#125; a[++n]=(F)&#123;0,0,0,0&#125;; a[++n]=(F)&#123;D+1,0,0,0&#125;; sort(a+1,a+n+1); f[1]=C; f[n]=-inf; solve(1,n); cout&lt;&lt;f[n]&lt;&lt;'\\n'; &#125; return 0;&#125; 珠宝 解题思路： 首先考虑按照代价进行分组，然后设 fi,jf_{i,j}fi,j​ 表示前 iii 个组代价为 jjj 的最优美观度 这样就有了 O(300K2)O(300K^2)O(300K2) 的暴力搞法（不如 O(nK)O(nK)O(nK) 暴力分多 然后每个组满足决策单调性（这个非常易证），于是可以对每个组按照模数分类然后决策单调性优化转移 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int M=50005,K=305;int n,m,cur,blo;ll f[2][M];vector&lt;ll&gt;vl[K];vector&lt;int&gt;ps;inline ll calc(int x,int p)&#123;return f[cur^1][ps[x]]+(x==p?0:vl[blo][p-x-1]);&#125;inline void solve(int l,int r,int L,int R)&#123; if(l&gt;r)return; if(L==R)&#123; for(ri i=l;i&lt;=r;++i)f[cur][ps[i]]=calc(L,i); return; &#125; int mid=l+r&gt;&gt;1,x=max(L,mid-(int)vl[blo].size()); ll tmp=calc(x,mid),t; for(ri i=x+1;i&lt;=R&amp;&amp;i&lt;=mid;++i)if((t=calc(i,mid))&gt;tmp)&#123; x=i; tmp=t; &#125; f[cur][ps[mid]]=tmp; solve(l,mid-1,L,x); solve(mid+1,r,x,R);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri a,b,i=1;i&lt;=n;++i)&#123; a=read(),b=read(); vl[a].pb(b); &#125; cur=0; for(ri i=1;i&lt;=300;++i)&#123; if(!vl[i].size())continue; blo=i; sort(vl[i].begin(),vl[i].end()); reverse(vl[i].begin(),vl[i].end()); for(ri j=1;j&lt;vl[i].size();++j)vl[i][j]+=vl[i][j-1]; cur^=1; for(ri j=0;j&lt;i;++j)&#123; ps.clear(); for(ri k=j;k&lt;=m;k+=i)ps.pb(k); if(ps.size())solve(0,ps.size()-1,0,ps.size()-1); &#125; &#125; for(ri i=1;i&lt;=m;++i)cout&lt;&lt;f[cur][i]&lt;&lt;' '; return 0;&#125; Ember and Storm’s Tree Game 解题思路： 考虑到合法的树满足每条路径一定是单调或者单峰的，且每条路径有 222 种调整方法，于是只用求出可行树的方案数，考虑设 fi,jf_{i,j}fi,j​ 表示整颗子树满足儿子小于父亲，子树 siz=isiz=isiz=i ，根的度数为 jjj 的方案数 然后用个前缀和优化能够非常简单的转移出来 现在在整棵树的根处可以将满足儿子小于父亲和儿子大于父亲的树给拼接起来，统计方案数即可 注意到同一棵树的可行根由若干个，但它们形成了一条单调路径，我们在端点统计即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;#define int long long#define ri register int#define pb push_back#define fi first#define se second#define double long doubleusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; int mod; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;const int N=205;int C[N][N],n,K,f[N][N],s[N];inline void init()&#123; for(ri i=0;i&lt;=n;++i)&#123; C[i][0]=1; for(ri j=1;j&lt;=i;++j)C[i][j]=add(C[i-1][j-1],C[i-1][j]); &#125;&#125;signed main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),K=read(),mod=read(); init(); s[1]=f[1][0]=1; for(ri i=2;i&lt;=n;++i)&#123; for(ri j=1;j&lt;=K;++j)&#123; for(ri k=1;k&lt;i;++k)Add(f[i][j],mul(mul(f[i-k][j-1],s[k]),C[i-2][k-1])); if(j&lt;K)Add(s[i],f[i][j]); &#125; &#125; int res=0; for(ri i=1;i&lt;=n;++i)for(ri j=0;j&lt;=K;++j)for(ri k=0;j+k&lt;=K;k?++k:k+=2)Add(res,mul(f[i][j],f[n-i+1][k])); cout&lt;&lt;mul(mul(res,2),mul(n,n-1)); return 0;&#125; Path Counting 解题思路： 笔者想出了一个暴力做法，即考虑利用 lcalcalca 枚举路径，然后用 mttmttmtt 优化做到 O(n2log⁡n)O(n^2\\log n)O(n2logn) 下面是正经做法： 考虑对于每条路径从端点处求方案数，设 fi,jf_{i,j}fi,j​ 表示从深度 iii 的某个点开始向下走 jjj 步的方案数， gi,jg_{i,j}gi,j​ 表示从某个深度为 iii 的点开始至少向上走一步总共走 jjj 步的方案数 显然有： fi,j=fi+1,j−1×ai+1,gi,j=gi−1,j−1+fi,j−2×(ai−1−1)f_{i,j}=f_{i+1,j-1}\\times a_i+1,g_{i,j}=g_{i-1,j-1}+f_{i,j-2}\\times (a_{i-1}-1)fi,j​=fi+1,j−1​×ai​+1,gi,j​=gi−1,j−1​+fi,j−2​×(ai−1​−1) 直接开两个数组会 MLEMLEMLE ，因此先求 fff 再求 ggg CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef pair&lt;int,ll&gt; pil;typedef unsigned long long Ull;typedef unsigned int uii;typedef set&lt;int&gt;::iterator It;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;const int N=5005;int n,a[N],b[N],f[N][N&lt;&lt;1],cur=0,ans[N&lt;&lt;1];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); b[1]=1; for(ri i=1;i&lt;n;++i)a[i]=read(),b[i+1]=mul(b[i],a[i]); f[n][0]=1; for(ri i=n-1;i;--i)&#123; f[i][0]=1; for(ri j=0,up=n-i;j&lt;up;++j)&#123; f[i][j+1]=mul(f[i+1][j],a[i]); Add(ans[j+1],mul(f[i][j+1],b[i])); &#125; &#125; for(ri i=1;i&lt;=n;++i)&#123; for(ri j=n+i-2;j;--j)&#123; f[i][j]=f[i-1][j-1]; if(j&gt;1&amp;&amp;i!=1)Add(f[i][j],mul(a[i-1]-1,f[i][j-2])); Add(ans[j],mul(f[i][j],b[i])); &#125; &#125; for(ri iv=mod+1&gt;&gt;1,i=1;i&lt;=n*2-2;++i)cout&lt;&lt;mul(ans[i],iv)&lt;&lt;' '; return 0;&#125; How many trees? 解题思路： 该题可以将数据加强到 n=400n=400n=400 考虑设 fi,jf_{i,j}fi,j​ 表示 iii 个点深度为 jjj 的树的方案数，显然可以枚举左右儿子的 sizsizsiz 转移，利用前缀和优化能够做到 O(n3)O(n^3)O(n3) CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;bits/stdc++.h&gt;#define ri int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a&lt;b?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=a+b&lt;mod?a+b:a+b-mod;&#125; inline void Dec(int&amp;a,int b)&#123;a=a&lt;b?a-b+mod:a-b;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;const int N=40;int n,m;ll f[N][N],g[N][N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); g[0][0]=g[1][1]=f[0][0]=f[1][1]=g[1][0]=1; for(ri i=2;i&lt;=n;++i)&#123; for(ri j=1;j&lt;=i;++j)for(ri k=0;k&lt;i;++k) f[i][j]+=f[k][j-1]*(g[i-k-1][0]-g[i-k-1][j])*2-f[k][j-1]*f[i-k-1][j-1]; g[i][i]=f[i][i]; for(ri j=i-1;~j;--j)g[i][j]=g[i][j+1]+f[i][j]; &#125; cout&lt;&lt;g[n][m]; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round2","slug":"sol2","date":"2019-10-28T14:56:09.000Z","updated":"2019-12-24T23:53:02.041Z","comments":true,"path":"sol2/","link":"","permalink":"http://ldxcaicai.github.io/sol2/","excerpt":"","text":"吉夫特 解题思路： 显然用 lucaslucaslucas 定理转化一下条件，可以转化成相邻两项的关系，然后有了无脑的 70pts70pts70pts 暴力：设 fif_ifi​ 表示以第 iii 个数结尾的方案数，直接暴力 checkcheckcheck 即可： CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=3e5+5;int f[N],a[N],n;inline bool check(int a,int b)&#123; for(ri i=30;~i;--i)if((a&gt;&gt;i&amp;1)&lt;(b&gt;&gt;i&amp;1))return 0; return 1;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); int res=0; for(ri i=1;i&lt;=n;++i)&#123; a[i]=read(); f[i]=1; for(ri j=1;j&lt;i;++j)if(check(a[j],a[i]))Add(f[i],f[j]); Add(res,dec(f[i],1)); &#125; cout&lt;&lt;res; return 0;&#125; 然后考虑优化 然后考虑优化，发现可以设 fif_ifi​ 表示当前选择序列的结尾的数为 iii 的合法方案数，然后枚举子集转移更新即可 这样做是询问 O(1)O(1)O(1) ，修改 O(218)O(2^{18})O(218) 的，不过已经能够通过了 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=3e5+5;int f[N],n;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); int res=0; for(ri x,t,i=1;i&lt;=n;++i)&#123; x=read(); t=add(f[x],1); for(ri s=x;s;s=(s-1)&amp;x)Add(f[s],t); Add(res,dec(t,1)); &#125; cout&lt;&lt;res; return 0;&#125; 考虑继续优化 发现可以通过分块摊下复杂度，即设 fi,jf_{i,j}fi,j​ 表示当前选择序列的结尾的前 292^929 位等于 iii ，后 292^929 为 jjj 的子集的方案数，这样复杂度是 O(n∗29)O(n*2^9)O(n∗29) 的 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=3e5+5;int f[1&lt;&lt;9|5][1&lt;&lt;9|5],n;inline int query(int x)&#123; int a=x&gt;&gt;9,b=x&amp;511,c=511^b; int res=0; for(ri s=c;;s=(s-1)&amp;c)&#123; Add(res,f[a][s^b]); if(!s)break; &#125; return res;&#125;inline void update(int x,int t)&#123; int a=x&gt;&gt;9,b=x&amp;511; for(ri s=a;;s=(s-1)&amp;a)&#123; Add(f[s][b],t); if(!s)break; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); int res=0; for(ri x,t,i=1;i&lt;=n;++i)&#123; x=read(); t=add(query(x),1); update(x,t); Add(res,dec(t,1)); &#125; cout&lt;&lt;res; return 0;&#125; 游览计划 解题思路： 使用斯坦纳树的思想，不过这道题给出的是点权，因此转移如下： fp,s=min⁡{fp,t+fp,s⊕t−valuep}f_{p,s}=\\min\\{f_{p,t}+f_{p,s\\oplus t}-value_p\\}fp,s​=min{fp,t​+fp,s⊕t​−valuep​} fp,s=min⁡{fv,s+dist(p,v)}f_{p,s}=\\min\\{f_{v,s}+dist(p,v)\\}fp,s​=min{fv,s​+dist(p,v)} 然后顺便要记录并输出方案 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;//using namespace modular;int dx[]=&#123;0,0,1,-1&#125;;int dy[]=&#123;1,-1,0,0&#125;;const int N=15,S=1&lt;&lt;10|5;int d[N][N][S],n,m,K,ct=0,vl[N][N],tr[N][N],all;struct Node&#123;int x,y,s;&#125;pre[N][N][S];set&lt;pair&lt;pii,int&gt; &gt;q;inline void dijkstra(int s)&#123; while(q.size())&#123; pii v,x=q.begin()-&gt;fi; q.erase(q.begin()); for(ri i=0;i&lt;4;++i)&#123; v=pii(x.fi+dx[i],x.se+dy[i]); if(d[v.fi][v.se][s]&gt;d[x.fi][x.se][s]+vl[v.fi][v.se])&#123; if(d[v.fi][v.se][s]!=d[0][0][0])q.erase(make_pair(v,d[v.fi][v.se][s])); d[v.fi][v.se][s]=d[x.fi][x.se][s]+vl[v.fi][v.se]; pre[v.fi][v.se][s]=(Node)&#123;x.fi,x.se,s&#125;; q.insert(make_pair(v,d[v.fi][v.se][s])); &#125; &#125; &#125;&#125;bool vs[N][N];inline void getprint(int x,int y,int s)&#123; if(!x)return; vs[x][y]=1; getprint(pre[x][y][s].x,pre[x][y][s].y,pre[x][y][s].s); if(pre[x][y][s].x==x&amp;&amp;pre[x][y][s].y==y)getprint(x,y,(pre[x][y][s].s^s)|tr[x][y]);&#125;inline void print()&#123; for(ri i=1;i&lt;=n;++i,puts(\"\"))for(ri j=1;j&lt;=m;++j)&#123; if(tr[i][j])cout&lt;&lt;'x'; else if(vs[i][j])cout&lt;&lt;'o'; else cout&lt;&lt;'_'; &#125; exit(0);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)&#123; for(ri j=1;j&lt;=m;++j)&#123; vl[i][j]=read(); if(!vl[i][j])&#123; ++ct; tr[i][j]=1&lt;&lt;(ct-1); &#125; &#125; &#125; all=(1&lt;&lt;ct)-1; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)memset(d[i][j],0x3f,sizeof(int)*(all+3)); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)if(tr[i][j])d[i][j][tr[i][j]]=0; d[0][0][0]=d[1][1][0]; for(ri s=0;s&lt;=all;++s)&#123; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; if(tr[i][j]&amp;&amp;!(tr[i][j]&amp;s))continue; for(ri t=(s-1)&amp;s,upd;t;t=(t-1)&amp;s)&#123; upd=d[i][j][t|tr[i][j]]+d[i][j][(s^t)|tr[i][j]]-vl[i][j]; if(d[i][j][s]&gt;upd)&#123; d[i][j][s]=upd; pre[i][j][s]=(Node)&#123;i,j,t|tr[i][j]&#125;; &#125; &#125; if(d[i][j][s]!=d[0][0][0])q.insert(make_pair(pii(i,j),d[i][j][s])); &#125; dijkstra(s); &#125; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)if(tr[i][j])&#123; cout&lt;&lt;d[i][j][all]&lt;&lt;'\\n'; getprint(i,j,all); print(); &#125; return 0;&#125; Umnozak 解题思路： 首先一打开题就有一个暴力的思路，枚举这个数由多少个 1,2,...,91,2,...,91,2,...,9 组成然后对于每种情况做数位 dpdpdp，但方案数较大，约在 106⋯10710^6\\cdots10^7106⋯107 的级别，无法通过此题 因此考虑到上述做法中较多方案的所有数位的乘积相同，进而想到只需要枚举乘积由多少个 2,3,5,72,3,5,72,3,5,7 组成即可，然后对每种方案进行数位 dpdpdp 就能够通过此题 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;//using namespace modular;ll L,R;int ct[10][4]=&#123; &#123;0,0,0,0&#125;, &#123;0,0,0,0&#125;, &#123;1,0,0,0&#125;, &#123;0,1,0,0&#125;, &#123;2,0,0,0&#125;, &#123;0,0,1,0&#125;, &#123;1,1,0,0&#125;, &#123;0,0,0,1&#125;, &#123;3,0,0,0&#125;, &#123;0,2,0,0&#125;&#125;;int vl[20],ctt[4],len;ll f[20][30][19][13][11];inline ll dfs(int ps,int*a,bool lim,bool zero)&#123; if(ps==0)return !zero&amp;&amp;!(a[0]+a[1]+a[2]+a[3]); if(!lim&amp;&amp;!zero&amp;&amp;~f[ps][a[0]][a[1]][a[2]][a[3]])return f[ps][a[0]][a[1]][a[2]][a[3]]; ll res=0; if(zero)res+=dfs(ps-1,a,0,1); for(ri ff,i=1,up=lim?vl[ps]:9;i&lt;=up;++i)&#123; ff=1; for(ri j=0;j&lt;4;++j)if(ct[i][j]&gt;a[j])&#123; ff=0; break; &#125; if(!ff)continue; for(ri j=0;j&lt;4;++j)a[j]-=ct[i][j]; res+=dfs(ps-1,a,lim&amp;&amp;i==up,0); for(ri j=0;j&lt;4;++j)a[j]+=ct[i][j]; &#125; if(!lim&amp;&amp;!zero)f[ps][a[0]][a[1]][a[2]][a[3]]=res; return res;&#125;inline void init(ll tp)&#123; len=0; while(tp)vl[++len]=tp%10,tp/=10;&#125;inline ll solve(ll x)&#123; if(!x)return 0; if(x==1)return 1; ll up=min(x,1000000000ll); ctt[0]=0; ll res=0; memset(f,-1,sizeof(f)); for(ll mt1=1;;mt1*=2,++ctt[0])&#123; ctt[1]=0; for(ll mt2=mt1;;mt2*=3,++ctt[1])&#123; ctt[2]=0; for(ll mt3=mt2;;mt3*=5,++ctt[2])&#123; ctt[3]=0; for(ll mt4=mt3;;mt4*=7,++ctt[3])&#123; init(x/mt4); res+=dfs(len,ctt,1,1); if(up/7&lt;mt4)break; &#125; if(up/5&lt;mt3)break; &#125; if(up/3&lt;mt2)break; &#125; if(up/2&lt;mt1)break; &#125; return res;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif cin&gt;&gt;L&gt;&gt;R; cout&lt;&lt;solve(R)-solve(L-1); return 0;&#125; Ksenia and Combinatorics 解题思路： 首先通过归纳可以证明出如下结论： 对于树的匹配，设 fi,0/1f_{i,0/1}fi,0/1​ 表示对于 iii 的子树用/不用根能得到的最大匹配数，那么有 fi,0≤fi,1≤fi,0+1f_{i,0}\\le f_{i,1}\\le f_{i,0}+1fi,0​≤fi,1​≤fi,0​+1 因此可以定义如下状态: fi,j,0/1f_{i,j,0/1}fi,j,0/1​ 表示 iii 个点的树，最大匹配数为 jjj ，用根进行匹配的最大匹配数减去不用根进行匹配的最大匹配数的值为 0/10/10/1 时的方案数，转移比较自然，因此不一一赘述 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7,inv2=5e8+4; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=55;int n,K,f[N][N][2],C[N][N];inline void init()&#123; for(ri i=0;i&lt;=n;++i)&#123; C[i][0]=1; for(ri j=1;j&lt;=i;++j)C[i][j]=add(C[i-1][j],C[i-1][j-1]); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),K=read(); f[0][0][1]=f[1][0][0]=1; init(); for(ri i=2,t;i&lt;=n;++i)for(ri j=0;j&lt;=K&amp;&amp;j+j&lt;=i;++j)&#123; for(ri k=0;k+k+1&lt;=i;++k)&#123; t=mul(mul(k+k+1==i?inv2:1,C[i-1][k]),mul(max(k,1),i-k-1)); for(ri p=0;p&lt;=j&amp;&amp;p+p&lt;=k;++p)&#123; Add(f[i][j][0],mul(t,mul(f[k][p][1],f[i-k-1][j-p][1]))); if(j==p)continue; Add(f[i][j][1],mul(t,mul(f[k][p][0],f[i-k-1][j-p-1][0]))); Add(f[i][j][1],mul(t,mul(f[k][p][1],f[i-k-1][j-p-1][0]))); Add(f[i][j][1],mul(t,mul(f[k][p][0],f[i-k-1][j-p-1][1]))); &#125; &#125; &#125; cout&lt;&lt;add(f[n][K][0],f[n][K][1]); return 0;&#125; isn 解题思路： 首先用 bitbitbit 辅助求出 fi,jf_{i,j}fi,j​ 表示以 iii 结尾的长度为 jjj 的不降序列方案数，进而统计出 gig_igi​ 表示长度为 iii 的不降序列的方案数 然后进行简单容斥来求答案 假设对于 gig_igi​ 中每个方案添上任意一个数都会不满足不降，那么 Ans=∑i=1ngi×(n−i)!Ans=\\sum\\limits_{i=1}^ng_i\\times(n-i)!Ans=i=1∑n​gi​×(n−i)! ，但现在会算入添上一个数之后仍然不降的方案数，于是扣掉 ∑i=1ngi+1×(n−i+1)!×(i+1)\\sum\\limits_{i=1}^ng_{i+1}\\times(n-i+1)!\\times(i+1)i=1∑n​gi+1​×(n−i+1)!×(i+1) 即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=2005;int a[N],n,cur,f[2][N],g[N],vl[N],sig;inline int find(int x)&#123;return lower_bound(vl+1,vl+sig+1,x)-vl;&#125;int bit[N];inline int lowbit(int x)&#123;return x&amp;-x;&#125;inline void update(int x,int v)&#123;for(;x&lt;=n;x+=lowbit(x))Add(bit[x],v);&#125;inline int query(int x)&#123;int res=0;for(;x;x^=lowbit(x))Add(res,bit[x]);return res;&#125;int fac[N];inline void init()&#123; fac[0]=fac[1]=1; for(ri i=2;i&lt;=n;++i)fac[i]=mul(fac[i-1],i);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); init(); for(ri i=1;i&lt;=n;++i)a[i]=vl[++sig]=read(); sort(vl+1,vl+sig+1),sig=unique(vl+1,vl+sig+1)-vl-1; for(ri i=1;i&lt;=n;++i)a[i]=find(a[i]); cur=0; update(1,1); for(ri len=1;len&lt;=n;++len)&#123; cur^=1; for(ri i=1;i&lt;=n;++i)&#123; f[cur][i]=query(a[i]); update(a[i],f[cur^1][i]); Add(g[len],f[cur][i]); &#125; for(ri i=1;i&lt;=n;++i)bit[i]=0; &#125; int res=0; for(ri i=1;i&lt;=n;++i)Mul(g[i],fac[n-i]); for(ri i=1;i&lt;=n;++i)&#123; Dec(g[i],mul(g[i+1],i+1)); Add(res,g[i]); &#125; cout&lt;&lt;res; return 0;&#125; 神经网络 解题思路： 首先转化题意，相当于是把每棵树拆成若干条链然后把链缩成点求若干排点之间的哈密顿回路数（同一排点之间不能连边），这样对每棵树树形 dpdpdp 出 fif_{i}fi​ 表示把整棵树拆成 iii 条链的方案数，然后考虑如何求答案，发现可以利用连通块容斥，即强制某一排中的某些链一定连通来容斥，如果将哈密顿回路的遍历映射到序列上，则相当于是一个连续段都属于同一排这样的不合法方案数，直接枚举段与段之间的空隙来进行容斥即可。 然后现在要将所有树给合起来，用 EGFEGFEGF 搞即可，注意第一棵树有限制条件：第一个和最后一个不能是同一排的 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef unsigned int uii;typedef unsigned long long Ull;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353,inv2=499122177; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a-b&lt;0?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;const int N=5005;int m,n,f[N][N][3],fac[N],ifac[N],siz[N],tmp[N][3];poly res(1,1);vector&lt;int&gt;e[N];int *tv,*tp;void dfs(int p,int ft)&#123; f[p][1][0]=1,siz[p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; dfs(v,p); for(ri j=0;j&lt;=siz[v]+siz[p];++j)tmp[j][0]=tmp[j][1]=tmp[j][2]=0; for(ri j=0;j&lt;=siz[v];++j)if(f[v][j][0]||f[v][j][1]||f[v][j][2])&#123; tv=f[v][j]; for(ri k=0;k&lt;=siz[p];++k)if(f[p][k][0]||f[p][k][1]||f[p][k][2])&#123; tp=f[p][k]; for(ri a=0;a&lt;3;++a)for(ri b=0;b&lt;3;++b)Add(tmp[j+k][a],mul(tp[a],tv[b])); Add(tmp[j+k-1][1],mul(tp[0],tv[1])); Add(tmp[j+k-1][2],mul(mul(inv2,tp[1]),tv[1])); Add(tmp[j+k-1][1],mul(mul(2,tp[0]),tv[0])); Add(tmp[j+k-1][2],mul(tp[1],tv[0])); &#125; &#125; for(ri j=0;j&lt;=siz[v]+siz[p];++j)&#123; f[p][j][0]=tmp[j][0]; f[p][j][1]=tmp[j][1]; f[p][j][2]=tmp[j][2]; &#125; siz[p]+=siz[v]; &#125;&#125;inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=5000;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=5000;++i)Mul(ifac[i],ifac[i-1]);&#125;inline int C(int n,int m)&#123;return mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;inline poly operator*(poly a,poly b)&#123; int n=a.size(),m=b.size(),t=n+m-1; poly c(t); for(ri i=0;i&lt;n;++i)if(a[i]) for(ri j=0;j&lt;m;++j)if(b[j]) Add(c[i+j],mul(a[i],b[j])); return c;&#125;inline void update(int dt)&#123; poly ad(n+1); for(ri t,s,sz=1;sz&lt;=n;++sz)&#123; s=mul(fac[sz-dt],add(add(f[1][sz][0],f[1][sz][1]),f[1][sz][2])); for(ri i=1;i&lt;=sz;++i)&#123; t=mul(C(sz-1,i-1),s); t=(sz-i)&amp;1?mod-t:t; Add(ad[i-dt],t); if(dt&amp;&amp;i&gt;1)Dec(ad[i-2],t); &#125; &#125; for(ri i=0;i&lt;ad.size();++i)Mul(ad[i],ifac[i]); res=res*ad;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif m=read(); init(); for(ri tt=1;tt&lt;=m;++tt)&#123; n=read(); for(ri i=1;i&lt;=n;++i)&#123; e[i].clear(); for(ri j=1;j&lt;=n;++j)&#123; f[i][j][0]=0; f[i][j][1]=0; f[i][j][2]=0; &#125; &#125; for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v); e[v].pb(u); &#125; dfs(1,0); update(tt==1); &#125; int ans=0; for(ri i=0;i&lt;res.size();++i)Add(ans,mul(res[i],fac[i])); cout&lt;&lt;ans; return 0;&#125; 侦查守卫 解题思路： 考虑 fi,jf_{i,j}fi,j​ 表示将 iii 子树中关键点覆盖完且能向 iii 子树外覆盖 jjj 单位距离的最小代价， gi,jg_{i,j}gi,j​ 表示 iii 子树中只剩下跟 iii 距离小于 jjj 的关键点未覆盖的最小权值，然后有显然的转移，这里不一一赘述，要提到的则是可能在儿子对父亲进行更新之后出现 fi,j&gt;fi,j+1f_{i,j}&gt;f_{i,j+1}fi,j​&gt;fi,j+1​ 或者 gi,j&gt;gi,j−1g_{i,j}&gt;g_{i,j-1}gi,j​&gt;gi,j−1​ 的情况，因此要把两个状态的定义加上最少和至多的限制，然后前后缀进行更新 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() getchar()typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;const int N=5e5+5,inf=0x3f3f3f3f,D=22;vector&lt;int&gt;e[N];bool is[N];int n,m,d,a[N],f[N][D],g[N][D];void dfs(int p,int ft)&#123; if(is[p])f[p][0]=g[p][0]=a[p]; for(ri i=1;i&lt;=d;++i)f[p][i]=a[p]; f[p][d+1]=inf; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; dfs(v,p); for(ri j=d;~j;--j)f[p][j]=min(f[p][j]+g[v][j],g[p][j+1]+f[v][j+1]); for(ri j=d;~j;--j)ckmin(f[p][j],f[p][j+1]); g[p][0]=f[p][0]; for(ri j=1;j&lt;=d;++j)g[p][j]+=g[v][j-1]; for(ri j=1;j&lt;=d;++j)ckmin(g[p][j],g[p][j-1]); &#125; ckmin(g[p][d+1],g[p][d]);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),d=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); m=read(); for(ri i=1;i&lt;=m;++i)is[read()]=1; for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v); e[v].pb(u); &#125; dfs(1,0); cout&lt;&lt;f[1][0]; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"杂题乱做 Round1","slug":"sol1","date":"2019-10-17T03:28:59.000Z","updated":"2019-12-27T06:48:30.602Z","comments":true,"path":"sol1/","link":"","permalink":"http://ldxcaicai.github.io/sol1/","excerpt":"","text":"线段树 解题思路： 考虑到如果统计统计 fi,jf_{i,j}fi,j​ 表示第 iii 个位置的数最终等于 jjj 的概率，然后对于一个位置 iii 答案就是 ∑jfi,jvlj\\sum\\limits_{j}f_{i,j}vl_jj∑​fi,j​vlj​ ，然后就能够进行转化，变为求每个位置最终 ≥j\\ge j≥j 的概率，然后就能够枚举每个排名然后对笛卡尔树的一些子树进行如下 dpdpdp : 对于一个树根，设其能够管辖的范围为 [l,r][l,r][l,r] ，那么最后区间 [i≥l,j≤r][i\\ge l,j\\le r][i≥l,j≤r] 中的数的大小不超过树根大小的概率可以 dpdpdp 出来，设 fT,i,jf_{T,i,j}fT,i,j​ 表示在上界 xxx 确定后，在经过 TTT 轮操作后区间 [i,j][i,j][i,j] 的答案不超过 xxx 的概率，这个直接前缀和优化转移即可，由于数据随机，笛卡尔树高可以视为 logloglog 的，这样复杂度就是对的 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127#include&lt;bits/stdc++.h&gt;#define ri register int#define csi const int&amp;#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(ch!='*'&amp;&amp;ch!='.')ch=gc(); while(ch=='*'||ch=='.')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int N=405;int n,m,L[N],R[N],cur=0,trans[N][N],vl[N],sig,ori[N],mx[N][N];int f[2][N][N],res[N][N];inline int calc(int x)&#123;return x*(x+1)/2;&#125;inline int find(int x)&#123;return lower_bound(vl+1,vl+sig+1,x)-vl;&#125;inline void init()&#123; for(ri i=1;i&lt;=n;++i)ori[i]=find(ori[i]); ori[0]=ori[n+1]=sig+1; for(ri a=1;a&lt;=n;++a)for(ri b=a;b&lt;=n;++b)&#123; mx[a][b]=max(mx[a][b-1],ori[b]); trans[a][b]=calc(a-1)+calc(b-a+1)+calc(n-b); &#125;&#125;inline void clear(int l,int r)&#123; cur^=1; for(ri i=l;i&lt;=r;++i)for(ri j=i;j&lt;=r;++j) f[cur][i][j]=0;&#125;inline void solve(int l,int r,int t)&#123; int transum; clear(l,r); f[cur][l][r]=1; for(ri T=1;T&lt;=m;++T)&#123; cur^=1; for(ri a=l;a&lt;=r;++a)for(ri b=a;b&lt;=r;++b) f[cur][a][b]=mul(f[cur^1][a][b],trans[a][b]); for(ri b=l;b&lt;=r;++b)&#123; transum=0; for(ri a=l;a&lt;=b;++a)&#123; Add(f[cur][a][b],transum); Add(transum,mul(f[cur^1][a][b],a-1)); &#125; &#125; for(ri a=r;a&gt;=l;--a)&#123; transum=0; for(ri b=r;b&gt;=a;--b)&#123; Add(f[cur][a][b],transum); Add(transum,mul(f[cur^1][a][b],n-b)); &#125; &#125; &#125; for(ri b=l;b&lt;=r;++b)&#123; transum=0; for(ri a=l;a&lt;=b;++a)&#123; Add(transum,f[cur][a][b]); Add(res[a][t],transum); &#125; &#125;&#125;int stk[N],tp;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); freopen(\"own.out\",\"w\",stdout); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)ori[i]=vl[i]=read(); sort(vl+1,vl+n+1),sig=unique(vl+1,vl+n+1)-vl-1; init(); for(ri rk=1;rk&lt;=sig;++rk)&#123; tp=0; for(ri i=0;i&lt;=n+1;++i)if(ori[i]&gt;rk)stk[++tp]=i; for(ri i=1;i&lt;tp;++i)&#123; if(mx[stk[i]+1][stk[i+1]-1]&lt;rk)&#123; for(ri ps=stk[i]+1;ps&lt;=stk[i+1]-1;++ps) Add(res[ps][rk],res[ps][rk-1]); &#125; else solve(stk[i]+1,stk[i+1]-1,rk); &#125; &#125; for(ri p=1,sum;p&lt;=n;++p,sum=0)&#123; for(ri rk=1;rk&lt;=sig;++rk) Add(sum,mul(vl[rk],dec(res[p][rk],res[p][rk-1]))); cout&lt;&lt;sum&lt;&lt;' '; &#125; return 0;&#125; 愤怒的元首 解题思路： DAGDAGDAG 计数一般考虑入度为 000 或者出度为 000 的点来进行容斥，因为删掉这些点和它们涉及到的边之后还是个 DAGDAGDAG 设 fif_{i}fi​ 表示 iii 个点的 DAGDAGDAG 方案数， gig_igi​ 为至少有 iii 个出度为 000 的点的方案数，显然有转移 gj=fi−j(ij)2j×(i−j)g_j=f_{i-j}\\binom{i}{j}2^{j\\times(i-j)}gj​=fi−j​(ji​)2j×(i−j) 和 fi=∑j=1igj(−1)j−1f_i=\\sum\\limits_{j=1}^ig_j(-1)^{j-1}fi​=j=1∑i​gj​(−1)j−1 这样可以 O(n2)O(n^2)O(n2) 搞定了 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include&lt;bits/stdc++.h&gt;#define ri register int#define csi const int&amp;#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(ch!='*'&amp;&amp;ch!='.')ch=gc(); while(ch=='*'||ch=='.')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int N=3005;int n,f[N],fac[N],ifac[N],pw[N*N];inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=n;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; pw[0]=1; for(ri i=1;i&lt;=n*n;++i)pw[i]=add(pw[i-1],pw[i-1]); for(ri i=2;i&lt;=n;++i)Mul(ifac[i],ifac[i-1]);&#125;inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); init(); f[0]=1; for(ri i=1;i&lt;=n;++i)for(ri t,j=1;j&lt;=i;++j)&#123; t=mul(f[i-j],mul(C(i,j),pw[j*(i-j)])); j&amp;1?Add(f[i],t):Dec(f[i],t); &#125; cout&lt;&lt;f[n]; return 0;&#125; numbers 解题思路： 考虑直接转化为求合法括号序列的方案数，这样对于现在的区间 [l,r][l,r][l,r] ，可以枚举 lll 的右括号放的位置然后转移成子区间求解，现在只用考虑合法性如何快速判断，发现是两个不相交的连续区间的信息叠加起来的，于是用二维前缀和来记录限制即可判断合法性 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;#define ri register int#define csi const int&amp;#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int N=305;int n,sum[N][N],m,f[N][N],tim[N][N],tot=0;inline int getsum(int x1,int x2,int y1,int y2)&#123; return sum[x2][y2]+sum[x1-1][y1-1]-sum[x2][y1-1]-sum[x1-1][y2];&#125;inline int dfs(int l,int r)&#123; if(l==r)return 1; if(tim[l][r]==tot)return f[l][r]; tim[l][r]=tot; f[l][r]=0; if(!getsum(l,l,l,r))Add(f[l][r],dfs(l+1,r)); for(ri i=l+1;i&lt;=r;++i)if(!getsum(i,r,l,i-1)&amp;&amp;!getsum(l,l,l,i-1)) Add(f[l][r],mul(i==l+1?1:dfs(l+1,i-1),dfs(i,r))); return f[l][r];&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; ++tot; n=read(),m=read(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=n;++j)sum[i][j]=0; for(ri a,b,i=1;i&lt;=m;++i)&#123; a=read(),b=read(); sum[a][b]=1; &#125; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=n;++j) sum[i][j]+=sum[i-1][j]+sum[i][j-1]-sum[i-1][j-1]; bool ff=1; for(ri i=1;i&lt;=n;++i)if(getsum(i,i,i,i))&#123; ff=0; break; &#125; if(!ff)puts(\"0\"); else cout&lt;&lt;dfs(1,n)&lt;&lt;'\\n'; &#125; return 0;&#125; Dark Horse 解题思路： 把比赛的表倒着画出来，发现是一棵二叉树，这样看来不妨把 111 放在第一个叶子结点最后方案数再乘上 2n2^n2n ，然后现在要求的是从第一个叶子到根的路径上不能有非法点，不难想到从大到小枚举非法点在路径上出现的状态，则 fi,jf_{i,j}fi,j​ 表示当前走到第 iii 个点，从叶子到根的必输位置集合为 jjj 的方案数，最后容斥一下即可（也可以像我一样在转移的时候就带入容斥系数） CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687#include&lt;bits/stdc++.h&gt;#define ri register int#define csi const int&amp;#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(ch!='*'&amp;&amp;ch!='.')ch=gc(); while(ch=='*'||ch=='.')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int N=1&lt;&lt;20|5;int n,m,all;int fac[N],ifac[N],pw[N],a[25],f[2][N],cur;inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=all;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=all;++i)Mul(ifac[i],ifac[i-1]); pw[0]=1; for(ri i=1;i&lt;=n;++i)pw[i]=pw[i-1]&lt;&lt;1;&#125;inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),all=1&lt;&lt;n; init(); for(ri i=1;i&lt;=m;++i)a[i]=read(); sort(a+1,a+m+1); f[cur=0][0]=1; for(ri ps=m;ps;--ps)&#123; cur^=1; for(ri s=0;s&lt;all;++s)f[cur][s]=f[cur^1][s]; for(ri s=0,trans;s&lt;all;++s)if(f[cur^1][s])&#123; trans=all-s-a[ps]; if(trans&gt;=0)for(ri i=0;i&lt;n;++i)if(!(s&amp;pw[i])) Dec(f[cur][s|pw[i]],mul(f[cur^1][s],mul(C(trans,pw[i]-1),fac[pw[i]]))); &#125; &#125; int res=0; for(ri s=0,t;s&lt;all;++s)Add(res,mul(f[cur][s],fac[all-s-1])); cout&lt;&lt;mul(res,all); return 0;&#125; Popping Balls 解题思路： 由于可以选 111 ，因为 s,ts,ts,t 只需要用于选出蓝球，这样可以考虑在 t,st,st,s 有用的时候才放置它俩上去（因为其余合法方案方案可以用这种方案选出），这样最后的序列一定长这样： 先有 xxx 个红球被选，然后在第一个蓝球位置处放下 ttt ，并选出这个蓝球 ，然后接下来选出的 是 aaa 个红球和 b−1b-1b−1 个蓝球随意排列（此时应满足 a+b=ma+b=ma+b=m 即使得 ttt 在之后的操作中失效），接着是 yyy 个红球被选出，然后在第一个蓝球位置处放下 sss ，并选出这个蓝球，然后接下来选出的是 ccc 个红球和 d−1d-1d−1 个蓝球随意排列（此时应满足 c+d=ac+d=ac+d=a 理由同 ttt 那部分），最后的 zzz 个球直接按照原序列放即可 然后可以考虑枚举 x,a,y,cx,a,y,cx,a,y,c 来计算贡献然后多半就TLE了 列出式子之后会发现这个四维的玩意儿后面两维的组合数和可以预处理二维前缀和优化，这样复杂度降为了 O(n2)O(n^2)O(n2) ，可以通过 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include&lt;bits/stdc++.h&gt;#define ri register int#define csi const int&amp;#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(ch!='*'&amp;&amp;ch!='.')ch=gc(); while(ch=='*'||ch=='.')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int N=2005;int n,m,C[N][N],g[N][N],f[N][N];inline void init(int up)&#123; for(ri i=0;i&lt;=up;++i)&#123; C[i][0]=1; for(ri j=1;j&lt;=i;++j) C[i][j]=add(C[i-1][j],C[i-1][j-1]); &#125; for(ri i=0;i&lt;=up;++i)&#123; g[i][0]=C[i][0]; for(ri j=1;j&lt;=up;++j)g[i][j]=add(g[i][j-1],C[i][j]); &#125; for(ri i=0;i&lt;=up;++i)&#123; f[0][i]=g[i][0]; for(ri j=1;j&lt;=up;++j)f[j][i]=add(f[j-1][i],g[i][j]); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); init(max(n,m)); int res=0; for(ri t1,t2,x=0;x&lt;=n;++x)for(ri a=0;a+x&lt;=n;++a)&#123; t1=C[m-1][a]; t2=a?f[n-a-x][a-1]:1; Add(res,mul(t1,t2)); &#125; cout&lt;&lt;res&lt;&lt;'\\n'; return 0;&#125; Placing Squares 解题思路： 首先转化模型，看成有一个 nnn 个点的序列，你要在空隙中插入挡板，把序列分成若干段，每段要放一个红球和一个蓝球，现在还有 mmm 个坐标 {xm}\\{x_m\\}{xm​} ，限制你不能在 xi,xi+1x_i,x_i+1xi​,xi​+1 之间放挡板，问方案数 那么可以设计 fi,0/1/2/3f_{i,0/1/2/3}fi,0/1/2/3​ 表示当前扫到了第 iii 个点，它在的段内没放球/放了红球/放了蓝球/放了两种球的方案数，这个可以在有无限制的情况下轻松设置转移，由于第一维较大，用矩阵快速幂优化即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;#define ri register int#define csi const int&amp;#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;struct Mat&#123; int a[4][4]; Mat(int v=0)&#123;for(ri i=0;i&lt;=3;++i)for(ri j=0;j&lt;=3;++j)a[i][j]=i==j?v:0;&#125; inline int*operator[](const int&amp;k)&#123;return a[k];&#125; inline const int*operator[](const int&amp;k)const&#123;return a[k];&#125; friend inline Mat operator*(Mat a,Mat b)&#123; Mat c; for(ri i=0;i&lt;=3;++i)for(ri k=0;k&lt;=3;++k)if(a[i][k]) for(ri j=0;j&lt;=3;++j)if(b[k][j])Add(c[i][j],mul(a[i][k],b[k][j])); return c; &#125; friend inline Mat operator^(Mat a,int p)&#123; Mat ret(1); for(;p;p&gt;&gt;=1,a=a*a)if(p&amp;1)ret=ret*a; return ret; &#125;&#125;trans1,trans2,res(1);int n,m;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif trans1[0][0]=2,trans1[0][1]=1,trans1[0][2]=1,trans1[0][3]=1; trans1[1][0]=1,trans1[1][1]=1,trans1[1][2]=0,trans1[1][3]=1; trans1[2][0]=1,trans1[2][1]=0,trans1[2][2]=1,trans1[2][3]=1; trans1[3][0]=1,trans1[3][1]=0,trans1[3][2]=0,trans1[3][3]=1; trans2[0][0]=1,trans2[0][1]=1,trans2[0][2]=1,trans2[0][3]=1; trans2[1][0]=0,trans2[1][1]=1,trans2[1][2]=0,trans2[1][3]=1; trans2[2][0]=0,trans2[2][1]=0,trans2[2][2]=1,trans2[2][3]=1; trans2[3][0]=0,trans2[3][1]=0,trans2[3][2]=0,trans2[3][3]=1; n=read(),m=read(); int las=1; for(ri i=1,x;i&lt;=m;++i)&#123; x=read(); if(i&gt;1)&#123; res=(trans1^(x-las-1))*trans2*res; &#125; else res=(trans1^(x-las))*res; las=x; &#125; if(m)res=(trans1^(n-las-1))*trans2*res; else res=trans1^(n-1); cout&lt;&lt;add(add(res[0][0],res[0][1]),add(res[0][2],res[0][3])); return 0;&#125; 随机二分图 解题思路： 容易想到去求每种匹配出现的概率，那么答案即为概率之和，现在考虑每类边出现在完美匹配的一个方案中的概率： 第一类边： 50%50\\%50% 第二类边： 每条边单独出现在一个方案中的概率为 50%50\\%50% ，但这样的话两条边一起出现的概率降为了 25%25\\%25% ，于是加入一个能连接四个点的边，其出现概率为 25%25\\%25% 第三类边： 每条边单独出现在一个方案中的概率为 50%50\\%50% ，但这样的话两条边一起出现的概率升为了 25%25\\%25% ，于是加入一个能连接四个点的边，其出现概率为 −25%-25\\%−25% 然后考虑把左右图的匹配情况压成一个状态进行转移，由于图没有顺序，每次强制匹配 lowbitlowbitlowbit 来转移即可，从终态倒着记忆化搜索会访问到很少的有用状态，可以通过此题 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125#include&lt;bits/stdc++.h&gt;#include&lt;tr1/unordered_map&gt;#define ri register int#define csi const int&amp;#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int inv2=5e8+4,inv4=inv2&gt;&gt;1;const int mogic=1e7+7;int first[mogic+5];struct edge&#123;int next,ori,vl;&#125;;vector&lt;edge&gt;E;int cnt=0;inline void add_(int u,int v)&#123; int t=u%mogic+1; ++cnt; E.pb((edge)&#123;first[t],u,v&#125;); first[t]=cnt;&#125;inline int query(int x)&#123; int t=x%mogic+1; for(ri i=first[t];i;i=E[i].next)&#123; if(E[i].ori==x)return E[i].vl; &#125; return -1;&#125;int n,m,pw[31];vector&lt;pii&gt;e[1&lt;&lt;15|5];inline int dfs(int sta)&#123; if(!sta)return 1; int t=query(sta); if(~t)return t; int res=0; int st=sta&amp;-sta; for(ri i=0,s;i&lt;e[st].size();++i)&#123; s=e[st][i].fi; if((sta&amp;s)!=s)continue; Add(res,mul(dfs(sta^s),e[st][i].se)); &#125; return add_(sta,res),res;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); E.pb((edge)&#123;0,0,0&#125;); for(ri i=0;i&lt;=2*n;++i)pw[i]=1&lt;&lt;i; for(ri op,x1,y1,x2,y2,i=1;i&lt;=m;++i)&#123; op=read(); x1=read()-1,y1=read()+n-1; switch(op)&#123; case 0:&#123; e[pw[x1]].pb(pii(pw[x1]^pw[y1],inv2)); break; &#125; case 1:&#123; e[pw[x1]].pb(pii(pw[x1]^pw[y1],inv2)); x2=read()-1,y2=read()+n-1; e[pw[x2]].pb(pii(pw[x2]^pw[y2],inv2)); if(x1!=x2&amp;&amp;y1!=y2)&#123; if(x1&gt;x2)swap(x1,x2),swap(y1,y2); e[pw[x1]].pb(pii(pw[x1]^pw[x2]^pw[y1]^pw[y2],inv4)); &#125; break; &#125; case 2:&#123; e[pw[x1]].pb(pii(pw[x1]^pw[y1],inv2)); x2=read()-1,y2=read()+n-1; e[pw[x2]].pb(pii(pw[x2]^pw[y2],inv2)); if(x1!=x2&amp;&amp;y1!=y2)&#123; if(x1&gt;x2)swap(x1,x2),swap(y1,y2); e[pw[x1]].pb(pii(pw[x1]^pw[x2]^pw[y1]^pw[y2],mod-inv4)); &#125; break; &#125; &#125; &#125; cout&lt;&lt;mul(dfs(pw[n+n]-1),pw[n]); return 0;&#125; Mod Mod Mod 解题思路： 一个数对一个比它小的数取模，最多取log次就会变成0。我们思考如何利用这个性质。 如果我们设 f[x][i]f[x][i]f[x][i] 表示题目中的 f(x,i)f(x,i)f(x,i) ，那么每次 iii 加一的时候我们都要更新所有的 fff 值。 但简单思考后可以发现答案容易表示成 i∗x+bi*x+bi∗x+b 的形式，那么可以设 Fi,numF_{i,num}Fi,num​ 就代表当 x≤numx\\le numx≤num 时，最大的 bbb 值。 下面考虑转移，对于 num≤ai−1num\\le a_i-1num≤ai​−1显然不用管，对于 num≥ainum\\ge a_inum≥ai​ ，有两种转移： Fi,num→Fi+1,num%aiF_{i,num}\\rightarrow F_{i+1,num\\%a_i}Fi,num​→Fi+1,num%ai​​ Fi,num→Fi+1,ai−1F_{i,num}\\rightarrow F_{i+1,a_i-1}Fi,num​→Fi+1,ai​−1​ 用 mapmapmap 维护转移即可，复杂度是 O(nlog⁡a1log⁡n)O(n\\log a_1\\log n)O(nloga1​logn) CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;#include&lt;tr1/unordered_map&gt;#define ri register int#define csi const int&amp;#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int N=2e5+5;map&lt;ll,ll&gt;f;int n;ll x,num,vl;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); f[readl()-1]=0; for(ri i=2;i&lt;=n;++i)&#123; x=readl(); while(f.size())&#123; num=f.rbegin()-&gt;fi; vl=f.rbegin()-&gt;se; if(num&lt;x)break; f.erase(num); ckmax(f[x-1],vl+(num-num%x-x)*(i-1)); ckmax(f[num%x],vl+(num-num%x)*(i-1)); &#125; &#125; ll res=0; for(map&lt;ll,ll&gt;::iterator it=f.begin();it!=f.end();++it) res=max(res,it-&gt;fi*n+it-&gt;se); cout&lt;&lt;res; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"题解","slug":"题解","permalink":"http://ldxcaicai.github.io/tags/%E9%A2%98%E8%A7%A3/"}]},{"title":"CodeForces gym 102059 简要题解","slug":"gym102059","date":"2019-10-16T23:47:42.000Z","updated":"2019-11-07T10:53:43.276Z","comments":true,"path":"gym102059/","link":"","permalink":"http://ldxcaicai.github.io/gym102059/","excerpt":"","text":"Coloring Roads 题意简述： 给一棵树，树边一开始都是无色的，每次操作可以把一个点到根的路径上所有边染成某个颜色，每次询问当前树上出现过某个次数的颜色种数 数据范围： 点数，操作数 ≤2×105\\le2\\times10^5≤2×105 解题思路： 这题做法还蛮多的，在这里简单记录一下： 树链剖分+单调栈：对于每条重链维护一个关于 dfsdfsdfs 序的单调递减栈从而维护答案，每次暴力修改，均摊分析复杂度是对的 树链剖分+ ODTODTODT ，由于有路径覆盖操作，因此可以用 ODTODTODT 简单维护答案，复杂度分析跟序列上是差不多的 LCTLCTLCT ，考虑到路径覆盖就是 LCTLCTLCT 在 accessaccessaccess 的时候顺带修改一下信息，因此每次改的时候 accessaccessaccess 即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;inline char gc()&#123; static char buf[rlen],*ib,*ob; (ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)); return ib==ob?-1:*ib++;&#125;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=4e5+5;set&lt;int&gt;S[N];int cnt[N];namespace lct&#123; #define lc (son[p][0]) #define rc (son[p][1]) int siz[N],fa[N],son[N][2],vl[N],col[N]; bool rev[N]; inline bool which(int x)&#123;return x==son[fa[x]][1];&#125; inline bool isroot(int x)&#123;return !fa[x]||(son[fa[x]][0]!=x&amp;&amp;son[fa[x]][1]!=x);&#125; inline void pushup(int p)&#123;siz[p]=siz[lc]+siz[rc]+vl[p];&#125; inline void pushnow(int p,int c)&#123;col[p]=c;&#125; inline void pushdown(int p)&#123;(lc&amp;&amp;(col[lc]=col[p])),(rc&amp;&amp;(col[rc]=col[p]));&#125; inline void rotate(int x)&#123; int y=fa[x],z=fa[y],t=which(x); if(!isroot(y))son[z][which(y)]=x; fa[x]=z,fa[y]=x,son[y][t]=son[x][t^1],son[x][t^1]=y; if(son[y][t])fa[son[y][t]]=y; pushup(y),pushup(x); &#125; inline void splay(int x)&#123; static int stk[N],top; stk[top=1]=x; for(ri i=x;!isroot(i);i=fa[i])stk[++top]=fa[i]; while(top)pushdown(stk[top--]); while(!isroot(x))&#123; if(!isroot(fa[x]))rotate(which(x)^which(fa[x])?x:fa[x]); rotate(x); &#125; &#125; inline void access(int x,int c)&#123; int p=x; for(ri y=0;x;x=fa[y=x])&#123; splay(x); son[x][1]=0; pushup(x); S[cnt[col[x]]].erase(col[x]); cnt[col[x]]-=siz[x]; S[cnt[col[x]]].insert(col[x]); son[x][1]=y; pushup(x); p=x; &#125; pushnow(p,c); S[cnt[col[p]]].erase(col[p]); cnt[col[p]]+=siz[p]; S[cnt[col[p]]].insert(col[p]); &#125; #undef lc #undef rc&#125;int n,C,m;vector&lt;int&gt;e[N];void dfs(int p,int fa)&#123; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==fa)continue; dfs(v,p); lct::fa[lct::fa[v]=v+n]=p; lct::siz[v+n]=lct::vl[v+n]=1; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),C=read(),m=read(); for(ri i=1;i&lt;=C;++i)S[0].insert(i); S[n-1].insert(0); cnt[0]=n-1; for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v),e[v].pb(u); &#125; dfs(1,0); for(ri x,c,k;m;--m)&#123; x=read(),c=read(),k=read(); lct::access(x,c); cout&lt;&lt;S[k].size()-(S[k].count(0)?1:0)&lt;&lt;'\\n'; &#125; return 0;&#125; Dev, Please Add This! 题意简述： 给一个 n∗mn*mn∗m 的网格图，一个格子是空地或墙，空地上可能有道具。你从一个位置出发，选一个方向然后一直按那个方向走直到碰到墙或边界。沿途的所有道具都会被收集，问能否收集所有道具。 数据范围： n,m≤50n,m\\le50n,m≤50 解题思路： 根据题意，每行每列都被边界和墙分成了很多小段，我们把这些段进行标号，那么对于一个道具，它被收集当且仅当它所在的行列分量至少有一个被选，于是想到用 2−sat2-sat2−sat 来进行这类限制，然后考虑剩下的限制，若从起点出发不能到达某个分量，那么最后它必须为 falsefalsefalse ，如果两个分量没有一个能到达另一个，那么就不能同时为 truetruetrue ，建完图之后用 2−sat2-sat2−sat 跑即可 合法性证明：考虑将建出来的图缩点，那么就变成了一张有向完全图，从一个入度为 000 的点出发找哈密顿回路，这个一定能构造出一组解 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef unsigned int uii;typedef unsigned long long Ull;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(ch!='O'&amp;&amp;ch!='#'&amp;&amp;ch!='.'&amp;&amp;ch!='*')ch=gc(); while(ch=='O'||ch=='#'||ch=='.'||ch=='*')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353,inv2=499122177; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a-b&lt;0?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;const int N=55,M=N*N*4;char s[N][N];int n,m,sig=0,col[M],stk[M],top=0;bool vs[M];vector&lt;int&gt;e[M];int tot=0,low[M],dfn[M];bool trans[M][M];void dfs(int p)&#123; dfn[p]=low[p]=++tot; stk[++top]=p; vs[p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if(dfn[v=e[p][i]])&#123; if(vs[v])low[p]=min(low[p],low[v]); continue; &#125; dfs(v),low[p]=min(low[p],low[v]); &#125; if(low[p]==dfn[p])&#123; ++sig; while(1)&#123; int x=stk[top--]; vs[x]=0; col[x]=sig; if(x==p)break; &#125; &#125;&#125;int idx1[N][N],idx2[N][N],cnt=0;inline void gettrans(int p,int rt)&#123; trans[rt][p]=1; for(ri i=0;i&lt;e[p].size();++i) if(!trans[rt][e[p][i]])gettrans(e[p][i],rt);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)Read(s[i]); for(ri i=0;i&lt;=n+1;++i)s[i][0]=s[i][m+1]='#'; for(ri i=0;i&lt;=m+1;++i)s[0][i]=s[n+1][i]='#'; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; if(s[i][j-1]=='#'&amp;&amp;s[i][j]!='#')++cnt; idx1[i][j]=cnt; &#125; for(ri i=1;i&lt;=m;++i)for(ri j=1;j&lt;=n;++j)&#123; if(s[j-1][i]=='#'&amp;&amp;s[j][i]!='#')++cnt; idx2[j][i]=cnt; &#125; ++cnt; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)&#123; if(s[i][j]=='#')continue; if(s[i][j-1]=='#'||s[i][j+1]=='#')e[idx1[i][j]].pb(idx2[i][j]); if(s[i-1][j]=='#'||s[i+1][j]=='#')e[idx2[i][j]].pb(idx1[i][j]); if(s[i][j]=='O')e[cnt].pb(idx1[i][j]),e[cnt].pb(idx2[i][j]); &#125; for(ri i=1;i&lt;=cnt;++i)gettrans(i,i); for(ri i=1;i&lt;=cnt;++i)e[i].clear(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)if(s[i][j]=='*')&#123; e[idx1[i][j]].pb(idx2[i][j]+cnt); e[idx2[i][j]].pb(idx1[i][j]+cnt); &#125; for(ri i=1;i&lt;cnt;++i)if(!trans[cnt][i])e[i+cnt].pb(i); for(ri i=1;i&lt;cnt;++i)for(ri j=i+1;j&lt;cnt;++j)if(!trans[i][j]&amp;&amp;!trans[j][i])&#123; e[i+cnt].pb(j); e[j+cnt].pb(i); &#125; for(ri i=1;i&lt;cnt*2;++i)if(!dfn[i])dfs(i); for(ri i=1;i&lt;cnt;++i)if(col[i]==col[i+cnt])&#123; puts(\"NO\"); return 0; &#125; puts(\"YES\"); return 0;&#125; Dstorv 题意简述： 数轴上排列着 nnn 个左/右箭头，每个箭头都会以相同速度朝着各自方向移动。当一个左箭头和一个右箭头相遇时有概率 ppp 使得其中左箭头消失， 1−p1-p1−p 概率使右箭头消失，问最后剩下 aaa 个右箭头和 bbb 个左箭头的概率。 数据范围： n≤5000n\\le5000n≤5000 解题思路： 对于每一种合法方案，对应着在最右的左箭头和最左的右箭头之间划一道分界线，然后分界线左侧的右箭头全部 gggggg ，分界线右侧的左箭头全部 gggggg ，这样如果统计出分界线左右部分合法的概率就可以枚举分界线统计答案 现在考虑如何求概率，设 fi,jf_{i,j}fi,j​ 表示从左到右处理到第 iii 个箭头，最后会从右边来 jjj 个左箭头进行支援，最后剩下 bbb 个左箭头的概率，然后转移即可，右侧的转移同理 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;bits/stdc++.h&gt;#define int long long#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef unsigned int uii;typedef unsigned long long Ull;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a-b&lt;0?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;const int N=5005;int f[N][N],g[N][N],pa,pb,p,n,A,B;char s[N];signed main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),pa=read(),pb=read(); Mul(pa,Inv(pa+pb)); pb=dec(1,pa); Read(s); A=read(),B=read(); f[0][B]=1; for(ri i=1;i&lt;=n;++i)&#123; if(s[i]=='H')for(ri j=0;j&lt;n;++j)f[i][j]=f[i-1][j+1]; else for(ri j=1;j&lt;=n;++j)f[i][j]=add(mul(f[i][j-1],pb),mul(f[i-1][j],pa)); &#125; g[n+1][A]=1; for(ri i=n;i;--i)&#123; if(s[i]=='R')for(ri j=0;j&lt;n;++j)g[i][j]=g[i+1][j+1]; else for(ri j=1;j&lt;=n;++j)g[i][j]=add(mul(g[i][j-1],pa),mul(g[i+1][j],pb)); &#125; int res=0; for(ri i=0;i&lt;=n;++i)Add(res,mul(f[i][0],g[i+1][0])); cout&lt;&lt;res; return 0;&#125; Dumae 建拓扑图+贪心即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;#define gc getchartypedef long long ll;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int mod=1e9+7;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=3e5+5;int n,m,L[N],R[N],du[N],q[N],hd,tl,Du[N];vector&lt;int&gt;e[N];vector&lt;pii&gt;a[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)L[i]=read(),R[i]=read(); for(ri i=1,u,v;i&lt;=m;++i)&#123; u=read(),v=read(); e[u].pb(v),++du[v],++Du[v]; &#125; int cnt=n; hd=1,tl=0; for(ri i=1;i&lt;=n;++i)if(!du[i])q[++tl]=i; while(hd&lt;=tl)&#123; int x=q[hd++]; --cnt; for(ri i=0,v;i&lt;e[x].size();++i)&#123; --du[v=e[x][i]]; if(!du[v])q[++tl]=v; &#125; &#125; if(cnt)return puts(\"-1\"),0; for(ri p,i=n;i;--i)&#123; p=q[i]; for(ri j=0,v;j&lt;e[p].size();++j)R[p]=min(R[p],R[v=e[p][j]]-1); &#125; set&lt;pii&gt;S,qu; vector&lt;int&gt;ans; for(ri i=1;i&lt;=n;++i)if(!Du[i])&#123; if(L[i]==1)qu.insert(pii(R[i],i)); else S.insert(pii(L[i],i)); &#125; while(qu.size())&#123; int x=qu.begin()-&gt;se; qu.erase(qu.begin()); ++cnt; if(R[x]&lt;cnt)return puts(\"-1\"),0; ans.pb(x); while(S.size()&amp;&amp;S.begin()-&gt;fi&lt;=cnt+1)qu.insert(pii(R[S.begin()-&gt;se],S.begin()-&gt;se)),S.erase(S.begin()); for(ri i=0,v;i&lt;e[x].size();++i)&#123; --Du[v=e[x][i]]; if(!Du[v])&#123; if(L[v]&lt;=cnt+1)qu.insert(pii(R[v],v)); else S.insert(pii(L[v],v)); &#125; &#125; &#125; if(ans.size()!=n)return puts(\"-1\"),0; for(ri i=0;i&lt;ans.size();++i)cout&lt;&lt;ans[i]&lt;&lt;'\\n'; return 0;&#125; Electronic Circuit 逆向考虑然后按照题意模拟 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;#define gc getchartypedef long long ll;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int mod=1e9+7;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=1e5+5;set&lt;int&gt;e[N];bool ban[N];int n,m,cnt;inline void modify(int p)&#123; if(ban[p])return; if(e[p].size()^2)return; --cnt; ban[p]=1; int pre=*e[p].begin(),suf=*e[p].rbegin(); e[pre].erase(p); e[pre].insert(suf); e[suf].erase(p); e[suf].insert(pre); modify(pre),modify(suf);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); cnt=n; for(ri i=1,u,v;i&lt;=m;++i)&#123; u=read(),v=read(); e[u].insert(v); e[v].insert(u); &#125; for(ri i=1;i&lt;=n;++i)modify(i); puts(cnt==2?\"Yes\":\"No\"); return 0;&#125; Fake Plastic Trees 每次均分叶子给子树，记忆化一下就行了 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;#define gc getchartypedef long long ll;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int mod=1e9+7;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;vector&lt;ll&gt;vl;map&lt;ll,int&gt;idx;map&lt;ll,bool&gt;vs;inline void dfs(ll x)&#123; if(vs[x])return; vs[x]=1; vl.pb(x); if(x==1)return; dfs(x-(x&gt;&gt;1)),dfs(x&gt;&gt;1);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif ll x; int tot; for(ri tt=read();tt;--tt)&#123; x=readl(); vl.clear(); vs.clear(); dfs(x); sort(vl.begin(),vl.end()); idx.clear(); tot=-1; for(ri i=0;i&lt;vl.size();++i)idx[vl[i]]=++tot; cout&lt;&lt;tot+1&lt;&lt;'\\n'; cout&lt;&lt;-1&lt;&lt;' '&lt;&lt;-1&lt;&lt;'\\n'; for(ri i=1;i&lt;vl.size();++i)cout&lt;&lt;idx[vl[i]-(vl[i]&gt;&gt;1)]&lt;&lt;' '&lt;&lt;idx[vl[i]&gt;&gt;1]&lt;&lt;'\\n'; cout&lt;&lt;idx[vl.back()]&lt;&lt;'\\n'; &#125; return 0;&#125; Fascination Street 题意简述： 街道上有一排灯，一开始全灭，点亮每盏灯有一定代价，要求最后对于每个位置距离自己不超过 111 的灯至少点亮一盏。除此之外，有 kkk 次机会交换两盏，问最小代价。 数据范围： n≤250000,k≤9n\\le250000,k\\le9n≤250000,k≤9 解题思路： 一道比较有意思的亏欠型 dpdpdp ，考虑到交换的一定是一盏亮的和一盏灭的，可以定义状态 fi,0/1,0/1,x,yf_{i,0/1,0/1,x,y}fi,0/1,0/1,x,y​ 表示考虑到第 iii 盏灯，最后两盏灯的亮灭状态，现在已经换了 xxx 盏亮的灯， yyy 盏灭的灯，然后枚举当前灯亮不亮，换不换即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;#define gc getchartypedef long long ll;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int N=250005;int n,K,vl[N],cur=0;ll f[2][2][2][10][10],inf;inline void ckmin(ll&amp;x,ll y)&#123;x=x&lt;y?x:y;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),K=read(); for(ri i=1;i&lt;=n;++i)vl[i]=read(); memset(f[cur=0],0x3f,sizeof(f[0])); inf=f[cur][1][0][0][0],f[cur][1][0][0][0]=0; ll t; for(ri i=0;i&lt;n;++i)&#123; memset(f[cur^1],0x3f,sizeof(f[cur^1])); for(ri j=0;j&lt;2;++j)for(ri k=0;k&lt;2;++k)for(ri a=0;a&lt;=K;++a)for(ri b=0;b&lt;=K;++b)&#123; if(f[cur][j][k][a][b]==inf)continue; t=f[cur][j][k][a][b]; ckmin(f[cur^1][k][1][a][b],t+vl[i+1]); if(j|k)ckmin(f[cur^1][k][0][a][b],t); if(a&lt;K)ckmin(f[cur^1][k][1][a+1][b],t); if(b&lt;K&amp;&amp;(j|k))ckmin(f[cur^1][k][0][a][b+1],t+vl[i+1]); &#125; cur^=1; &#125; ll ans=inf; for(ri i=0;i&lt;2;++i)for(ri j=0;j&lt;2;++j)for(ri k=0;k&lt;=K;++k)if(i|j)ckmin(ans,f[cur][i][j][k][k]); cout&lt;&lt;ans; return 0;&#125; Fractions 暴力枚举即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;#define gc getcharinline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=1e9+7;typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=1e5+5;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif ll a,b,c,d,xl,xr,yl,yr,ans=0; cin&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d; for(ri j,i=1;i&lt;=1000;++i)&#123; j=1; for(;;++j)&#123; if(__gcd(i,j)!=1)continue; if(i+j&gt;=1000)break; xl=a%i?a/i+1:a/i,xr=b/i; yl=c%j?c/j+1:c/j,yr=d/j; if(max(xl,yl)&lt;=min(xr,yr))ans+=min(xr,yr)-max(xl,yl)+1; &#125; &#125; cout&lt;&lt;ans; return 0;&#125; Game on Plane 按照题意枚举断边，发现剩下两个成了子问题，于是用 SGSGSG 函数即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;#define gc getcharinline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=1e9+7;typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=5005;int n,a[N],sg[N];bool vis[N];inline void init()&#123; sg[2]=sg[3]=1; for(ri i=4;i&lt;=5000;++i)&#123; memset(vis,0,sizeof(vis)); for(ri j=0;j&lt;=i-2;++j)vis[sg[j]^sg[i-2-j]]=1; for(ri j=0;;++j)if(!vis[j])&#123;sg[i]=j;break;&#125; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init(); for(ri tt=read();tt;--tt)puts(sg[read()]?\"First\":\"Second\"); return 0;&#125; Histogram Sequence 二分+单调栈+堆即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128#include&lt;bits/stdc++.h&gt;#define int long long#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef unsigned int uii;typedef unsigned long long Ull;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(ch!='O'&amp;&amp;ch!='#'&amp;&amp;ch!='.'&amp;&amp;ch!='*')ch=gc(); while(ch=='O'||ch=='#'||ch=='.'||ch=='*')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353,inv2=499122177; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a-b&lt;0?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;const int N=300005;int n,a[N],pl[N],pr[N],stk[N],tp;ll L,R;inline void init()&#123; stk[tp=1]=pl[1]=1; for(ri i=2;i&lt;=n;++i)&#123; while(tp&amp;&amp;a[stk[tp]]&gt;=a[i])--tp; pl[i]=stk[tp]+1; stk[++tp]=i; &#125; stk[0]=n+1; stk[tp=1]=pr[n]=n; for(ri i=n-1;i;--i)&#123; while(tp&amp;&amp;a[stk[tp]]&gt;a[i])--tp; pr[i]=stk[tp]-1; stk[++tp]=i; &#125;&#125;inline ll calc(ll lm,ll len)&#123; ll s=max(1ll,len-lm+1); return (len+s)*(len-s+1)/2;&#125;inline ll calc(ll lm)&#123; ll res=0; for(ri i=1;i&lt;=n;++i)&#123; if(a[i]&gt;lm)continue; res+=calc(lm/a[i],pr[i]-pl[i]+1)-calc(lm/a[i],pr[i]-i)-calc(lm/a[i],i-pl[i]); &#125; return res;&#125;inline int calc(int p,int l,int r,int len)&#123; return max((r-l+1)-len+1,0ll)-max((r-p)-len+1,0ll)-max((p-l)-len+1,0ll);&#125;struct Node&#123; ll h,w; int id; Node(ll h=0,ll w=0,int id=0):h(h),w(w),id(id)&#123;&#125; friend inline bool operator&lt;(Node a,Node b)&#123;return a.h*a.w&gt;b.h*b.w;&#125;&#125;tmp;signed main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); L=readl(),R=readl(); init(); ll l=0,r=1e18,res=1e18; while(l&lt;=r)&#123; ll mid=l+r&gt;&gt;1; if(calc(mid)&gt;=L)r=mid-1,res=mid; else l=mid+1; &#125; ll lm=calc(res); while(L&lt;=R&amp;&amp;L&lt;=lm)&#123; ++L; cout&lt;&lt;res&lt;&lt;' '; &#125; priority_queue&lt;Node&gt;q; for(ri i=1;i&lt;=n;++i)q.push(Node(a[i],res/a[i]+1,i)); while(L&lt;=R)&#123; tmp=q.top(); q.pop(); int num=calc(tmp.id,pl[tmp.id],pr[tmp.id],tmp.w); if(!num)continue; while(num&amp;&amp;L&lt;=R)&#123; cout&lt;&lt;tmp.h*tmp.w&lt;&lt;' '; ++L; --num; &#125; ++tmp.w; q.push(tmp); &#125; return 0;&#125; Interesting Drug 题意简述： 一条路上按顺序有 nnn 瓶毒药，对于 i∈[1,n]i∈[1,n]i∈[1,n] ，求出如下的值：从 iii 出发，每个时刻吃掉当前位置的毒药，然后选择下一步吃左或右的毒药，将每次选择的位置搞成一个排列 ppp ，其伤害定义为 ∑j=1ndj[pcj=j]\\sum\\limits_{j=1}^nd_j[p_{c_j}=j]j=1∑n​dj​[pcj​​=j] ，求可能的排列中最大的伤害值。 数据范围： n≤3×105n\\le3\\times10^5n≤3×105 解题思路： 容易看出一个 dpdpdp 即 fi,jf_{i,j}fi,j​ 表示已经吃掉区间 [i,j][i,j][i,j] 的毒药到吃完的最大值，这样放到二维平面上每次转移对应向下或者向右走，而由于最多有 2n2n2n 条转移边，因此枚举纵坐标，用树状数组修改后缀取 maxmaxmax 和查询前缀 maxmaxmax 即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;#define int long long#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,ll&gt; pll;typedef pair&lt;ll,int&gt; pli;typedef unsigned int uii;typedef unsigned long long Ull;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(ch!='O'&amp;&amp;ch!='#'&amp;&amp;ch!='.'&amp;&amp;ch!='*')ch=gc(); while(ch=='O'||ch=='#'||ch=='.'||ch=='*')s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353,inv2=499122177; inline int add(int a,int b)&#123;return a+b&lt;mod?a+b:a+b-mod;&#125; inline int dec(int a,int b)&#123;return a-b&lt;0?a-b+mod:a-b;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int a)&#123;return ksm(a,mod-2);&#125; inline void fix(int&amp;a)&#123;a=(a%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmax(T&amp;a,T b)&#123;a&lt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,T b)&#123;a&gt;b?a=b:0;&#125;const int N=3e5+5;int n,c[N],d[N];ll bit[N];inline int lowbit(int x)&#123;return x&amp;-x;&#125;inline void update(int x,ll v)&#123;for(;x;x^=lowbit(x))ckmax(bit[x],v);&#125;inline ll query(int x)&#123;ll res=0;for(;x&lt;=n;x+=lowbit(x))ckmax(res,bit[x]);return res;&#125;vector&lt;int&gt;ps[N];signed main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)&#123; c[i]=read(); if(c[i]!=1&amp;&amp;c[i]&lt;=i)ps[i-c[i]+1].pb(i); &#125; for(ri i=1;i&lt;=n;++i)d[i]=read(); for(ri i=1;i&lt;=n;++i)&#123; for(ri j=(int)ps[i].size()-1;~j;--j) update(ps[i][j]-1,query(ps[i][j])+d[ps[i][j]]); cout&lt;&lt;query(i)+(c[i]==1?d[i]:0)&lt;&lt;' '; if(i+c[i]-1&lt;=n)update(i+c[i]-1,query(i+c[i]-1)+d[i]); &#125; return 0;&#125; $$ --- ## [Timsort](https://codeforces.com/gym/102059/problem/L) 直接暴力即可，复杂度是调和级数 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;#define gc getcharinline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=1e9+7;typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=1e5+5;int n,a[N],f[N][2];pii ans[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); f[n][0]=f[n][1]=1; for(ri i=n-1;i;--i)&#123; f[i][0]=a[i]&lt;=a[i+1]?f[i+1][0]+1:1; f[i][1]=a[i]&gt;a[i+1]?f[i+1][1]+1:1; &#125; for(ri tt=read(),len;tt;--tt)&#123; len=read(); if(ans[len].fi)cout&lt;&lt;ans[len].fi&lt;&lt;' '&lt;&lt;ans[len].se&lt;&lt;'\\n'; else&#123; for(ri t,i=1;i&lt;=n;++i)&#123; ++ans[len].fi; if(f[i][0]&gt;=len)&#123; i+=f[i][0]-1; continue; &#125; if(f[i][1]&gt;=len)&#123; i+=f[i][1]-1; continue; &#125; t=max(f[i][0],f[i][1]); ans[len].se+=min(n-i+1-t,len-t); i+=min(n-i+1,len)-1; &#125; cout&lt;&lt;ans[len].fi&lt;&lt;' '&lt;&lt;ans[len].se&lt;&lt;'\\n'; &#125; &#125; return 0;&#125; Utilitarianism 直接用 wqswqswqs 二分+简单树形 dpdpdp 即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;inline char gc()&#123; static char buf[rlen],*ib,*ob; (ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)); return ib==ob?-1:*ib++;&#125;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;typedef pair&lt;int,int&gt; pii;typedef long long ll;const int N=250005;int n,k;vector&lt;pii&gt;e[N];struct dat&#123; ll a; int b; dat(ll a=0,int b=0):a(a),b(b)&#123;&#125; friend inline dat operator+(const dat&amp;a,const dat&amp;b)&#123;return dat(a.a+b.a,a.b+b.b);&#125; friend inline dat operator-(const dat&amp;a,const dat&amp;b)&#123;return dat(a.a-b.a,a.b-b.b);&#125; friend inline bool operator&gt;(const dat&amp;a,const dat&amp;b)&#123;return a.a==b.a?a.b&gt;b.b:a.a&gt;b.a;&#125;&#125;f[N][2];inline dat max(const dat&amp;a,const dat&amp;b)&#123;return a&gt;b?a:b;&#125;void dfs(int p,int fa,ll tmp)&#123; f[p][0]=f[p][1]=dat(0,0); for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==fa)continue; dfs(v,p,tmp),f[p][0]=f[p][0]+max(f[v][0],f[v][1]); &#125; ll w; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==fa)continue; w=e[p][i].se+tmp; f[p][1]=max(f[p][1],f[p][0]-max(f[v][0],f[v][1])+f[v][0]+dat(w,1)); &#125;&#125;inline bool check(const double tmp)&#123; dfs(1,0,tmp); dat t=max(f[1][0],f[1][1]); return t.b&gt;=k;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),k=read(); for(ri i=1;i&lt;=n;++i)e[i].clear(); for(ri i=1,u,v,w;i&lt;n;++i)&#123; u=read(),v=read(),w=read(); e[u].push_back(pii(v,w)); e[v].push_back(pii(u,w)); &#125; ll L=-1e14,R=1e14,ans=1e14; while(L&lt;R)&#123; ll mid=(L+R+1)/2; if(check(mid))ans=mid,R=mid-1; else L=mid+1; &#125; dfs(1,0,ans); dat t=max(f[1][0],f[1][1]); if(t.b&lt;k)puts(\"Impossible\"); else cout&lt;&lt;(t.a-ans*k)&lt;&lt;'\\n'; return 0;&#125; 总结： 我 dpdpdp 不过关 我图论图论图论不过关 我英语英语英语不过关","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"2019.10.15 模拟测试题解","slug":"191015test","date":"2019-10-15T13:13:46.000Z","updated":"2019-10-16T00:46:52.914Z","comments":true,"path":"191015test/","link":"","permalink":"http://ldxcaicai.github.io/191015test/","excerpt":"","text":"题目来源： A:CF643DA: CF643DA:CF643D B:TCO BearDestroyB:TCO\\ BearDestroyB:TCO BearDestroy A 题意简述： 给你一个有向基环森林，每个点有一个后继，然后对于一个点会给出一个 $ vl_i $ ，定义 $ E_i=\\frac{vl_i}{i入度+i出度+1},res_i=vl_i%E_i+\\sum\\limits_{dist(i,v)\\le 1}E_v $ 要求支持如下操作： 修改一个点的后继 问一个点的 resresres 查询全局 resresres 的最值 数据范围: n≤100000n\\le100000n≤100000 m≤100000m\\le100000m≤100000 解题思路： 考虑用可删堆维护全局询问，然后对每个点记一个 deltadeltadelta 表示它对前驱的影响，然后就变成了模拟题 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167#include&lt;bits/stdc++.h&gt;#define ri register int#define csi const int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; int mod; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;&#125;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int N=1e5+5;int du[N],n,m,a[N];ll det[N],vl[N],E[N],res[N];struct Set1&#123; priority_queue&lt;ll&gt;a,b; inline void ins(ll x)&#123;a.push(x);&#125; inline void del(ll x)&#123;b.push(x);&#125; inline void pop()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();a.pop();&#125; inline ll top()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();return a.top();&#125; inline int size()const&#123;return a.size()-b.size();&#125;&#125;Mx[N],Ansmx;struct Set2&#123; priority_queue&lt;ll,vector&lt;ll&gt;,greater&lt;ll&gt; &gt;a,b; inline void ins(ll x)&#123;a.push(x);&#125; inline void del(ll x)&#123;b.push(x);&#125; inline void pop()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();a.pop();&#125; inline ll top()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();return a.top();&#125; inline int size()const&#123;return a.size()-b.size();&#125;&#125;Mn[N],Ansmn;int main()&#123; n=read(),m=read(); for(ri i=1;i&lt;=n;++i)vl[i]=readl(); for(ri i=1;i&lt;=n;++i)&#123; a[i]=read(); ++du[i],++du[a[i]]; &#125; for(ri i=1;i&lt;=n;++i)E[i]=vl[i]/(du[i]+1); for(ri i=1;i&lt;=n;++i)&#123; res[a[i]]+=E[i]-E[a[i]]; res[i]+=E[a[i]]-E[i]; res[i]+=vl[i]; &#125; for(ri i=1;i&lt;=n;++i)&#123; Mn[a[i]].ins(res[i]); Mx[a[i]].ins(res[i]); &#125; for(ri i=1;i&lt;=n;++i)&#123; if(Mx[i].size())Ansmx.ins(Mx[i].top()); if(Mn[i].size())Ansmn.ins(Mn[i].top()); &#125; ll dt; for(ri p,fp,ffp,x,y,op;m;--m)&#123; op=read(); if(op==1)&#123; x=read(),y=read(); p=a[x],fp=a[p],ffp=a[fp]; Ansmx.del(Mx[p].top()+det[p]); Ansmn.del(Mn[p].top()+det[p]); dt=vl[p]/du[p]-vl[p]/(du[p]+1); Mx[p].del(res[x]); Mn[p].del(res[x]); res[x]+=det[p]-E[p]; det[p]+=dt; if(Mx[p].size())Ansmx.ins(Mx[p].top()+det[p]); if(Mn[p].size())Ansmn.ins(Mn[p].top()+det[p]); Ansmx.del(Mx[fp].top()+det[fp]); Ansmn.del(Mn[fp].top()+det[fp]); Mx[fp].del(res[p]); Mn[fp].del(res[p]); res[p]-=dt*(du[p]-1); res[p]-=E[x]-E[p]; E[p]+=dt; Mx[fp].ins(res[p]); Mn[fp].ins(res[p]); Ansmx.ins(Mx[fp].top()+det[fp]); Ansmn.ins(Mn[fp].top()+det[fp]); Ansmx.del(Mx[ffp].top()+det[ffp]); Ansmn.del(Mn[ffp].top()+det[ffp]); Mx[ffp].del(res[fp]); Mn[ffp].del(res[fp]); res[fp]+=dt; Mx[ffp].ins(res[fp]); Mn[ffp].ins(res[fp]); Ansmx.ins(Mx[ffp].top()+det[ffp]); Ansmn.ins(Mn[ffp].top()+det[ffp]); --du[p]; a[x]=y; p=a[x],fp=a[p],ffp=a[fp]; if(Mx[p].size())Ansmx.del(Mx[p].top()+det[p]); if(Mn[p].size())Ansmn.del(Mn[p].top()+det[p]); dt=vl[p]/(du[p]+2)-vl[p]/(du[p]+1); det[p]+=dt; E[p]+=dt; res[x]-=det[p]-E[p]; Mx[p].ins(res[x]); Mn[p].ins(res[x]); Ansmx.ins(Mx[p].top()+det[p]); Ansmn.ins(Mn[p].top()+det[p]); Ansmx.del(Mx[fp].top()+det[fp]); Ansmn.del(Mn[fp].top()+det[fp]); Mx[fp].del(res[p]); Mn[fp].del(res[p]); res[p]-=dt*du[p]; res[p]+=E[x]-E[p]; Mx[fp].ins(res[p]); Mn[fp].ins(res[p]); Ansmx.ins(Mx[fp].top()+det[fp]); Ansmn.ins(Mn[fp].top()+det[fp]); Ansmx.del(Mx[ffp].top()+det[ffp]); Ansmn.del(Mn[ffp].top()+det[ffp]); Mx[ffp].del(res[fp]); Mn[ffp].del(res[fp]); res[fp]+=dt; Mx[ffp].ins(res[fp]); Mn[ffp].ins(res[fp]); Ansmx.ins(Mx[ffp].top()+det[ffp]); Ansmn.ins(Mn[ffp].top()+det[ffp]); ++du[p]; &#125; else if(op==2)&#123; x=read(); cout&lt;&lt;(res[x]+det[a[x]])&lt;&lt;'\\n'; &#125; else cout&lt;&lt;Ansmn.top()&lt;&lt;' '&lt;&lt;Ansmx.top()&lt;&lt;'\\n'; &#125; return 0;&#125; B 题意简述： 给一个 n×mn×mn×m 的方格图,每个格子填上E或者S，一个人从 (0,0)(0,0)(0,0) 开始按行优先行动，每次到一个格子 (i,j)(i,j)(i,j) 就执行以下操作： 如果该格子已经放置了骨牌,那么不操作 若该格子没有放置骨牌且该格子写的是E，那么优先放一块 1×21×21×2 的骨牌，不行就放一块 2×12×12×1 的骨牌，再不行就不操作 若该格子没有放置骨牌且该格子写的是S，那么优先放一块 2×12×12×1 的骨牌，不行就放一块 1×21×21×2 的骨牌，再不行就不操作 一个图的得分为放置的骨牌数量,求 2n×m2^{n×m}2n×m 种图的得分的和对MOD取余 数据范围： n≤12n\\le12n≤12 m≤30m\\le30m≤30 解题思路： 考虑每个骨牌要么覆盖 (i,j),(i,j+1)(i,j),(i,j+1)(i,j),(i,j+1) ，要么覆盖 (i,j),(i+1,j)(i,j),(i+1,j)(i,j),(i+1,j) ，那么如果按照对角线分层的话这显然是一个分层图 dpdpdp ，这样就可以设 fi,jf_{i,j}fi,j​ 表示第 iii 层状态为 jjj 的答案，然后就可以用状压 dpdpdp 的思想转移了（实质上这个地方利用的是插头 dpdpdp 的想法 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; int mod; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:0;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;int n,m,lm;#define getsta(x,y) ((x)&gt;&gt;((y)-1)&amp;1)#define sub(x) (1&lt;&lt;((x)-1))#define trans0 cf,cg,f,g#define trans1 add(cf,cf),add(cg,cg),f,g#define trans2 add(cf,cf),add(add(cf,cf),add(cg,cg)),f,g#define trans3 cf,add(cf,cg),f,ginline void update(int ps,int s1,int s2,int cf,int cg,vi&amp;f,vi&amp;g)&#123; if(ps==n+1)&#123; Add(f[s2],cf); Add(g[s2],cg); return; &#125; if(lm-ps&lt;0||lm-ps+1&gt;m)return update(ps+1,s1,s2,trans0); if(getsta(s1,ps))return update(ps+1,s1,s2,trans1); if(lm-ps+1==m||getsta(s2,ps))&#123; if(ps==n)update(ps+1,s1,s2,trans1); else update(ps+1,s1|sub(ps),s2|sub(ps+1),trans2); &#125; else&#123; if(ps==n)update(ps+1,s1|sub(ps),s2|sub(ps),trans2); else&#123; update(ps+1,s1|sub(ps),s2|sub(ps),trans3); update(ps+1,s1|sub(ps),s2|sub(ps+1),trans3); &#125; &#125;&#125;#undef sub#undef trans0#undef trans1#undef trans2#undef getstainline int solve()&#123; vii f(n+m+1),g(n+m+1); int all=1&lt;&lt;n; f[1].resize(all),g[1].resize(all); f[1][0]=1,g[1][0]=0; for(ri dep=1;dep&lt;n+m;++dep)&#123; lm=dep; f[dep+1].resize(all); g[dep+1].resize(all); for(ri sta=0;sta&lt;all;++sta) update(1,sta,0,f[dep][sta],g[dep][sta],f[dep+1],g[dep+1]); &#125; return g[n+m][0];&#125;class BearDestroys&#123; public: inline int sumUp(int n_,int m_,int mod_)&#123; mod=mod_,n=n_,m=m_; return solve(); &#125;&#125;; C 题意简述： 有 nnn 种不同的果汁，第 iii 种有 cic_ici​ 升。现在要将所有果汁放进 mmm 个瓶子里，满足每个瓶子里不超过两种果汁且所有瓶子装的果汁量一样，问 mmm 最小值，(果汁量允许为分数 数据范围： n≤20n\\le20n≤20 ci≤109c_i\\le10^9ci​≤109 解题思路： 先考虑答案的上界，容易发现是 n−1n-1n−1 ，（可以通过归纳法证明一定存在 n−1n-1n−1 个瓶子的合法方案)，然后假设现在一个瓶子中有两种果汁 a,ba,ba,b ，我们在 a,ba,ba,b 中连上一条边，假设答案为 mmm ，那么一定会将 nnn 个点分成至少 n−mn-mn−m 个连通块，这样相当于可以枚举 mmm 然后递归成子问题，对于一个 n′n&#x27;n′ 个点的点集如果其可以被分到 n′−1n&#x27;-1n′−1 个瓶子里那么就是合法的，于是就能够枚举子集转移，复杂度O(3n∗n)O(3^n*n)O(3n∗n) ，当然可以用子集卷积继续优化但是由于数据不强因此懒得写了~ CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; vi;typedef vector&lt;vector&lt;int&gt; &gt; vii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; int mod; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:0;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int Inv(int x)&#123;return ksm(x,mod-2);&#125; inline void fix(int&amp;x)&#123;x=(x%mod+mod)%mod;&#125;&#125;using namespace modular;template&lt;typename T&gt;inline void ckmin(T&amp;a,const T&amp;b)&#123;a&gt;b?a=b:0;&#125;template&lt;typename T&gt;inline void ckmax(T&amp;a,const T&amp;b)&#123;a&lt;b?a=b:0;&#125;const int N=25;int n,vl[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); int all=1&lt;&lt;n; vi ct(all),id(all); vector&lt;ll&gt;ss(all); if(n&lt;=2)return puts(\"1\"),0; for(ri i=1;i&lt;=n;++i)id[1&lt;&lt;(i-1)]=i,vl[i]=read(); for(ri i=1;i&lt;all;++i)&#123; ct[i]=ct[i^(i&amp;-i)]+1; ss[i]=ss[i^(i&amp;-i)]+vl[id[i&amp;-i]]; &#125; for(ri i=n+1&gt;&gt;1;i&lt;n-1;++i)&#123; bool ff=0,tg; int s=all-1; while(1)&#123; tg=0; if((ll)ss[all-1]*(ct[s]-1)==(ll)ss[s]*i)&#123; ff=1; break; &#125; for(ri t=s;t;t=(t-1)&amp;s) if((ll)ss[all-1]*(ct[t]-1)==(ll)ss[t]*i)&#123; tg=1; s^=t; break; &#125; if(!tg)break; &#125; if(ff)&#123; cout&lt;&lt;i; return 0; &#125; &#125; cout&lt;&lt;n-1; return 0;&#125;","categories":[{"name":"private","slug":"private","permalink":"http://ldxcaicai.github.io/categories/private/"}],"tags":[{"name":"考试题解","slug":"考试题解","permalink":"http://ldxcaicai.github.io/tags/%E8%80%83%E8%AF%95%E9%A2%98%E8%A7%A3/"}]},{"title":"CodeForces 1244 简要题解","slug":"CF1244","date":"2019-10-14T08:59:39.000Z","updated":"2019-10-22T23:48:31.189Z","comments":true,"path":"CF1244/","link":"","permalink":"http://ldxcaicai.github.io/CF1244/","excerpt":"","text":"A 模拟 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; int a=read(),b=read(),c=read(),d=read(),k=read(); int res=a%c?a/c+1:a/c,ress=b%d?b/d+1:b/d; if(res+ress&gt;k)puts(\"-1\"); else cout&lt;&lt;res&lt;&lt;' '&lt;&lt;ress&lt;&lt;'\\n'; &#125; return 0;&#125; B 简单贪心 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=1005;char s[N];int n;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; n=read(); Read(s); int ans=n,sum=n; for(ri i=1;i&lt;=n;++i)&#123; if(s[i]=='1')&#123; ++sum; ans=max(ans,i*2); ans=max(ans,(n-i+1)*2); &#125; &#125; ans=max(ans,sum); cout&lt;&lt;ans&lt;&lt;'\\n'; &#125; return 0;&#125; C exgcdexgcdexgcd 板题 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=1005;ll n,p,d,w;inline void exgcd(ll a,ll b,ll&amp;x,ll&amp;y)&#123; if(!b)&#123; x=1; y=0; return; &#125; exgcd(b,a%b,x,y); ll t=x; x=y,y=t-a/b*y;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=1;tt;--tt)&#123; n=readl(),p=readl(),w=readl(),d=readl(); ll g=__gcd(d,w); if(p%g)&#123; puts(\"-1\"); continue; &#125; p/=g,d/=g,w/=g; ll x,y; exgcd(w,d,x,y); y=(y%w+w)%w; y=y*(p%w)%w; x=(p-d*y)/w; if(x&lt;0)&#123; puts(\"-1\"); continue; &#125; if(n-x-y&lt;0)&#123; puts(\"-1\"); continue; &#125; cout&lt;&lt;x&lt;&lt;' '&lt;&lt;y&lt;&lt;' '&lt;&lt;n-x-y&lt;&lt;'\\n'; &#125; return 0;&#125; D 合法情况一定是条链 貌似直接枚举左端的颜色其余颜色就固定了 但也可以强行 dpdpdp 好好的确是我比赛的时候被降智了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=100005;int n,vl[N][4],q[N],hd,tl,vs[N],col[N];ll f[N][4][4];pii pre[N][4][4];vector&lt;int&gt;e[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=3;++i)for(ri j=1;j&lt;=n;++j)vl[j][i]=read(); for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v); e[v].pb(u); &#125; for(ri i=1;i&lt;=n;++i)if(e[i].size()&gt;2)return puts(\"-1\"),0; for(ri i=1;i&lt;=n;++i)&#123; if(e[i].size()==1)&#123; q[hd=tl=1]=i; break; &#125; &#125; while(hd&lt;=tl)&#123; int x=q[hd++]; vs[x]=1; for(ri i=0,v;i&lt;e[x].size();++i)&#123; if(vs[v=e[x][i]])continue; q[++tl]=v; &#125; &#125; memset(f,0x3f,sizeof(f)); for(ri i=1;i&lt;=3;++i)for(ri j=1;j&lt;=3;++j)if(i!=j)f[1][i][j]=vl[q[1]][j]; for(ri i=2;i&lt;=n;++i)&#123; for(ri j=1;j&lt;=3;++j)&#123; for(ri k=1;k&lt;=3;++k)&#123; for(ri l=1;l&lt;=3;++l)&#123; if(j!=k&amp;&amp;k!=l&amp;&amp;j!=l)&#123; if(f[i-1][l][j]+vl[q[i]][k]&lt;f[i][j][k])&#123; f[i][j][k]=f[i-1][l][j]+vl[q[i]][k]; pre[i][j][k]=pii(l,j); &#125; &#125; &#125; &#125; &#125; &#125; ll res=1e18; pii las; for(ri i=1;i&lt;=3;++i)for(ri j=1;j&lt;=3;++j)&#123; if(i!=j)if(f[n][i][j]&lt;res)&#123; res=f[n][i][j]; las=pii(i,j); &#125; &#125; int ps=n; while(ps)&#123; col[q[ps]]=las.se; las=pre[ps][las.fi][las.se]; --ps; &#125; cout&lt;&lt;res&lt;&lt;'\\n'; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;col[i]&lt;&lt;' '; return 0;&#125; E 先把数组排序，然后处理一下前后缀就能上双指针了 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=100005;int n,a[N],b[N],sig,pre[N],suf[N];ll Pre[N],Suf[N],pvl[N],svl[N];ll K;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); K=readl(); for(ri i=1;i&lt;=n;++i)a[i]=read(); sort(a+1,a+n+1); sig=0; for(ri i=1;i&lt;=n;++i)&#123; if(a[i]!=a[i-1])a[++sig]=a[i],b[sig]=1; else ++b[sig]; &#125; for(ri i=1;i&lt;=sig;++i)pre[i]=pre[i-1]+b[i],Pre[i]=Pre[i-1]+(ll)b[i]*a[i],pvl[i]=(ll)pre[i]*a[i]-Pre[i]; for(ri i=sig;i;--i)suf[i]=suf[i+1]+b[i],Suf[i]=Suf[i+1]+(ll)b[i]*a[i],svl[i]=(ll)Suf[i]-(ll)suf[i]*a[i]; ll res=a[sig]-a[1]; for(ri ps1=1,ps2=1;ps1&lt;=sig;++ps1)&#123; while(ps2&lt;=sig&amp;&amp;pvl[ps1]+svl[ps2]&gt;K)++ps2; if(ps2&gt;sig)break; if(ps1&gt;=ps2)return puts(\"0\"),0; res=min(res,a[ps2]-a[ps1]-(K-pvl[ps1]-svl[ps2])/suf[ps2]); &#125; for(ri ps1=sig,ps2=sig;ps2;--ps2)&#123; while(ps1&amp;&amp;pvl[ps1]+svl[ps2]&gt;K)--ps1; if(!ps1)break; if(ps1&gt;=ps2)return puts(\"0\"),0; res=min(res,a[ps2]-a[ps1]-(K-pvl[ps1]-svl[ps2])/pre[ps1]); &#125; cout&lt;&lt;res; return 0;&#125; F 随便找个规律就行了，然后分奇偶讨论一下 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=6e5+5;int n,k;char s[N];inline void check1()&#123; if(n&amp;1)return; for(ri i=2;i&lt;=n;++i)if(s[i]==s[i-1])return; k&amp;=1; for(ri i=1;i&lt;=n;++i)&#123; if(k==1)&#123; if(s[i]=='W')cout&lt;&lt;'B'; else cout&lt;&lt;'W'; &#125; else cout&lt;&lt;s[i]; &#125; exit(0);&#125;inline void check2()&#123; for(ri i=2;i&lt;=n;++i)if(s[i]!=s[i-1])return; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;s[i]; exit(0);&#125;bool ban[N];char res[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),k=read(); Read(s); check1(); check2(); for(ri i=1;i&lt;=n;++i)s[i+n]=s[i+n*2]=s[i]; int st; for(ri i=1;i&lt;=n;++i)&#123; if(s[i]==s[i+1])&#123; st=i; break; &#125; &#125; int mid,L=st,R=st+n-1,l,r; for(l=L;l&lt;=R;l=r+1)&#123; r=l; while(r&lt;R&amp;&amp;s[r+1]==s[r])++r; if(r==R)break; mid=r; while(r&lt;=R&amp;&amp;s[r+1]!=s[r])++r; --r; if(mid==r)continue; if(r-mid&lt;=k*2)for(ri p1=mid+1,p2=r;p1&lt;=p2;++p1,--p2)&#123; s[p1]=s[l],s[p2]=s[r+1]; &#125; else&#123; int p1,p2,i; for(p1=mid+1,p2=r,i=1;i&lt;=k;++i,++p1,--p2)&#123; s[p1]=s[l],s[p2]=s[r+1]; &#125; if(k&amp;1)for(ri i=p1;i&lt;=p2;++i)s[i]=s[i]=='B'?'W':'B'; &#125; &#125; for(ri i=L;i&lt;=R;++i)&#123; if(i&gt;n)s[i-n]=s[i]; &#125; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;s[i]; return 0;&#125; G 随便贪个心就过了，证明很简单（虽然我直接瞎贪的但后来 cyktxdycyktxdycyktxdy 跟我说了一个证明方法感觉还挺 naiivenaiivenaiive 的 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=1e6+5;int n;ll K;#define lc (p&lt;&lt;1)#define rc (p&lt;&lt;1|1)#define mid (l+r&gt;&gt;1)int siz[N&lt;&lt;2];inline void build(int p,int l,int r)&#123; siz[p]=r-l+1; if(l==r)return; build(lc,l,mid),build(rc,mid+1,r);&#125;inline int query(int p,int l,int r)&#123; if(!siz[p])return -1; if(l==r)return l; return siz[lc]?query(lc,l,mid):query(rc,mid+1,r);&#125;inline void update(int p,int l,int r,int k)&#123; if(l==r)&#123; siz[p]=0; return; &#125; k&lt;=mid?update(lc,l,mid,k):update(rc,mid+1,r,k); siz[p]=siz[lc]+siz[rc];&#125;inline int query(int p,int l,int r,int ql,int qr)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return query(p,l,r); if(qr&lt;=mid)return query(lc,l,mid,ql,qr); if(ql&gt;mid)return query(rc,mid+1,r,ql,qr); int res=query(lc,l,mid,ql,qr); if(~res)return res; return query(rc,mid+1,r,ql,qr); &#125;#undef lc#undef rc#undef midint ans[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); K=readl(); ll ss=0; if(K&lt;(ll)n*(n+1)/2)return puts(\"-1\"),0; ll T=K; K-=(ll)n*(n+1)/2; build(1,1,n); for(ri i=n;i;--i)&#123; int ql=max(1ll,i-K),qr=i; int x=query(1,1,n,ql,qr); if(~x)ans[x]=i,K-=i-x; else ans[x=query(1,1,n,qr+1,n)]=i; update(1,1,n,x); &#125; cout&lt;&lt;T-K&lt;&lt;'\\n'; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;i&lt;&lt;' '; puts(\"\"); for(ri i=1;i&lt;=n;++i)cout&lt;&lt;ans[i]&lt;&lt;' '; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"LibreOJ NOI Round2 Day1 简要题解","slug":"LNRR2D1","date":"2019-10-14T08:41:11.000Z","updated":"2019-10-14T08:54:13.697Z","comments":true,"path":"LNRR2D1/","link":"","permalink":"http://ldxcaicai.github.io/LNRR2D1/","excerpt":"","text":"A 容易发现原题中的运算可以用矩阵完成 O(n)O(n)O(n) 维护矩阵和逆矩阵即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch; return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; inline int findInv(int a)&#123;return ksm(a,mod-2);&#125;&#125;using namespace modular;const int N=1e6+5;vector&lt;int&gt;e[N];struct Mat&#123; int a[2][2]; inline int*operator[](const int&amp;k)&#123;return a[k];&#125; Mat()&#123;a[0][0]=a[0][1]=a[1][0]=a[1][1]=0;&#125; Mat(int x,int typ)&#123; typ==0? (a[0][0]=x,a[0][1]=1,a[1][0]=1,a[1][1]=0): (a[0][0]=0,a[0][1]=1,a[1][0]=1,a[1][1]=x?mod-x:0); &#125; friend inline Mat operator+(Mat a,Mat b)&#123; Mat ret; ret[0][0]=((ll)a[0][0]*b[0][0]+(ll)a[0][1]*b[1][0])%mod; ret[0][1]=((ll)a[0][0]*b[0][1]+(ll)a[0][1]*b[1][1])%mod; ret[1][0]=((ll)a[1][0]*b[0][0]+(ll)a[1][1]*b[1][0])%mod; ret[1][1]=((ll)a[1][0]*b[0][1]+(ll)a[1][1]*b[1][1])%mod; return ret; &#125;&#125;pre[N][2];int n,m,opt,a[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),opt=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); pre[0][0]=Mat(0,0),pre[0][1]=Mat(0,1); for(ri i=1;i&lt;=n;++i)&#123; pre[i][0]=pre[i-1][0]+Mat(a[i],0); pre[i][1]=Mat(a[i],1)+pre[i-1][1]; &#125; for(ri ansx=0,ansy=0,op,l,r,i=1;i&lt;=m;++i)&#123; op=read(); if(op==1)&#123; a[++n]=read()^ansx^ansy; pre[n][0]=pre[n-1][0]+Mat(a[n],0); pre[n][1]=Mat(a[n],1)+pre[n-1][1]; &#125; else&#123; l=read()^ansx^ansy,r=read()^ansx^ansy; Mat coe=pre[l-1][1]+pre[r-1][0]; ansx=((ll)coe[0][0]*a[r]+coe[0][1])%mod; cout&lt;&lt;ansx&lt;&lt;' '; ansy=((ll)coe[1][0]*a[r]+coe[1][1])%mod; cout&lt;&lt;ansy&lt;&lt;'\\n'; &#125; ansx*=opt; ansy*=opt; &#125; return 0;&#125; B 容易想到费用流做法，然后发现可以用 HLDHLDHLD +贪心模拟费用流来解决掉先出现所有金矿的数据点 下面将金矿成为洞，矿工称为老鼠 考虑用线段树分治来将问题转化成上述情况，考虑对每个洞建一个虚的老鼠进行匹配，使得代价和为一个确定的极大值 infinfinf ，然后给原本放洞的地方建一个虚儿子 xxx ，将这个洞和老鼠都放入 xxx 即可，正确性显然 然后将 HLDHLDHLD +线段树换成全局平衡二叉树即可，复杂度 O(nlog⁡2n)O(n\\log^2 n)O(nlog2n) 然后我和cyk两个人一起卡常数卡了一下午没卡过去，只能 96pts96pts96pts 滚了，提出这个算法的用户hychyc的ac代码貌似放宽了时限才过掉了最后一个点，我本地测了一下他最后一个点比我慢7s 留个链分治的坑以后来填吧 96ptsCODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=2e5+5;int n,m,dist[N];vector&lt;pii&gt;e[N];int siz[N],dep[N],dis[N],fa[N],top[N],bot[N],num[N],hson[N],pred[N],tot=0;void dfs1(int p)&#123; siz[p]=1; for(ri i=0,v;i&lt;(int)e[p].size();++i)&#123; v=e[p][i].fi,fa[v]=p; dis[v]=dis[p]+e[p][i].se; dep[v]=dep[p]+1,dfs1(v); siz[p]+=siz[v]; if(siz[v]&gt;siz[hson[p]])hson[p]=v; &#125;&#125;void dfs2(int p,int tp)&#123; top[p]=tp,pred[num[p]=++tot]=p; if(!hson[p])&#123; bot[p]=p; return; &#125; dfs2(hson[p],tp),bot[p]=bot[hson[p]]; for(ri i=0,v;i&lt;(int)e[p].size();++i)&#123; if((v=e[p][i].fi)==hson[p])continue; dfs2(v,v); &#125;&#125;const int inf=1e9;struct Set&#123; priority_queue&lt;ll&gt;a,b; inline void ins(int x)&#123;a.push(x);&#125; inline void del(int x)&#123;b.push(x);&#125; inline void pop()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();a.pop();&#125; inline int size()const&#123;return a.size()-b.size();&#125; inline int top()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();return a.top();&#125;&#125;S[N];namespace sgt&#123; #define lc (p&lt;&lt;1) #define rc (p&lt;&lt;1|1) #define mid (l+r&gt;&gt;1) int M; pii mx[1&lt;&lt;20|5]; inline void build(int n)&#123; for(M=1;M&lt;=n+1;M&lt;&lt;=1); for(ri i=1;i&lt;=M*2-1;++i)mx[i]=pii(-inf,-inf); for(ri i=1;i&lt;=n;++i)mx[i+M]=pii(-inf,pred[i]); for(ri p=M-1;p;--p)mx[p]=max(mx[lc],mx[rc]); cerr&lt;&lt;mx[1].fi&lt;&lt;' '&lt;&lt;mx[1].se&lt;&lt;'\\n'; &#125; inline void update(int p,int vl)&#123; mx[p+=M].fi=vl; for(p&gt;&gt;=1;p;p&gt;&gt;=1)mx[p]=max(mx[lc],mx[rc]); &#125; inline pii query(int l,int r)&#123; pii res=mx[l+M]; for(l+=M-1,r+=M+1;l^r^1;l&gt;&gt;=1,r&gt;&gt;=1)&#123; if(l&amp;1^1)res=max(res,mx[l^1]); if(r&amp;1)res=max(res,mx[r^1]); &#125; if(!res.se)&#123; cerr&lt;&lt;res.fi&lt;&lt;'\\n'; &#125; return res; &#125; #undef lc #undef rc #undef mid&#125;//namespace sgt&#123;// #define lc (p&lt;&lt;1)// #define rc (p&lt;&lt;1|1)// #define mid (l+r&gt;&gt;1)// pli mx[N&lt;&lt;2];// inline void build(int p,int l,int r)&#123;// if(l==r)&#123;// mx[p]=pli(-inf,pred[l]);// return;// &#125;// build(lc,l,mid),build(rc,mid+1,r);// mx[p]=max(mx[lc],mx[rc]);// &#125;// inline void update(int p,int l,int r,int k,ll vl)&#123;// if(l==r)&#123;// mx[p].fi=vl;// return;// &#125;// k&lt;=mid?update(lc,l,mid,k,vl):update(rc,mid+1,r,k,vl);// mx[p]=max(mx[lc],mx[rc]);// &#125;// inline pli query(int p,int l,int r,int ql,int qr)&#123;// if(ql&lt;=l&amp;&amp;r&lt;=qr)return mx[p];// if(qr&lt;=mid)return query(lc,l,mid,ql,qr);// if(ql&gt;mid)return query(rc,mid+1,r,ql,qr);// return max(query(lc,l,mid,ql,qr),query(rc,mid+1,r,ql,qr));// &#125;// #undef lc// #undef rc// #undef mid//&#125;inline pii operator+(pii a,pii b)&#123; if(a.fi!=b.fi)return min(a,b); return dep[a.se]&gt;dep[b.se]?a:b;&#125;namespace bst&#123; #define lc (son[p][0]) #define rc (son[p][1]) int ft[N],tg[N&lt;&lt;2],son[N][2]; pii vl[N&lt;&lt;2],mn[N&lt;&lt;2]; inline void pushup(int p)&#123; if(lc&amp;&amp;rc)mn[p]=mn[lc]+vl[p]+mn[rc]; else if(lc)mn[p]=mn[lc]+vl[p]; else if(rc)mn[p]=vl[p]+mn[rc]; else mn[p]=vl[p]; &#125; inline bool isroot(int x)&#123;return !ft[x]||(son[ft[x]][0]!=x&amp;&amp;son[ft[x]][1]!=x);&#125; inline void pushnow(int x,int v)&#123;vl[x].fi+=v,mn[x].fi+=v,tg[x]+=v;&#125; inline void pushdown(int p)&#123; if(tg[p])&#123; if(lc)pushnow(lc,tg[p]); if(rc)pushnow(rc,tg[p]); tg[p]=0; &#125; &#125; inline int build(int l,int r,int dt=0)&#123; if(l&gt;r)return 0; if(l==r)return pred[l]; for(ri p,i=r;i&gt;=l;--i)&#123; if(siz[pred[i]]*2&gt;=siz[pred[l]]+dt)&#123; p=pred[i]; lc=build(l,i-1,siz[p]); rc=build(i+1,r,dt); ft[lc]=ft[rc]=p; pushup(p); return p; &#125; &#125; &#125; inline int build(int p)&#123; for(ri x=p;x;x=hson[x])&#123; vl[x]=mn[x]=pii(0,x); for(ri i=0,v;i&lt;(int)e[x].size();++i) if((v=e[x][i].fi)!=hson[x])ft[build(v)]=x; &#125; return build(num[p],num[bot[p]]); &#125; int Stk[N],Tp; inline void update(int p,int v)&#123; while(p)&#123; Stk[Tp=1]=p; for(ri x=p;!isroot(x);x=ft[x])Stk[++Tp]=ft[x]; while(Tp)pushdown(Stk[Tp--]); vl[p].fi+=v; if(lc)pushnow(lc,v); pushup(p); while(!isroot(p))&#123; if(son[ft[p]][1]==p)&#123; vl[ft[p]].fi+=v; if(son[ft[p]][0])pushnow(son[ft[p]][0],v); &#125; p=ft[p]; pushup(p); &#125; p=ft[p]; &#125; &#125; inline pii query(int p)&#123; pii res=pii(inf,0); while(p)&#123; Stk[Tp=1]=p; for(ri x=p;!isroot(x);x=ft[x])Stk[++Tp]=ft[x]; while(Tp)pushdown(Stk[Tp--]); res=res+vl[p]; if(lc)res=res+mn[lc]; while(!isroot(p))&#123; if(son[ft[p]][1]==p)&#123; res=res+vl[ft[p]]; if(son[ft[p]][0])res=res+mn[son[ft[p]][0]]; &#125; p=ft[p]; &#125; p=ft[p]; &#125; return res; &#125; int Dep[N]; inline int querydep(int x)&#123; if(!ft[x])return Dep[x]=1; if(Dep[x])return Dep[x]; return Dep[x]=querydep(ft[x])+1; &#125; #undef lc #undef rc&#125;int rt,suf[N];struct Qry&#123;int op,id,vl;&#125;qry[N];bool vs[N];#define lc (p&lt;&lt;1)#define rc (p&lt;&lt;1|1)#define mid (l+r&gt;&gt;1)vector&lt;pii&gt;upd[N&lt;&lt;2];inline void update(int p,int l,int r,int ql,int qr,pii v)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return upd[p].pb(v); if(qr&lt;=mid)update(lc,l,mid,ql,qr,v); else if(ql&gt;mid)update(rc,mid+1,r,ql,qr,v); else update(lc,l,mid,ql,qr,v),update(rc,mid+1,r,ql,qr,v);&#125;ll ss=0,curss;struct node&#123; int op,id,vl; node()&#123;op=id=vl=0;&#125; node(int op,int id,ll vl):op(op),id(id),vl(vl)&#123;&#125;&#125;;vector&lt;node&gt;stk;inline void change(pii F)&#123; pii tp=bst::query(F.se); int p=tp.fi&gt;0?rt:tp.se; //pli tp=sgt::query(1,1,n,num[p],num[p]+siz[p]-1); tp=sgt::query(num[p],num[p]+siz[p]-1); if(tp.fi+F.fi&lt;=0)return; ss+=tp.fi+F.fi; S[F.se].ins(-F.fi); //sgt::update(1,1,n,num[F.se],S[F.se].top()); sgt::update(num[F.se],S[F.se].top()); bst::update(F.se,-1); stk.pb(node(1,F.se,-F.fi)); stk.pb(node(3,F.se,1)); S[tp.se].del(tp.fi); //sgt::update(1,1,n,num[tp.se],S[tp.se].top()); sgt::update(num[tp.se],S[tp.se].top()); bst::update(tp.se,1); stk.pb(node(2,tp.se,tp.fi)); stk.pb(node(3,tp.se,-1));&#125;inline void Pop()&#123; node t=stk.back(); stk.pop_back(); if(t.op==1)&#123; S[t.id].del(t.vl); //sgt::update(1,1,n,num[t.id],S[t.id].top()); sgt::update(num[t.id],S[t.id].top()); &#125; if(t.op==2)&#123; S[t.id].ins(t.vl); //sgt::update(1,1,n,num[t.id],S[t.id].top()); sgt::update(num[t.id],S[t.id].top()); &#125; if(t.op==3)bst::update(t.id,t.vl);&#125;inline void solve(int p,int l,int r)&#123; int sz=stk.size(); ll curss=ss; for(ri i=(int)upd[p].size()-1;~i;--i)change(upd[p][i]); if(l==r)cout&lt;&lt;ss-(ll)suf[l]*inf&lt;&lt;'\\n'; else solve(lc,l,mid),solve(rc,mid+1,r); while(stk.size()!=sz)Pop(); ss=curss;&#125;#undef lc#undef rc#undef midsigned main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); freopen(\"std.out\",\"w\",stdout); #endif int tt=clock(); n=read(),m=read(); for(ri i=1,u,v,w;i&lt;n;++i)&#123; u=read(),v=read(),w=read(); vs[v]=1; e[u].pb(pii(v,w)); &#125; for(ri i=1;i&lt;=n;++i)if(!vs[i])&#123; rt=i; break; &#125; for(ri i=1;i&lt;=m;++i)&#123; qry[i].op=read(); qry[i].id=read(); qry[i].vl=read(); if(qry[i].op==2)&#123; ++n; e[qry[i].id].pb(pii(n,0)); qry[i].id=n; &#125; &#125; for(ri i=1;i&lt;=n;++i)S[i].ins(-inf); dep[rt]=1; dfs1(rt); dfs2(rt,rt); //sgt::build(1,1,n); sgt::build(n); bst::build(rt); int mxdep=0; for(ri i=1;i&lt;=n;++i)mxdep=max(mxdep,bst::querydep(i)); for(ri i=1;i&lt;=m;++i)&#123; if(qry[i].op==1)&#123; qry[i].vl-=dis[qry[i].id]; update(1,1,m,i,m,pii(qry[i].vl,qry[i].id)); &#125; else&#123; qry[i].vl+=dis[qry[i].id]; if(i!=1)update(1,1,m,1,i-1,pii(inf-qry[i].vl,qry[i].id)); S[qry[i].id].ins(qry[i].vl); //sgt::update(1,1,n,num[qry[i].id],S[qry[i].id].top()); sgt::update(num[qry[i].id],S[qry[i].id].top()); &#125; &#125; suf[m]=0; for(ri i=m-1;i;--i)suf[i]=suf[i+1]+(qry[i+1].op==2); solve(1,1,m); return 0;&#125; C 一个比较套路化的容斥，基本上跟 PEPEPE 的 permuted matricespermuted\\ matricespermuted matrices 是一样的，就不细讲了 然后要加上一个分治 nttnttntt CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(int*s)&#123; int top=0; char ch=gc(); while(ch!='&lt;'&amp;&amp;ch!='&gt;')ch=gc(); while(ch=='&lt;'||ch=='&gt;')s[++top]=ch=='&gt;',ch=gc(); return top;&#125;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;int lim,tim,w[22],invv[22];vector&lt;int&gt;rev[22];inline void init_ntt()&#123; invv[0]=1; for(ri iv=mod+1&gt;&gt;1,i=1;i&lt;22;++i)invv[i]=mul(invv[i-1],iv); w[21]=ksm(3,(mod-1)&gt;&gt;22); for(ri i=20;~i;--i)w[i]=mul(w[i+1],w[i+1]);&#125;inline void init(const int&amp;up)&#123; lim=1,tim=0; while(lim&lt;up)lim&lt;&lt;=1,++tim; if(rev[tim].size())return; rev[tim].resize(lim); for(ri i=1;i&lt;lim;++i)rev[tim][i]=(rev[tim][i&gt;&gt;1]&gt;&gt;1)|((i&amp;1)&lt;&lt;(tim-1));&#125;inline void ntt(poly&amp;a,int typ)&#123; for(ri i=0;i&lt;lim;++i)if(i&lt;rev[tim][i])swap(a[i],a[rev[tim][i]]); for(ri i=1,t=0,a0,a1;i&lt;lim;i&lt;&lt;=1,++t)for(ri j=0,len=i&lt;&lt;1;j&lt;lim;j+=len) for(ri k=0,mt=1;k&lt;i;++k,Mul(mt,w[t]))a0=a[j+k],a1=mul(mt,a[j+k+i]),a[j+k]=add(a0,a1),a[j+k+i]=dec(a0,a1); if(~typ)return; reverse(++a.begin(),a.end()); for(ri i=0;i&lt;lim;++i)Mul(a[i],invv[tim]);&#125;inline poly operator*(poly a,poly b)&#123; int n=a.size(),m=b.size(),t=n+m-1; if(t&lt;=64)&#123; poly c(t); for(ri i=0;i&lt;n;++i)for(ri j=0;j&lt;m;++j)Add(c[i+j],mul(a[i],b[j])); return c; &#125; init(t); a.resize(lim),ntt(a,1); b.resize(lim),ntt(b,1); for(ri i=0;i&lt;lim;++i)Mul(a[i],b[i]); return ntt(a,-1),a.resize(t),a;&#125;poly f,g;const int N=1e5+5;int s[N];int n,cnt[N],fac[N],ifac[N];inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=n;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=n;++i)Mul(ifac[i],ifac[i-1]); ifac[0]=0;&#125;inline void solve(int l,int r)&#123; if(l==r)return; int mid=l+r&gt;&gt;1; solve(l,mid); poly a(mid-l+1),b(r-l+1); for(ri i=l;i&lt;=mid;++i)a[i-l]=mul(f[i],mul(s[i],cnt[i])); b.resize(r-l+1); for(ri i=0;i&lt;=r-l;++i)b[i]=ifac[i]; a=a*b; for(ri i=mid+1;i&lt;=r;++i)Add(f[i],mul(a[i-l],cnt[i-1])); solve(mid+1,r);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif init_ntt(); n=Read(s)+1; f.resize(n+1); init(); s[0]=1,cnt[0]=0; f[0]=1; for(ri i=1;i&lt;=n;++i)cnt[i]=cnt[i-1]+s[i]; for(ri i=0;i&lt;=n;++i)cnt[i]=cnt[i]&amp;1?mod-1:1; solve(0,n); cout&lt;&lt;mul(f[n],fac[n]); return 0;&#125; 告辞","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"CodeForces 1228 简要题解","slug":"CF1228","date":"2019-10-12T15:45:41.000Z","updated":"2019-10-22T23:48:26.300Z","comments":true,"path":"CF1228/","link":"","permalink":"http://ldxcaicai.github.io/CF1228/","excerpt":"","text":"A 模拟 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;int l,r;inline bool check(int x)&#123; int cnt[15]; for(ri i=0;i&lt;10;++i)cnt[i]=0; while(x)++cnt[x%10],x/=10; for(ri i=0;i&lt;10;++i)if(cnt[i]&gt;1)return 0; return 1;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif l=read(),r=read(); for(ri i=l;i&lt;=r;++i)&#123; if(check(i))return cout&lt;&lt;i,0; &#125; puts(\"-1\"); return 0;&#125; B 模拟 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=1005;int n,m,f[N][N],a[N],b[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); for(ri i=1;i&lt;=m;++i)b[i]=read(); int res=1; for(ri i=1;i&lt;=n;++i)&#123; for(ri j=1;j&lt;=m;++j)&#123; if(a[i]&gt;=j&amp;&amp;b[j]+1==i)return puts(\"0\"),0; if(a[i]+1==j&amp;&amp;b[j]&gt;=i)return puts(\"0\"),0; if(b[j]+1==i||a[i]+1==j||a[i]&gt;=j||b[j]&gt;=i)continue; res=add(res,res); &#125; &#125; cout&lt;&lt;res; return 0;&#125; C 分解质因数 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;int x;ll n;vector&lt;int&gt;divv;inline void divid(int x)&#123; for(ri i=2,lm=sqrt(x);i&lt;=lm&amp;&amp;x!=1;++i)&#123; if(x!=x/i*i)continue; divv.pb(i); while(x==x/i*i)x/=i; &#125; if(x^1)divv.pb(x);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif x=read(); n=readl(); divid(x); int res=1; for(ri i=divv.size()-1;~i;--i)&#123; ll mt=divv[i]; while(1)&#123; int tot=(n/mt-n/mt/divv[i])%(mod-1); Mul(res,ksm((ll)mt%mod,tot)); if(!(n/mt/divv[i]))break; mt*=divv[i]; &#125; &#125; cout&lt;&lt;res; return 0;&#125; D 普及-题为啥不放 AAA 啊？？？ CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=3e5+5;int n,m,col[N];vector&lt;int&gt;e[N],tp[4];bool vs[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)col[i]=-1; for(ri u,v,i=1;i&lt;=m;++i)&#123; u=read(),v=read(); e[u].pb(v); e[v].pb(u); &#125; for(ri i=0;i&lt;e[1].size();++i)vs[e[1][i]]=1; for(ri i=1;i&lt;=n;++i)if(!vs[i])tp[1].pb(i),col[i]=1; int ps=-1; for(ri i=1;i&lt;=n;++i)&#123; if(vs[i])&#123; ps=i; break; &#125; &#125; if(ps==-1)return puts(\"-1\"),0; for(ri i=0;i&lt;e[ps].size();++i)if(vs[e[ps][i]])tp[3].pb(e[ps][i]),col[e[ps][i]]=3; for(ri i=1;i&lt;=n;++i)if(col[i]==-1)col[i]=2,tp[2].pb(i); if(!tp[2].size()||!tp[3].size())return puts(\"-1\"),0; if((ll)tp[1].size()*tp[2].size()+(ll)tp[2].size()*tp[3].size()+(ll)tp[3].size()*tp[1].size()!=m)return puts(\"-1\"),0; for(ri i=1;i&lt;=n;++i)for(ri j=0;j&lt;e[i].size();++j)if(col[i]==col[e[i][j]])return puts(\"-1\"),0; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;col[i]&lt;&lt;' '; return 0;&#125; E 简单容斥即可 O(n2)O(n^2)O(n2) ，把式子拆开也可以做到 O(nlog⁡n)O(n\\log n)O(nlogn) CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=255*255;int n,K,fac[N],ifac[N],pw1[N],pw2[N];inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1,pw1[0]=pw2[0]=1,pw1[1]=K,pw2[1]=K-1; for(ri i=2;i&lt;=n*n;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); pw1[i]=mul(pw1[i-1],K); pw2[i]=mul(pw2[i-1],K-1); &#125; for(ri i=2;i&lt;=n*n;++i)Mul(ifac[i],ifac[i-1]);&#125;inline int C(int n,int m)&#123;return mul(fac[n],mul(ifac[m],ifac[n-m]));&#125; int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),K=read(); init(); int res=0; for(ri t,x,i=0;i&lt;=n;++i)for(ri j=0;j&lt;=n;++j)&#123; t=mul(pw1[(n-i)*(n-j)],pw2[n*n-(n-i)*(n-j)]); Mul(t,mul(C(n,i),C(n,j))); (i+j)&amp;1?Dec(res,t):Add(res,t); &#125; cout&lt;&lt;res&lt;&lt;'\\n'; return 0;&#125; F 大分类讨论，不知道为啥我写的那么麻烦=.=，看别人讨论的好像很简单，直接去世了 我的讨论： 自己是叶子 父亲是根 自己不是叶子且父亲不是根 代码丑死了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef vector&lt;int&gt; poly;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=1&lt;&lt;18|5;int n,m,siz[N],Fa[N];vector&lt;int&gt;e[N],RT;#define fail puts(\"0\"),exit(0)void dfs(int p,int ft)&#123; siz[p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; Fa[v]=p; dfs(v,p); siz[p]+=siz[v]; &#125; if(siz[p]*2==n)RT.pb(p),RT.pb(ft);&#125;int ban,ad[N];bool check(int p,int ft)&#123; if(siz[p]==1)return 1; if(p==ban)&#123; vector&lt;pii&gt;tp; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; tp.pb(pii(siz[v],v)); &#125; sort(tp.begin(),tp.end()); if(tp[0].fi!=tp[1].fi)fail; if(tp[0].fi+tp[1].fi+1!=tp[2].fi)fail; return check(tp[0].se,p)&amp;&amp;check(tp[1].se,p)&amp;&amp;check(tp[2].se,p); &#125; else&#123; int son1=0,son2=0; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; if(!son1)son1=v; else son2=v; &#125; if(!son2)return 0; if(siz[son1]+ad[son1]!=siz[son2]+ad[son2])return 0; return check(son1,p)&amp;&amp;check(son2,p); &#125;&#125;bool checkk(int p,int ft)&#123; if(siz[p]==1)return 1; if(p==ban)&#123; vector&lt;pii&gt;tp; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; tp.pb(pii(siz[v],v)); &#125; return tp[0].fi==1; &#125; else&#123; int son1=0,son2=0; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; if(!son1)son1=v; else son2=v; &#125; if(!son2)return 0; if(siz[son1]+ad[son1]!=siz[son2]+ad[son2])return 0; return checkk(son1,p)&amp;&amp;checkk(son2,p); &#125;&#125;void dfss(int p,int ft)&#123; siz[p]=1; int son1=0,son2=0; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; if(!son1)son1=v; else son2=v; dfss(v,p),siz[p]+=siz[v]; &#125; if(siz[son1]!=siz[son2])fail;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif m=read(),n=(1&lt;&lt;m)-2; if(n==2)return cout&lt;&lt;2&lt;&lt;'\\n'&lt;&lt;1&lt;&lt;' '&lt;&lt;2,0; for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v); e[v].pb(u); &#125; int ct1=0,ct2=0,ct3=0; for(ri i=1;i&lt;=n;++i)&#123; if(e[i].size()&gt;4)fail; if(e[i].size()==4)++ct1; if(e[i].size()==2)++ct2; if(e[i].size()==3)++ct3; &#125; if(ct1&gt;1)fail; if(ct1==1)&#123; if(ct2!=1)fail; int ps; for(ps=1;ps&lt;=n;++ps)if(e[ps].size()==2)break; for(ri i=1;i&lt;=n;++i)if(e[i].size()==4)ban=i; dfs(ps,0); int tp=ban; while(tp!=ps)&#123; ad[tp]=1; tp=Fa[tp]; &#125; if(!check(ps,0))fail; cout&lt;&lt;1&lt;&lt;'\\n'; cout&lt;&lt;ban; return 0; &#125; if(ct2&amp;&amp;ct2!=2)fail; if(ct2==2)&#123; int a=0,b=0; for(ri i=1;i&lt;=n;++i)if(e[i].size()==2)&#123; if(!a)a=i; else b=i; &#125; dfs(a,0); ban=b; while(ban!=a)&#123; ad[ban]=1; ban=Fa[ban]; &#125; ban=b; if(checkk(a,0))return cout&lt;&lt;1&lt;&lt;'\\n'&lt;&lt;ban,0; while(ban!=a)&#123; ad[ban]=0; ban=Fa[ban]; &#125; dfs(b,0); ban=a; while(ban!=b)&#123; ad[ban]=1; ban=Fa[ban]; &#125; ban=a; if(checkk(b,0))return cout&lt;&lt;1&lt;&lt;'\\n'&lt;&lt;ban,0; fail; &#125; if(!ct3)fail; dfs(1,0); if(RT.size()!=2)fail; dfss(RT[0],RT[1]),dfss(RT[1],RT[0]); cout&lt;&lt;2&lt;&lt;'\\n'; cout&lt;&lt;min(RT[0],RT[1])&lt;&lt;' '&lt;&lt;max(RT[0],RT[1]); return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"CodeForces 1101 简要题解","slug":"CF1101","date":"2019-10-12T15:31:54.000Z","updated":"2019-10-22T23:48:07.686Z","comments":true,"path":"CF1101/","link":"","permalink":"http://ldxcaicai.github.io/CF1101/","excerpt":"","text":"A 按照题意模拟 CODE 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;const int N=105;int mod,n,m,k;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri l,r,d,tt=read();tt;--tt)&#123; l=read(),r=read(),d=read(); if(l&gt;d)cout&lt;&lt;d&lt;&lt;'\\n'; else cout&lt;&lt;((r/d+1)*d)&lt;&lt;'\\n'; &#125; return 0;&#125; B 从两边开始各扫一遍即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;const int N=105;int mod,n,m,k;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;char s[500005];int len;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif scanf(\"%s\",s+1); len=strlen(s+1); int ps1=-1,ps2=-1,ps3=-1,ps4=-1; for(ri i=1;i&lt;=len;++i)&#123; if(s[i]=='['&amp;&amp;ps1==-1)&#123; ps1=i; &#125; if(s[i]==':'&amp;&amp;ps1!=-1)&#123; ps2=i; break; &#125; &#125; for(ri i=len;i;--i)&#123; if(s[i]==']'&amp;&amp;ps3==-1)&#123; ps3=i; &#125; if(s[i]==':'&amp;&amp;ps3!=-1)&#123; ps4=i; break; &#125; &#125; if(ps1==-1||ps2==-1||ps3==-1||ps4==-1||ps2&gt;=ps4)return cout&lt;&lt;-1,0; int res=4; for(ri i=ps2+1;i&lt;ps4;++i)if(s[i]=='|')++res; cout&lt;&lt;res; return 0;&#125; C 用个栈来模拟贪心即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;int mod;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=2e5+5;int n;struct Node&#123; int l,r,id; friend inline bool operator&lt;(Node a,Node b)&#123;return a.r^b.r?a.r&lt;b.r:a.l&lt;b.l;&#125;&#125;a[N];int ans[N],vl[N&lt;&lt;1],sig;inline int find(int x)&#123;return lower_bound(vl+1,vl+sig+1,x)-vl;&#125;pii stk[N];int top=0,tot=0;inline void insert(int l,int r)&#123; ++tot; int idl=tot,idr=tot; while(top)&#123; if(l&gt;a[stk[top].se].r)break; if(l&gt;=a[stk[top].fi].l)&#123; stk[top].se=tot; return; &#125; idl=stk[top].fi; --top; &#125; stk[++top]=pii(idl,idr);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; n=read(); sig=0; for(ri i=1;i&lt;=n;++i)vl[++sig]=a[i].l=read(),vl[++sig]=a[i].r=read(); sort(vl+1,vl+sig+1); sig=unique(vl+1,vl+sig+1)-vl-1; for(ri i=1;i&lt;=n;++i)a[i].l=find(a[i].l),a[i].r=find(a[i].r),a[i].id=i; sort(a+1,a+n+1); top=tot=0; for(ri i=1;i&lt;=n;++i)insert(a[i].l,a[i].r); if(top==1)&#123; cout&lt;&lt;-1; &#125; else&#123; for(ri i=1;i&lt;=top;++i)&#123; for(ri j=stk[i].fi;j&lt;=stk[i].se;++j)&#123; ans[a[j].id]=2-(i&amp;1); &#125; &#125; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;ans[i]&lt;&lt;' '; &#125; puts(\"\"); &#125; return 0;&#125; D 令边权等于连接两个点的 gcd⁡(i,j)\\gcd(i,j)gcd(i,j) ，然后可以枚举每个数的倍数然后做树形 dpdpdp 求直径 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;int mod;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=2e5+5;int n,a[N],tim[N],timm[N];vector&lt;pii&gt;E[N];vector&lt;int&gt;e[N];int dist=0,len[N];void dfs(int p,int ft,int ct)&#123; len[p]=1; timm[p]=ct; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==ft)continue; dfs(v,p,ct); dist=max(dist,len[p]+len[v]); len[p]=max(len[p],len[v]+1); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)&#123; a[i]=read(); if(a[i]&gt;1)&#123; dist=1; &#125; &#125; for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); E[__gcd(a[u],a[v])].pb(pii(u,v)); &#125; for(ri i=2;i&lt;=200000;++i)&#123; vector&lt;int&gt;t; for(ri j=i;j&lt;=200000;j+=i)&#123; for(ri u,v,k=0;k&lt;E[j].size();++k)&#123; u=E[j][k].fi,v=E[j][k].se; if(tim[u]!=i)&#123; t.pb(u); tim[u]=i; e[u].clear(); &#125; if(tim[v]!=i)&#123; t.pb(v); tim[v]=i; e[v].clear(); &#125; e[u].pb(v),e[v].pb(u); &#125; &#125; for(ri k=0;k&lt;t.size();++k)&#123; if(timm[t[k]]!=i)dfs(t[k],0,i); &#125; t.clear(); &#125; cout&lt;&lt;dist; return 0;&#125; E 普及-题，为啥不放 AAA 啊？？？ 读懂题意即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;int mod;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=5e5+5;int n;char op;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); int mx1=0,mx2=0; for(ri i=1;i&lt;=n;++i)&#123; op=gc(); while(op!='+'&amp;&amp;op!='?')op=gc(); if(op=='+')&#123; int a=read(),b=read(); if(a&gt;b)swap(a,b); mx1=max(mx1,a); mx2=max(mx2,b); &#125; else&#123; int a=read(),b=read(); if(a&gt;b)swap(a,b); puts(a&gt;=mx1&amp;&amp;b&gt;=mx2?\"YES\":\"NO\"); &#125; &#125; return 0;&#125; F 貌似有区间 dpdpdp +单调队列的做法，但我直接随机化+剪枝+二分+单调队列艹过了 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch; return top;&#125;namespace modular&#123; int mod; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=405,M=250005;int n,m,ps[N],s,t,C,r,f[N];inline bool check(ll V)&#123; static int q[N],hd,tl; f[s]=0; q[hd=tl=1]=s; for(ri coe,i=s+1;i&lt;=t;++i)&#123; while(hd&lt;=tl&amp;&amp;(ll)(ps[i]-ps[q[hd]])*C&gt;V)++hd; coe=hd&gt;tl?1e9:f[q[hd]]; if(i==t)return coe&lt;=r; f[i]=coe+1; while(hd&lt;=tl&amp;&amp;f[q[tl]]&gt;=f[i])--tl; q[++tl]=i; &#125;&#125;struct Node&#123;int a,b,c,d;&#125;a[M];int main()&#123; srand(time(0)); #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)ps[i]=read(); for(ri i=1;i&lt;=m;++i)a[i].a=read(),a[i].b=read(),a[i].c=read(),a[i].d=read(); random_shuffle(a+1,a+m+1); ll res=0; for(ri i=1;i&lt;=m;++i)&#123; s=a[i].a,t=a[i].b,C=a[i].c,r=a[i].d; if(check(res))continue; ll l=res+1,r=1e18,ress=1e18; while(l&lt;=r)&#123; ll mid=l+r&gt;&gt;1; if(check(mid))ress=mid,r=mid-1; else l=mid+1; &#125; res=ress; &#125; cout&lt;&lt;res; return 0;&#125; G bzoj2460bzoj2460bzoj2460 弱化版，直接求出前缀和然后线性基即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;namespace modular&#123; int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; &#125;;using namespace modular;const int N=2e5+5;int n,a[N],ok[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1,x;i&lt;=n;++i)&#123; a[i]=read()^a[i-1]; x=a[i]; for(ri j=31;~j;--j)&#123; if(x&gt;&gt;j&amp;1)&#123; if(ok[j])x^=ok[j]; else&#123; ok[j]=x; break; &#125; if(!x)break; &#125; &#125; &#125; if(!a[n])return puts(\"-1\"),0; int res=0; for(ri i=31;~i;--i)if(ok[i])++res; cout&lt;&lt;res; return 0;&#125; 感觉以后还是得 vpvpvp div1div1div1 场 告辞","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"AtCoder Grand Contest 039 简要题解","slug":"AGC039","date":"2019-10-10T03:43:21.000Z","updated":"2019-10-11T15:33:29.541Z","comments":true,"path":"AGC039/","link":"","permalink":"http://ldxcaicai.github.io/AGC039/","excerpt":"","text":"A 简单分类讨论即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;typedef pair&lt;int,int&gt; pii;typedef long long ll;typedef unsigned long long Ull;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;char s[105];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif int len=Read(s),k=read(); if(s[1]!=s[len])&#123; int res=0; for(ri l=1,r;l&lt;=len;l=r+1)&#123; r=l; while(r!=len&amp;&amp;s[r+1]==s[r])++r; res+=(r-l+1)/2; &#125; cout&lt;&lt;(ll)res*k; return 0; &#125; bool ff=1; for(ri i=2;i&lt;=len;++i)if(s[i]!=s[i-1])&#123; ff=0; break; &#125; if(ff)&#123; cout&lt;&lt;(ll)len*k/2; return 0; &#125; int ct=2,ps1,ps2; for(ri i=2;i&lt;=len;++i)&#123; if(s[i]==s[i-1])++ct; else&#123; ps1=i; break; &#125; &#125; for(ri i=len-1;i;--i)&#123; if(s[i]==s[i+1])++ct; else&#123; ps2=i; break; &#125; &#125; int res=ct/2; for(ri l=ps1,r;l&lt;=ps2;l=r+1)&#123; r=l; while(r!=ps2&amp;&amp;s[r+1]==s[r])++r; res+=(r-l+1)/2; &#125; ll ans=(ll)res*(k-1); for(ri l=1,r;l&lt;=len;l=r+1)&#123; r=l; while(r!=len&amp;&amp;s[r+1]==s[r])++r; ans+=(r-l+1)/2; &#125; cout&lt;&lt;ans; return 0;&#125; B 先判掉奇环，然后枚举每个点做根求 bfsbfsbfs 树的 mxdepmxdepmxdep 更新最大值即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;typedef pair&lt;int,int&gt; pii;typedef long long ll;typedef unsigned long long Ull;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch,ch=gc(); return top;&#125;char s[205];int n,dep[205];bool vs[205];vector&lt;int&gt;e[205];void check(int p)&#123; vs[p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if(vs[v=e[p][i]])&#123; if((dep[v]+dep[p])&amp;1)continue; puts(\"-1\"); exit(0); &#125; dep[v]=dep[p]+1;check(v); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)&#123; Read(s); for(ri j=1;j&lt;=n;++j)if(s[j]=='1')e[i].pb(j); &#125; check(1); int mx=0; for(ri s=1;s&lt;=n;++s)&#123; memset(dep,0,sizeof(dep)); memset(vs,0,sizeof(vs)); queue&lt;int&gt;q; q.push(s),dep[s]=1; while(q.size())&#123; int x=q.front(); q.pop(); vs[x]=1; for(ri i=0,v;i&lt;e[x].size();++i)&#123; if(vs[v=e[x][i]])continue; dep[v]=dep[x]+1; vs[v]=1; q.push(v); &#125; &#125; for(ri i=1;i&lt;=n;++i)mx=max(mx,dep[i]); &#125; cout&lt;&lt;mx; return 0;&#125; C 模拟一下会发现每次把最后一位删掉，然后在第一位加上相反的数字，打表再证明可以发现所有非 nnn 的约数它们的贡献相同都是 2n2n2n ，对于 nnn 满足 n/xn/xn/x 为奇数的约数 xxx 其贡献为 2x2x2x 那么我们枚举 xxx 然后跟它的倍数或者约数容斥即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch,ch=gc(); return top;&#125;const int mod=998244353;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;const int N=2e5+5;char s[N],t[N];int n;int pre[N],f[N];inline int solve(int len)&#123; int res=pre[len]; for(ri i=1;i&lt;=len;++i)t[i]=s[i]; for(ri l=len+1,r=len&lt;&lt;1;l&lt;=n;l+=len,r+=len)&#123; for(ri i=l;i&lt;=r;++i)&#123; t[i]=t[i-len]^1; if(s[i]&gt;t[i])return res+1; if(s[i]&lt;t[i])return res; &#125; &#125; return res+1;&#125;int pri[N],tot=0;bool vs[N];inline void init()&#123; for(ri i=2;i&lt;=n;++i)&#123; if(!vs[i])pri[++tot]=i; for(ri j=1,up=n/i;j&lt;=tot&amp;&amp;pri[j]&lt;=up;++j)&#123; vs[i*pri[j]]=1; if(i==i/pri[j]*pri[j])break; &#125; &#125;&#125;int a[N],b[N],top;vector&lt;int&gt;divv;void dfs(int ps,int mt)&#123; divv.pb(mt); for(ri mlt=a[ps],i=ps;i&lt;=top;++i,mlt=a[i])for(ri j=1;j&lt;=b[i];++j,mlt*=a[i])dfs(i+1,mt*mlt);&#125;inline int calc(int lm)&#123; int x=lm; top=0; for(ri i=1,up=sqrt(lm);i&lt;=tot&amp;&amp;pri[i]&lt;=up&amp;&amp;lm!=1;++i)&#123; if(lm!=lm/pri[i]*pri[i])continue; ++top,a[top]=pri[i],b[top]=0; while(lm==lm/pri[i]*pri[i])lm/=pri[i],++b[top]; &#125; if(lm^1)a[++top]=lm,b[top]=1; divv.clear(); dfs(1,1); int res=0; for(ri i=divv.size()-1;~i;--i)if(divv[i]!=1)if((n/(x/divv[i]))&amp;1)Add(res,f[x/divv[i]]); return res;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),Read(s); init(); int res=0; for(ri i=1;i&lt;=n;++i)pre[i]=add(add(pre[i-1],pre[i-1]),s[i]-'0'); res=add(pre[n],1); Mul(res,n*2); for(ri tp,i=1;i*3&lt;=n;++i)&#123; if(n%i)continue; if(!((n/i)&amp;1))continue; f[i]=dec(solve(i),calc(i)); Dec(res,mul(2*(n-i),f[i])); &#125; cout&lt;&lt;res; return 0;&#125; D 为啥是MO题啊2333 对于一个 ΔABC\\Delta ABCΔABC ，令 A′A&#x27;A′ 为 BCBCBC 不包含 AAA 的弧的中点， B′C′B&#x27;C&#x27;B′C′ 同理，这样 ΔA′B′C′\\Delta A&#x27;B&#x27;C&#x27;ΔA′B′C′ 的重心即为 ΔABC\\Delta ABCΔABC 的内心，然后利用欧拉线的性质分类讨论计算贡献即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch,ch=gc(); return top;&#125;const int mod=998244353;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;const int N=3005;int t[N],n,L;const double pi=acos(-1.0);int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),L=read(); for(ri i=1;i&lt;=n;++i)t[i]=read(); double resx=0,resy=0,Ang=pi/L; for(ri i=1;i&lt;n;++i)for(ri j=i+1;j&lt;=n;++j)&#123; resx+=cos(Ang*(t[i]+t[j]))*(n-(j-i+1)); resy+=sin(Ang*(t[i]+t[j]))*(n-(j-i+1)); resx+=cos(Ang*(t[i]+t[j])+pi)*(j-i-1); resy+=sin(Ang*(t[i]+t[j])+pi)*(j-i-1); &#125; printf(\"%.10lf %.10lf\",resx*6.0/n/(n-1)/(n-2),resy*6.0/n/(n-1)/(n-2)); return 0;&#125; E fl,r,pf_{l,r,p}fl,r,p​ 表示对于区间 [l,r][l,r][l,r] ，点 ppp 连向了 [l,r][l,r][l,r] 外的区间的方案数，然后 O(n4)O(n^4)O(n4) 枚举新的小区间即可,时间复杂度 O(n7)O(n^7)O(n7) CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960&lt;details&gt;&lt;summary&gt;CODE&lt;/summary&gt;#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;typedef long long ll;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(bool*s)&#123; int top=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))s[++top]=ch^48,ch=gc(); return top;&#125;const int N=45;int n;ll f[N][N][N],res=0;bool trans[N][N];ll dfs(int l,int r,int p)&#123; if(~f[l][r][p])return f[l][r][p]; if(l==r)return f[l][r][p]=1; if(l==p||r==p)return f[l][r][p]=0; ll res=0ll; for(ri _l=l;_l&lt;p;++_l)for(ri _r=r;_r&gt;p;--_r)if(trans[_l][_r]) for(ri a=_l;a&lt;p;++a)for(ri b=_r;b&gt;p;--b)res+=dfs(l,a,_l)*dfs(a+1,b-1,p)*dfs(b,r,_r); return f[l][r][p]=res;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); memset(f,-1,sizeof(f)); for(ri i=1;i&lt;=n*2;++i)Read(trans[i]); if(n==1)return cout&lt;&lt;trans[1][2],0; for(ri i=3;i&lt;n*2;++i)(trans[1][i])&amp;&amp;(res+=dfs(2,n*2,i)); cout&lt;&lt;res; return 0;&#125; F 考虑转化问题成为如下新模型： 要求填上两个矩阵 A,BA,BA,B ，满足 AAA 的行最大值不超过 BBB 的行最小值， AAA 的列最大值不超过 BBB 的列最小值，求方案数 那么就可以设计出枚举两维转移的 dpdpdp ，发现好像还能用 fftfftfft 优化到 O(n4log⁡n)O(n^4\\log n)O(n4logn) 但仍然不够，我们需要一个 O(n4)O(n^4)O(n4) 做法，因为有权值的限制状态应该是 O(n3)O(n^3)O(n3) 的，因此需要定义可以将横纵坐标分开或者分步转移的状态 于是令 xix_ixi​ 为 AAA 第 iii 行最大值， yiy_iyi​ 为 BBB 第 iii 列最小值 设 fi,j,kf_{i,j,k}fi,j,k​ 表示已经枚举了 iii 行 jjj 列，已经填上了 AAA 数组这 iii 行 jjj 列并集的位置，已接近填上了 BBB 数组这 iii 行 jjj 列交集的位置，且满足已经填好的 xi,yi≤kx_i,y_i\\le kxi​,yi​≤k 的可行状态的方案数 然后就可以分步枚举行列的增量转移到 fi+a,j+b,k+1f_{i+a,j+b,k+1}fi+a,j+b,k+1​ 了 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=105;int n,m,L,f[N][N][N][2],C[N][N],pw[4][N];inline void init()&#123; for(ri i=0,up=max(n,m);i&lt;=up;++i)&#123; C[i][0]=1; for(ri j=1;j&lt;=i;++j)C[i][j]=add(C[i-1][j-1],C[i-1][j]); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),L=read(),mod=read(); init(); f[0][0][0][0]=1; for(ri i=0;i&lt;4;++i)pw[i][0]=1; for(ri vl=0;vl&lt;L;++vl)&#123; for(ri i=1,up=max(n,m);i&lt;=up;++i)&#123; pw[0][i]=pw[1][i]; pw[1][i]=mul(pw[1][i-1],vl+1); pw[2][i]=mul(pw[2][i-1],L-vl); pw[3][i]=mul(pw[3][i-1],L-vl-1); &#125; for(ri mt,mlt,a=0;a&lt;=n;++a)for(ri b=0;b&lt;=m;++b)if(f[vl][a][b][0])&#123; mt=1,mlt=mul(pw[2][b],dec(pw[1][m-b],pw[0][m-b])); for(ri t=0;a+t&lt;=n;++t,Mul(mt,mlt)) Add(f[vl][a+t][b][1],mul(f[vl][a][b][0],mul(mt,C[n-a][t]))); &#125; for(ri mt,mlt,a=0;a&lt;=n;++a)for(ri b=0;b&lt;=m;++b)if(f[vl][a][b][1])&#123; mt=1,mlt=mul(pw[1][n-a],dec(pw[2][a],pw[3][a])); for(ri t=0;b+t&lt;=m;++t,Mul(mt,mlt)) Add(f[vl+1][a][b+t][0],mul(f[vl][a][b][1],mul(mt,C[m-b][t]))); &#125; &#125; cout&lt;&lt;f[L][n][m][0]; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"2019.10.09 模拟测试题解","slug":"191009test","date":"2019-10-10T03:27:23.000Z","updated":"2019-10-11T15:33:33.345Z","comments":true,"path":"191009test/","link":"","permalink":"http://ldxcaicai.github.io/191009test/","excerpt":"","text":"A 题意简述： 给一个长度为 nnn 的数组，每个数都为 0,1,⋯ ,90,1,\\cdots,90,1,⋯,9 中的一个，给出 QQQ 个限制 (l,r,v)(l,r,v)(l,r,v) 表示区间 [l,r][l,r][l,r] 的乘积模 101010 的余数为 vvv ，问合法数组数 数据范围： n≤100n\\le100n≤100 q≤50q\\le50q≤50 解题思路： 考虑转化为计算模 222 和模 555 的方案数再乘起来 然后发现除了 000 都有逆元，容易想到把强制不为 000 的位置和可能为 000 的位置分开考虑，前者在给区间进行简单操作后可以直接算，后者可以用简单 dpdpdp 算 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; const int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=105,Q=55;struct F&#123; int l,r,v; F(int l=0,int r=0,int v=0):l(l),r(r),v(v)&#123;&#125; friend inline bool operator&lt;(F a,F b)&#123;return a.l^b.l?a.l&lt;b.l:a.r&lt;b.r;&#125;&#125;a[N],ori[N],vl[N];int n,q,ps[N],top,coe,sig,tot,Inv[5]=&#123;0,1,3,2,4&#125;,f[N],pw[N];pii L[N],R[N];bool ban[N];inline bool insert(F x)&#123; while(1)&#123; if(!L[x.l].fi&amp;&amp;!R[x.r].fi)break; if(L[x.l].fi==x.r)return x.v==L[x.l].se; if(L[x.l].fi)&#123; if(L[x.l].fi&gt;x.r)&#123; swap(x.v,L[x.l].se); R[L[x.l].fi]=pii(0,0); swap(x.r,L[x.l].fi); R[L[x.l].fi]=pii(x.l,L[x.l].se); &#125; (x.v*=Inv[L[x.l].se])%=coe; x.l=L[x.l].fi+1; &#125; else&#123; if(R[x.r].fi&lt;x.l)&#123; swap(x.v,R[x.r].se); L[R[x.r].fi]=pii(0,0); swap(x.l,R[x.r].fi); L[R[x.r].fi]=pii(x.r,R[x.r].se); &#125; (x.v*=Inv[R[x.r].se])%=coe; x.r=R[x.r].fi-1; &#125; &#125; ++sig; L[x.l]=pii(x.r,x.v); R[x.r]=pii(x.l,x.v); return 1;&#125;inline int solve1()&#123; if(coe==2)return 1; sig=0; for(ri i=1;i&lt;=top;++i)L[i]=R[i]=pii(0,0); for(ri i=1;i&lt;=tot;++i)if(!insert(vl[i]))return 0; return ksm(coe-1,top-sig);&#125;inline bool check(int len,int ps)&#123; for(ri i=tot;i&amp;&amp;vl[i].l&gt;ps;--i)if(vl[i].r&lt;=len)return 0; return 1;&#125;inline int solve2()&#123; sort(vl+1,vl+tot+1); pw[0]=1; f[0]=1; for(ri len=1;len&lt;=top;++len)&#123; pw[len]=mul(pw[len-1],coe-1); f[len]=0; for(ri ps=0;ps&lt;=len;++ps)check(len,ps)&amp;&amp;(Add(f[len],mul(pw[len-ps],ps?f[ps-1]:1)),1); &#125; return f[top];&#125;inline void fix1()&#123; tot=0; for(ri i=1;i&lt;=q;++i)if(a[i].v)&#123; ++tot; vl[tot].l=lower_bound(ps+1,ps+top+1,a[i].l)-ps; vl[tot].r=lower_bound(ps+1,ps+top+1,a[i].r)-ps; vl[tot].v=a[i].v; &#125;&#125;inline void fix2()&#123; tot=0; for(ri t,i=1;i&lt;=q;++i)if(!a[i].v)&#123; ++tot; for(t=1;t&lt;=top&amp;&amp;ps[t]&lt;a[i].l;++t); vl[tot].l=t; for(t=top;t&amp;&amp;ps[t]&gt;a[i].r;--t); vl[tot].r=t; vl[tot].v=a[i].v; &#125;&#125;inline int solve()&#123; for(ri i=1;i&lt;=n;++i)ban[i]=0; for(ri i=1;i&lt;=q;++i)if(a[i].v) for(ri j=a[i].l;j&lt;=a[i].r;++j)ban[j]=1; for(ri i=1;i&lt;=q;++i)if(!a[i].v)&#123; bool ff=0; for(ri j=a[i].l;j&lt;=a[i].r;++j)if(!ban[j])&#123;ff=1;break;&#125; if(!ff)return 0; &#125; top=0; for(ri i=1;i&lt;=n;++i)if(ban[i])ps[++top]=i; fix1(); int res=solve1(); top=0; for(ri i=1;i&lt;=n;++i)if(!ban[i])ps[++top]=i; fix2(); return mul(res,solve2());&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),q=read(); for(ri l,r,v,i=1;i&lt;=q;++i)&#123; l=read()+1,r=read()+1,v=read(); ori[i]=F(l,r,v); &#125; for(ri i=1;i&lt;=q;++i)a[i]=ori[i],a[i].v%=2; coe=2; int res=solve(); for(ri i=1;i&lt;=q;++i)a[i]=ori[i],a[i].v%=5; coe=5; cout&lt;&lt;mul(res,solve()); return 0;&#125; B 题意简述： 对于一张 nnn 个点的无向完全图，每条边有 PPP 的概率出现，问等概率随机一个点，从 111 号点到其的最短路长度（不连通答案为 10910^9109 )的期望 数据范围: n≤400n\\le400n≤400 解题思路： 考虑定义状态 Pi,jP_{i,j}Pi,j​ 表示考虑了 iii 个点的分层图，最后一层有 jjj 个点，到达这个状态的概率， Ei,jE_{i,j}Ei,j​ 同理不过换成了期望，这样就能边 dpdpdp 边统计答案，转移可以考虑新加进来的一层和当前最后一层的连边情况，复杂度 O(n3)O(n^3)O(n3) CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;typedef long long ll;namespace modular&#123; const int mod=998244353; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125; &#125;using namespace modular;const int N=405;int n,E[N][N],P[N][N],fac[N],ifac[N],pw2[N*N],coe[N][N],_P;inline int C(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],mul(ifac[m],ifac[n-m]));&#125;inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1,pw2[0]=1; pw2[1]=dec(1,_P); for(ri i=2;i&lt;=n;++i)&#123; fac[i]=mul(fac[i-1],i); ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); &#125; for(ri i=2;i&lt;=n*n;++i)pw2[i]=mul(pw2[i-1],pw2[1]); for(ri i=2;i&lt;=n;++i)Mul(ifac[i],ifac[i-1]); for(ri i=1;i&lt;=n;++i)&#123; coe[i][0]=1; coe[i][1]=dec(1,pw2[i]); for(ri j=2;j&lt;=n;++j)coe[i][j]=mul(coe[i][j-1],coe[i][1]); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),_P=mul(ksm(1000000,mod-2),read()); init(); int res=0; P[1][1]=1; for(ri i=1;i&lt;n;++i)for(ri j=1;j&lt;=i;++j)&#123; if(i&gt;1&amp;&amp;i==j)continue; Add(res,mul(add(E[i][j],P[i][j]),coe[j][1])); Add(res,mul(1000000000%mod,mul(pw2[j*(n-i)],P[i][j]))); for(ri k=1;k+i&lt;n;++k)&#123; Add(P[i+k][k],mul(mul(P[i][j],coe[j][k]),mul(C(n-i-1,k),pw2[j*(n-i-k)]))); Add(E[i+k][k],mul(mul(add(P[i][j],E[i][j]),coe[j][k]),mul(C(n-i-1,k),pw2[j*(n-i-k)]))); &#125; &#125; cout&lt;&lt;mul(res,mul(n-1,ksm(1000000,n*n))); return 0;&#125; C 题意简述： 求有多少本质不同的不超过 nnn 个点的、无重边、可以有自环、存在至少一条欧拉回路的带标号连通无向图 数据范围： n≤45n\\le45n≤45 解题思路： 首先用最小表示法 + burnsideburnsideburnside 求出不要求连体桶的答案，这个方法参见洛谷一道叫做画画的题目，然后就可以用补集转化的思想枚举不连通的情况求出答案 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;namespace modular&#123; int mod=1e9+7; inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125; inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125; inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125; inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125; inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125; inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;&#125;using namespace modular;const int N=55;int n,fac[N],ifac[N],inv[N],pw[N*N*2];inline void init()&#123; inv[1]=fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=n;++i)&#123; fac[i]=mul(fac[i-1],i); inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); ifac[i]=mul(ifac[i-1],inv[i]); &#125; pw[0]=1; for(ri i=1;i&lt;=n*n*2;++i)pw[i]=add(pw[i-1],pw[i-1]);&#125;int res,a[N],cnt[N],vl[N],top=0,ft[N],up;inline int find(int x)&#123;return x^ft[x]?ft[x]=find(ft[x]):x;&#125;inline int gcd(int a,int b)&#123;int t;while(b)t=a,a=b,b=t-t/a*a;return a;&#125;inline void update()&#123; int coe=1,ss=0; for(ri i=1;i&lt;=up;++i)Mul(coe,ifac[cnt[i]]),ft[i]=i; for(ri i=1;i&lt;=top;++i)&#123; ss+=(a[i]-1)/2; vl[i]=!(a[i]&amp;1); Mul(coe,inv[a[i]]); &#125; for(ri x,y,fx,fy,g,i=1;i&lt;top;++i)for(ri j=i+1;j&lt;=top;++j)&#123; g=gcd(a[i],a[j]); x=(a[j]/g)&amp;1,y=(a[i]/g)&amp;1; if(x^y)(x?vl[i]:vl[j])+=g; else&#123; ss+=g; if(x&amp;y)&#123; fx=find(i); fy=find(j); if(fx^fy)ft[fx]=fy; &#125; &#125; &#125; for(ri i=1;i&lt;=top;++i)if(find(i)!=i)vl[find(i)]+=vl[i]; for(ri i=1;i&lt;=top;++i)if(find(i)==i)ss+=max(vl[i],1); Add(res,mul(coe,pw[ss]));&#125;inline void dfs(int sz,int all)&#123; if(!all)return update(); if(sz&gt;all)return; for(ri i=sz;i&lt;=all;++i)&#123; ++cnt[i]; a[++top]=i; dfs(i,all-i); --cnt[i]; --top; &#125;&#125;inline int C(int n,int m)&#123; if(n&lt;m)return 0; int ret=ifac[m]; for(ri i=0;i&lt;m;++i)Mul(ret,n-i); return ret;&#125;int f[N],g[N],h[N];inline void IEP()&#123; res=0; g[0]=1; for(ri i=1;i&lt;=n;++i)&#123; h[i]=dec(f[i],g[i]); for(ri j=n;j;--j)for(ri k=1;i*k&lt;=j;++k)Add(g[j],mul(g[j-i*k],C(add(h[i],k-1),k))); &#125; for(ri i=1;i&lt;=n;++i)Add(res,h[i]); cout&lt;&lt;dec(res,1);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),mod=read(); init(); for(up=1;up&lt;=n;++up)&#123; res=0; dfs(1,up); f[up]=res; &#125; IEP(); return 0;&#125;","categories":[{"name":"private","slug":"private","permalink":"http://ldxcaicai.github.io/categories/private/"}],"tags":[{"name":"考试题解","slug":"考试题解","permalink":"http://ldxcaicai.github.io/tags/%E8%80%83%E8%AF%95%E9%A2%98%E8%A7%A3/"}]},{"title":"2019.10.07 模拟测试题解","slug":"191007test","date":"2019-10-10T03:08:47.000Z","updated":"2019-10-11T15:33:34.569Z","comments":true,"path":"191007test/","link":"","permalink":"http://ldxcaicai.github.io/191007test/","excerpt":"","text":"题目来源： A:CF793GA:CF793GA:CF793G B:CF335EB:CF335EB:CF335E C:CF809EC:CF809EC:CF809E A 题意简述： 给你一个 n×nn\\times nn×n 的网格图和 qqq 个不相交的矩形，问除开这 qqq 个矩形剩下的格子中最多能放多少个互不影响的車 数据范围： n≤10000n\\le10000n≤10000 q≤10000q\\le10000q≤10000 解题思路： 暴力是很显然的按照行列建二分图然后最大匹配，正解可以考虑用数据结构优化建图，简单思考后容易想到扫描线+主席树，WOJ上被卡常了什么辣鸡评测姬 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;typedef long long ll;const int N=10005,M=6e6+5,inf=0x3f3f3f3f;int n,m;struct edge&#123;int v,next,c;&#125;;namespace dinic&#123; int s,t,first[M],cnt,d[M],cur[M]; edge e[M]; inline void addedge(int u,int v,int c)&#123;e[++cnt]=(edge)&#123;v,first[u],c&#125;,first[u]=cnt;&#125; inline void add(int u,int v,int c)&#123;if(!c)return;addedge(u,v,c),addedge(v,u,0);&#125; inline bool bfs()&#123; static int que[M],hd,tl; for(ri i=s;i&lt;=t;++i)d[i]=-1; d[s]=0,que[hd=tl=1]=s; while(hd&lt;=tl)&#123; int x=que[hd++]; for(ri i=first[x],v;~i;i=e[i].next)&#123; v=e[i].v; if(~d[v]||e[i].c&lt;=0)continue; d[v]=d[x]+1; if(v==t)return 1; que[++tl]=v; &#125; &#125; return 0; &#125; inline int dfs(int p,int f)&#123; if(!f||p==t)return f; int flow=f; for(ri i=first[p],v,tp;~i;i=e[i].next)&#123; if(!flow)return f; v=e[i].v; if(d[v]&gt;d[p]&amp;&amp;e[i].c&gt;0)&#123; tp=dfs(v,min(flow,e[i].c)); (!tp)&amp;&amp;(d[v]=-1); e[i].c-=tp,e[i^1].c+=tp,flow-=tp; &#125; &#125; return f-flow; &#125; inline int solve()&#123; int res=0,tp=0; while(bfs())while((tp=dfs(s,inf)))res+=tp; return res; &#125;&#125;namespace subtask1&#123; int det[105][105]; inline void Main()&#123; dinic::cnt=-1; dinic::s=0,dinic::t=2*n+1; for(ri i=0;i&lt;=n*2+1;++i)dinic::first[i]=-1; for(ri i=1;i&lt;=n;++i)dinic::add(0,i,1),dinic::add(i+n,n*2+1,1); for(ri x1,x2,y1,y2,i=1;i&lt;=m;++i)&#123; x1=read(),y1=read(),x2=read(),y2=read(); ++det[x1][y1],--det[x1][y2+1],--det[x2+1][y1],++det[x2+1][y2+1]; &#125; for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=n;++j)&#123; det[i][j]+=det[i-1][j]+det[i][j-1]-det[i-1][j-1]; if(!det[i][j])dinic::add(i,j+n,1); &#125; cout&lt;&lt;dinic::solve(); exit(0); &#125;&#125;int all=0,idx[M],rt[N],tot=0,son[M][2],siz[M];#define lc (son[p][0])#define rc (son[p][1])#define mid (l+r&gt;&gt;1)inline void build(int&amp;p,int l,int r)&#123; p=++tot,siz[p]=r-l+1; idx[p]=++all,dinic::first[all]=-1; if(l==r)&#123; dinic::add(idx[p],l+n,1); return; &#125; build(lc,l,mid),build(rc,mid+1,r); dinic::add(idx[p],idx[lc],siz[lc]); dinic::add(idx[p],idx[rc],siz[rc]);&#125;inline void update(int&amp;p,int o,int O,int l,int r,int ql,int qr,int v)&#123; p=++tot; siz[p]=siz[o]+v*(min(qr,r)-max(ql,l)+1),lc=son[o][0],rc=son[o][1]; idx[p]=++all,dinic::first[all]=-1; if(ql&lt;=l&amp;&amp;r&lt;=qr)&#123; if(l==r)dinic::add(idx[p],l+n,1); else&#123; dinic::add(idx[p],idx[son[O][0]],siz[son[O][0]]); dinic::add(idx[p],idx[son[O][1]],siz[son[O][1]]); &#125; return; &#125; if(qr&lt;=mid)update(lc,lc,son[O][0],l,mid,ql,qr,v); else if(ql&gt;mid)update(rc,rc,son[O][1],mid+1,r,ql,qr,v); else update(lc,lc,son[O][0],l,mid,ql,qr,v),update(rc,rc,son[O][1],mid+1,r,ql,qr,v); dinic::add(idx[p],idx[lc],siz[lc]); dinic::add(idx[p],idx[rc],siz[rc]);&#125;#undef lc#undef rc#undef midstruct F&#123;int l,r,typ;friend inline bool operator&lt;(F a,F b)&#123;return a.typ&lt;b.typ;&#125;;&#125;;vector&lt;F&gt;upd[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri x1,y1,x2,y2,i=1;i&lt;=m;++i)&#123; x1=read(),y1=read(),x2=read(),y2=read(); upd[x1].pb((F)&#123;y1,y2,-1&#125;),upd[x2+1].pb((F)&#123;y1,y2,1&#125;); &#125; all=n*2; dinic::s=0; dinic::cnt=-1; for(ri i=0;i&lt;=all;++i)dinic::first[i]=-1; for(ri i=1;i&lt;=n;++i)dinic::add(0,i,1); build(rt[0],1,n); for(ri i=1;i&lt;=n;++i)&#123; rt[i]=rt[i-1]; sort(upd[i].begin(),upd[i].end()); for(ri j=upd[i].size()-1;~j;--j) update(rt[i],rt[i],rt[0],1,n,upd[i][j].l,upd[i][j].r,upd[i][j].typ); dinic::add(i,idx[rt[i]],siz[rt[i]]); &#125; dinic::t=++all,dinic::first[all]=-1; for(ri i=1;i&lt;=n;++i)dinic::add(i+n,all,1); cout&lt;&lt;dinic::solve(); return 0;&#125; B 解题思路： 首先考虑给你一个 BobBobBob 的情况，根据样例不难猜出答案为 nnn 然后考虑给你一个 AliceAliceAlice 的情况，发现可以枚举高度令其一点点增加然后算新滑索减原来滑索的期望增量 CODE 123456789101112131415161718192021222324252627282930313233343536#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;char s[10];int n,H,pw[35];double ipw[35];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif scanf(\"%s%d%d\",s,&amp;n,&amp;H); if(s[0]=='B')&#123; cout&lt;&lt;n; return 0; &#125; pw[0]=ipw[0]=1; for(ri i=1;i&lt;=H;++i)pw[i]=pw[i-1]*2,ipw[i]=1.0/pw[i]; double res=0,mt; for(ri h=1;h&lt;=H;++h)&#123; mt=ipw[h]*ipw[h]; for(ri len=1;len&lt;n;++len)&#123; res+=(n-len)*mt*(pw[h]-pw[h-1]*(1.0+(double)(len-1)/(double)(pw[h]-1))); mt*=1-ipw[h]; &#125; &#125; printf(\"%.10lf\",res+n); return 0;&#125; C 题意简述： 给出一棵树和每个点点权 aia_iai​ 求 ∑i=1n∑j=1nϕ(aiaj)dist(i,j)\\sum\\limits_{i=1}^n\\sum\\limits_{j=1}^n\\phi(a_ia_j)dist(i,j)i=1∑n​j=1∑n​ϕ(ai​aj​)dist(i,j) 数据范围： n≤200000n\\le200000n≤200000 保证 {a}\\{a\\}{a} 是一个排列 解题思路： 考虑到有等式 ϕ(ij)=ϕ(i)ϕ(j)gcd⁡(i,j)ϕ(gcd⁡(i,j))\\phi(ij)=\\phi(i)\\phi(j)\\frac{\\gcd(i,j)}{\\phi(\\gcd(i,j))}ϕ(ij)=ϕ(i)ϕ(j)ϕ(gcd(i,j))gcd(i,j)​ 于是容易想到可以莫比乌斯反演+调和级数枚举点+虚树统计答案 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int mod=1e9+7;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline void Mul(int&amp;a,int b)&#123;a=mul(a,b);&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;const int N=2e5+5;vector&lt;int&gt;e[N],E[N];int n,a[N],b[N],mu[N],phi[N],pri[N],inv[N],tot=0,F[N];bool vs[N];inline void init()&#123; phi[1]=inv[1]=mu[1]=1; for(ri i=2;i&lt;=n;++i)&#123; inv[i]=mul(inv[mod-mod/i*i],mod-mod/i); if(!vs[i])pri[++tot]=i,phi[i]=i-1,mu[i]=mod-1; for(ri j=1,up=n/i;j&lt;=tot&amp;&amp;pri[j]&lt;=up;++j)&#123; vs[i*pri[j]]=1; if(i==i/pri[j]*pri[j])&#123; mu[i*pri[j]]=0; phi[i*pri[j]]=phi[i]*pri[j]; break; &#125; phi[i*pri[j]]=phi[i]*(pri[j]-1); mu[i*pri[j]]=mu[i]?mod-mu[i]:0; &#125; &#125; for(ri i=1;i&lt;=n;++i)for(ri j=i,t=1;j&lt;=n;j+=i,++t)Add(F[j],mul(i,mul(inv[phi[i]],mu[t])));&#125;int siz[N],top[N],dep[N],fa[N],hson[N],dfntot=0,dfn[N];void dfs1(int p)&#123; siz[p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==fa[p])continue; fa[v]=p,dep[v]=dep[p]+1,dfs1(v),siz[p]+=siz[v]; (siz[v]&gt;siz[hson[p]])&amp;&amp;(hson[p]=v); &#125;&#125;void dfs2(int p,int tp)&#123; dfn[p]=++dfntot,top[p]=tp; if(!hson[p])return; dfs2(hson[p],tp); for(ri i=0,v;i&lt;e[p].size();++i)((v=e[p][i])!=hson[p]&amp;&amp;v!=fa[p])&amp;&amp;(dfs2(v,v),1);&#125;inline int lca(int x,int y)&#123; while(top[x]^top[y])&#123; if(dep[top[x]]&lt;dep[top[y]])swap(x,y); x=fa[top[x]]; &#125; return dep[x]&lt;dep[y]?x:y;&#125;bool key[N];int tp=0,stk[N];inline void insert(int x)&#123; if(tp&lt;2)&#123;stk[++tp]=x;return;&#125; int t=lca(x,stk[tp]); if(t==stk[tp])&#123;stk[++tp]=x;return;&#125; while(dfn[stk[tp]]&gt;dfn[t])&#123; if(dfn[t]&gt;=dfn[stk[tp-1]])&#123; E[t].pb(stk[tp]),--tp; if(t^stk[tp])stk[++tp]=t; stk[++tp]=x; return; &#125; E[stk[tp-1]].pb(stk[tp]),--tp; &#125;&#125;int res=0,ss,ss1[N],ss2[N];void dfs(int p)&#123; ss1[p]=ss2[p]=0; for(ri i=0,v;i&lt;E[p].size();++i)&#123; v=E[p][i]; dfs(v); Add(ss2[p],ss2[v]); Add(ss1[p],ss1[v]); &#125; if(key[p])&#123; Add(ss,dec(mul(ss2[p],phi[a[p]]),mul(ss1[p],mul(phi[a[p]],dep[p])))); Add(ss2[p],mul(phi[a[p]],dep[p])); Add(ss1[p],phi[a[p]]); &#125; for(ri i=0,v;i&lt;E[p].size();++i)&#123; v=E[p][i]; Dec(ss2[p],ss2[v]); Dec(ss1[p],ss1[v]); Add(ss,mul(ss1[v],ss2[p])); Add(ss,mul(ss1[p],ss2[v])); Dec(ss,mul(mul(2,dep[p]),mul(ss1[v],ss1[p]))); Add(ss2[p],ss2[v]); Add(ss1[p],ss1[v]); &#125;&#125;void clear(int p)&#123; key[p]=0; for(ri i=0;i&lt;E[p].size();++i)clear(E[p][i]); E[p].clear();&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); init(); for(ri i=1;i&lt;=n;++i)b[a[i]=read()]=i; for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v),e[v].pb(u); &#125; dfs1(1),dfs2(1,1); vector&lt;pii&gt;t; for(ri d=1;d&lt;=n;++d)&#123; t.clear(); for(ri p=d;p&lt;=n;p+=d)t.pb(pii(dfn[b[p]],b[p])),key[b[p]]=1; sort(t.begin(),t.end()); tp=0; if(!key[1])insert(1); for(ri i=0;i&lt;t.size();++i)insert(t[i].se); while(tp&gt;1)E[stk[tp-1]].pb(stk[tp]),--tp; ss=0; dfs(1),clear(1); Add(res,mul(ss,F[d])); &#125; cout&lt;&lt;mul(res,mul(inv[n],inv[n-1])); return 0;&#125;","categories":[{"name":"private","slug":"private","permalink":"http://ldxcaicai.github.io/categories/private/"}],"tags":[{"name":"考试题解","slug":"考试题解","permalink":"http://ldxcaicai.github.io/tags/%E8%80%83%E8%AF%95%E9%A2%98%E8%A7%A3/"}]},{"title":"CodeForces 1220 简要题解","slug":"CF1220","date":"2019-10-04T08:43:54.000Z","updated":"2019-10-22T23:48:20.283Z","comments":true,"path":"CF1220/","link":"","permalink":"http://ldxcaicai.github.io/CF1220/","excerpt":"","text":"A 显然尽量多选 111 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;typedef pair&lt;int,int&gt; pii;typedef long long ll;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;int n,c[5];char s[100005];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); Read(s); for(ri i=1;i&lt;=n;++i)&#123; if(s[i]=='z')++c[0]; if(s[i]=='e')++c[1]; if(s[i]=='r')++c[2]; if(s[i]=='o')++c[3]; if(s[i]=='n')++c[4]; &#125; for(ri i=1,up=min(c[4],min(c[3],c[1]));i&lt;=up;++i)--c[4],--c[3],--c[1],cout&lt;&lt;1&lt;&lt;' '; for(ri i=1,up=min(min(c[0],c[1]),min(c[2],c[3]));i&lt;=up;++i)cout&lt;&lt;0&lt;&lt;' '; return 0;&#125; B 按照题意模拟，先算出 a1a_1a1​ ，然后可以用 ai,1/a1a_{i,1}/a_1ai,1​/a1​ 得出剩余的数 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;typedef pair&lt;int,int&gt; pii;typedef long long ll;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;int n;int res[1005],a[1005][1005];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=n;++j)a[i][j]=read(); res[1]=sqrt((ll)a[1][2]*a[1][3]/a[2][3]); for(ri i=2;i&lt;=n;++i)res[i]=a[1][i]/res[1]; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;res[i]&lt;&lt;' '; puts(\"\"); return 0;&#125; C 显然只用考虑首字母大小，取前缀最小值比一比即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;typedef pair&lt;int,int&gt; pii;typedef long long ll;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;const int N=5e5+5;char s[N];int n;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=Read(s); int premn=26; for(ri i=1;i&lt;=n;++i)&#123; int x=s[i]-'a'; if(premn&lt;x)&#123; puts(\"Ann\"); &#125; else puts(\"Mike\"); premn=min(premn,x); &#125; return 0;&#125; D 手玩一下可以发现规律，设最后保留的集合为 {a1,a2,⋯ ,an}\\{a_1,a_2,\\cdots,a_n\\}{a1​,a2​,⋯,an​}，那么满足 ∀i,j,lcm(ai,aj)/gcd⁡(ai,aj)%2==1\\forall i,j,lcm(a_i,a_j)/\\gcd(a_i,a_j)\\%2==1∀i,j,lcm(ai​,aj​)/gcd(ai​,aj​)%2==1 于是按 222 的幂次分组即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;typedef pair&lt;int,int&gt; pii;typedef long long ll;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;const int N=2e5+5;int n;bool vs[N];ll a[N];bool in[N];vector&lt;ll&gt;vl[105];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); set&lt;int&gt;A,B; for(ri i=1;i&lt;=n;++i)&#123; ll x=readl(),s=x,t=0; while(!(s&amp;1))s&gt;&gt;=1,++t; vl[t].pb(x); &#125; int mx=0; for(ri i=0;i&lt;63;++i)mx=max(mx,(int)vl[i].size()); cout&lt;&lt;n-mx&lt;&lt;'\\n'; bool ff=1; for(ri i=0;i&lt;63;++i)&#123; if(vl[i].size()==mx&amp;&amp;ff)&#123;ff=0;continue;&#125; for(ri j=0;j&lt;vl[i].size();++j)cout&lt;&lt;vl[i][j]&lt;&lt;' '; &#125; return 0;&#125; E 先 tarjantarjantarjan 一次，然后用树形 dpdpdp 即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;typedef pair&lt;int,int&gt; pii;typedef long long ll;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;const int N=2e5+5;int S,n,m,w[N],dfn[N],low[N],tot=0,stk[N],top=0,siz[N],col[N],sig=0;bool vs[N];ll sum[N];vector&lt;int&gt;e[N],E[N];void tarjan(int p,int fa)&#123; dfn[p]=low[p]=++tot,stk[++top]=p; vs[p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if(dfn[v=e[p][i]])&#123; if(v==fa||!vs[v])continue; low[p]=min(low[p],dfn[v]); &#125; else tarjan(v,p),low[p]=min(low[p],low[v]); &#125; if(low[p]==dfn[p])&#123; int x; ++sig; while(1)&#123; x=stk[top--]; ++siz[sig]; col[x]=sig; vs[x]=0; sum[sig]+=w[x]; if(x==p)break; &#125; &#125;&#125;ll F[N][2];bool ok[N];void dfs(int p,int fa)&#123; ok[p]=siz[p]&gt;1; F[p][0]=sum[p]; for(ri i=0,v;i&lt;E[p].size();++i)&#123; if((v=E[p][i])==fa)continue; dfs(v,p); if(ok[v])F[p][0]+=F[v][0],ok[p]=1; &#125; F[p][1]=F[p][0]; for(ri i=0,v;i&lt;E[p].size();++i)&#123; if((v=E[p][i])==fa)continue; if(ok[v])F[p][0]-=F[v][0]; F[p][1]=max(F[p][1],F[p][0]+F[v][1]); if(ok[v])F[p][0]+=F[v][0]; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)w[i]=read(); for(ri u,v,i=1;i&lt;=m;++i)&#123; u=read(),v=read(); e[u].pb(v),e[v].pb(u); &#125; S=read(); tarjan(S,0); for(ri u=1,v;u&lt;=n;++u)for(ri i=0;i&lt;e[u].size();++i)&#123; v=e[u][i]; if(col[u]==col[v])continue; E[col[u]].pb(col[v]); &#125; dfs(col[S],0); cout&lt;&lt;max(F[col[S]][0],F[col[S]][1]); return 0;&#125; F 用线段树维护题意即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=4e5+5;int a[N],n,b[N],dep[N];namespace sgt1&#123; #define lc (p&lt;&lt;1) #define rc (p&lt;&lt;1|1) #define mid (l+r&gt;&gt;1) int mx[N&lt;&lt;2],dt[N&lt;&lt;2]; inline void pushup(int p)&#123;mx[p]=max(mx[lc],mx[rc]);&#125; inline void pushnow(int p,int v)&#123; mx[p]+=v; dt[p]+=v; &#125; inline void pushdown(int p)&#123; if(dt[p])&#123; pushnow(lc,dt[p]); pushnow(rc,dt[p]); dt[p]=0; &#125; &#125; inline void build(int p,int l,int r)&#123; if(l==r)&#123;mx[p]=dep[a[l]];return;&#125; build(lc,l,mid),build(rc,mid+1,r); pushup(p); &#125; inline void modify(int p,int l,int r,int k,int v)&#123; if(l==r)&#123;mx[p]=v;return;&#125; pushdown(p); k&lt;=mid?modify(lc,l,mid,k,v):modify(rc,mid+1,r,k,v); pushup(p); &#125; inline void update(int p,int l,int r,int ql,int qr,int v)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return pushnow(p,v); pushdown(p); if(qr&lt;=mid)update(lc,l,mid,ql,qr,v); else if(ql&gt;mid)update(rc,mid+1,r,ql,qr,v); else update(lc,l,mid,ql,qr,v),update(rc,mid+1,r,ql,qr,v); pushup(p); &#125; inline int query(int p,int l,int r,int k)&#123; if(l==r)return mx[p]; pushdown(p); return k&lt;=mid?query(lc,l,mid,k):query(rc,mid+1,r,k); &#125;&#125;namespace sgt2&#123; int mn[N&lt;&lt;2]; inline void pushup(int p)&#123;mn[p]=min(mn[lc],mn[rc]);&#125; inline void build(int p,int l,int r)&#123; if(l==r)&#123;mn[p]=a[l];return;&#125; build(lc,l,mid),build(rc,mid+1,r); pushup(p); &#125; inline int Ql(int p,int l,int r,int v)&#123; if(mn[p]&gt;=v)return -1; if(l==r)return l; if(mn[lc]&lt;v)return Ql(lc,l,mid,v); return Ql(rc,mid+1,r,v); &#125; inline int Ql(int p,int l,int r,int ql,int qr,int v)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return Ql(p,l,r,v); if(qr&lt;=mid)return Ql(lc,l,mid,ql,qr,v); if(ql&gt;mid)return Ql(rc,mid+1,r,ql,qr,v); int res=Ql(lc,l,mid,ql,qr,v); if(~res)return res; return Ql(rc,mid+1,r,ql,qr,v); &#125; inline int Qr(int p,int l,int r,int v)&#123; if(mn[p]&gt;=v)return -1; if(l==r)return l; if(mn[rc]&lt;v)return Qr(rc,mid+1,r,v); return Qr(lc,l,mid,v); &#125; inline int Qr(int p,int l,int r,int ql,int qr,int v)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return Qr(p,l,r,v); if(qr&lt;=mid)return Qr(lc,l,mid,ql,qr,v); if(ql&gt;mid)return Qr(rc,mid+1,r,ql,qr,v); int res=Qr(rc,mid+1,r,ql,qr,v); if(~res)return res; return Qr(lc,l,mid,ql,qr,v); &#125; #undef lc #undef rc #undef mid&#125;int stk[N],top=0,son[N][2];void dfs(int p)&#123; if(son[p][0])dep[son[p][0]]=dep[p]+1,dfs(son[p][0]); if(son[p][1])dep[son[p][1]]=dep[p]+1,dfs(son[p][1]);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[i]=a[i+n]=read(),b[a[i]]=i; sgt2::build(1,1,n&lt;&lt;1); stk[top=1]=a[1]; for(ri i=2;i&lt;=n;++i)&#123; int x=0; while(top&amp;&amp;stk[top]&gt;a[i])x=stk[top--]; son[a[i]][0]=x; top&amp;&amp;(son[stk[top]][1]=a[i]); stk[++top]=a[i]; &#125; dep[1]=1; dfs(1); sgt1::build(1,1,n); int ans=n+1,res=-1; for(ri l=1,dt=0,r=n;l&lt;=n;++l,++r,++dt)&#123; if(ans&gt;sgt1::mx[1])ans=sgt1::mx[1],res=dt; int ps1=sgt2::Ql(1,1,n&lt;&lt;1,l,r,a[l]); if(~ps1)&#123; if(ps1&lt;=n+1)sgt1::update(1,1,n,l,ps1-1,-1); else sgt1::update(1,1,n,l,n,-1),sgt1::update(1,1,n,1,ps1-1-n,-1); &#125; else sgt1::pushnow(1,-1); int ps2=sgt2::Qr(1,1,n&lt;&lt;1,l+1,r+1,a[l]); if(~ps2)&#123; if(ps2&lt;n)sgt1::update(1,1,n,ps2+1,n,1),sgt1::update(1,1,n,1,r+1-n,1); else sgt1::update(1,1,n,ps2+1-n,r+1-n,1); &#125; else sgt1::pushnow(1,1); sgt1::modify(1,1,n,l,~ps2?sgt1::query(1,1,n,ps2&lt;=n?ps2:ps2-n)+1:1); &#125; cout&lt;&lt;ans&lt;&lt;' '&lt;&lt;res; return 0;&#125; G 考虑到一个等式： ∑i=1ndi=∑i=1n(x−xi)2+(y−yi)2=n(x2+y2)−2x∑i=1nxi−2y∑i=1nyi+∑i=1nxi2+yi2\\begin{aligned} \\sum\\limits_{i=1}^nd_i=&amp;\\sum\\limits_{i=1}^n(x-x_i)^2+(y-y_i)^2\\\\ =&amp;n(x^2+y^2)-2x\\sum\\limits_{i=1}^nx_i-2y\\sum\\limits_{i=1}^ny_i+\\sum\\limits_{i=1}^nx_i^2+y_i^2 \\end{aligned} i=1∑n​di​==​i=1∑n​(x−xi​)2+(y−yi​)2n(x2+y2)−2xi=1∑n​xi​−2yi=1∑n​yi​+i=1∑n​xi2​+yi2​​ 然后把重心 GGG 设置成新的原点，这样中间两坨就没了，变为： (x−Gx)2+(x−Gy)2=1n∑i=1ndi−(xi−Gx)2−(yi−Gy)2\\begin{aligned} (x-G_x)^2+(x-G_y)^2=\\frac1n\\sum\\limits_{i=1}^nd_i-(x_i-G_x)^2-(y_i-G_y)^2 \\end{aligned} (x−Gx​)2+(x−Gy​)2=n1​i=1∑n​di​−(xi​−Gx​)2−(yi​−Gy​)2​ 不难看出这是一个圆的方程，即所有满足要求的解都在这个圆上，然后我们枚举 a1a_1a1​ 所对的半径为 did_idi​ 来得到一个新的圆，求出所有圆的交点一一带入验证是否合法即可 由于数据随机因此复杂度是对的 注意直接 longlonglong doubledoubledouble 有可能会炸精度，于是可以封装一个模意义下的实数来进行运算 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)typedef long long ll;typedef pair&lt;int,int&gt; pii;inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline ll readl()&#123; ll ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=1e5+5;const long double eps=1e-10;inline int sgn(long double x)&#123;return (x&gt;eps)-(x&lt;-eps);&#125;const int mod=1e9+7;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;template&lt;class T&gt;struct modular&#123; T vl; explicit operator T()const&#123;return vl;&#125; modular()&#123;vl=0;&#125; modular(const ll&amp;v)&#123;vl=v&gt;=-mod&amp;&amp;v&lt;=mod?v:v%mod,vl&lt;0?vl+=mod:0;&#125; friend inline bool operator==(const modular&amp;a,const modular&amp;b)&#123;return a.vl==b.vl;&#125; friend inline bool operator!=(const modular&amp;a,const modular&amp;b)&#123;return a.vl!=b.vl;&#125; friend inline bool operator&lt;(const modular&amp;a,const modular&amp;b)&#123;return a.vl&lt;b.vl;&#125; friend inline bool operator&gt;(const modular&amp;a,const modular&amp;b)&#123;return a.vl&gt;b.vl;&#125; friend inline bool operator&lt;=(const modular&amp;a,const modular&amp;b)&#123;return a.vl&lt;=b.vl;&#125; friend inline bool operator&gt;=(const modular&amp;a,const modular&amp;b)&#123;return a.vl&gt;=b.vl;&#125; inline modular operator-()const&#123;return mod-vl;&#125; friend inline modular operator+(const modular&amp;a,const modular&amp;b)&#123;return modular(a.vl+b.vl&lt;mod?a.vl+b.vl:a.vl+b.vl-mod);&#125; friend inline void operator+=(modular&amp;a,const modular&amp;b)&#123;a=a+b;&#125; friend inline modular operator-(const modular&amp;a,const modular&amp;b)&#123;return modular(a.vl&lt;b.vl?a.vl-b.vl+mod:a.vl-b.vl);&#125; friend inline void operator-=(modular&amp;a,const modular&amp;b)&#123;a=a-b;&#125; friend inline modular operator*(const modular&amp;a,const modular&amp;b)&#123;return modular((ll)a.vl*b.vl%mod);&#125; friend inline void operator*=(modular&amp;a,const modular&amp;b)&#123;a=a*b;&#125; friend inline modular operator^(modular a,ll p)&#123;modular ans=1;for(;p;p&gt;&gt;=1,a*=a)if(p&amp;1)ans*=a;return ans;&#125; friend inline void operator^=(modular&amp;a,const ll&amp;p)&#123;a=a^p;&#125; friend inline modular operator^(modular a,int p)&#123;modular ans=1;for(;p;p&gt;&gt;=1,a*=a)if(p&amp;1)ans*=a;return ans;&#125; friend inline void operator^=(modular&amp;a,const int&amp;p)&#123;a=a^p;&#125; friend inline modular inv(const modular&amp;a)&#123;return a^(mod-2);&#125; friend inline modular operator/(const modular&amp;a,const modular&amp;b)&#123;return modular(a*inv(b));&#125; friend inline void operator/=(modular&amp;a,const modular&amp;b)&#123;a=a/b;&#125; &#125;;typedef modular&lt;int&gt; mi;struct F&#123; mi x,y; F(mi x=mi(0),mi y=mi(0)):x(x),y(y)&#123;&#125; friend inline F operator+(F a,F b)&#123;return F(a.x+b.x,a.y+b.y);&#125; friend inline void operator+=(F&amp;a,F b)&#123;a=a+b;&#125; friend inline F operator-(F a,F b)&#123;return F(a.x-b.x,a.y-b.y);&#125; friend inline void operator-=(F&amp;a,F b)&#123;a=a-b;&#125; friend inline F operator/(F a,mi b)&#123;return F(a.x/b,a.y/b);&#125; friend inline void operator/=(F&amp;a,mi b)&#123;a=a/b;&#125; friend inline F operator*(F a,mi b)&#123;return F(a.x*b,a.y*b);&#125; friend inline void operator*=(F&amp;a,mi b)&#123;a=a*b;&#125; friend inline bool operator&lt;(F a,F b)&#123;return a.x!=b.x?a.x&lt;b.x:a.y&lt;b.y;&#125; friend inline bool operator==(F a,F b)&#123;return a.x==b.x&amp;&amp;a.y==b.y;&#125; inline mi mod()const&#123;return x*x+y*y;&#125;&#125;a[N],G,O1,O2;int W;inline int rd()&#123;return rand()|(rand()&lt;&lt;15);&#125;struct cp&#123; int x,y; cp(int x=0,int y=0):x(x),y(y)&#123;&#125; friend inline cp operator*(cp a,cp b)&#123;return cp(add(mul(a.x,b.x),mul(W,mul(a.y,b.y))),add(mul(a.x,b.y),mul(a.y,b.x)));&#125; friend inline cp operator^(cp a,ll p)&#123;cp res=cp(1,0);for(;p;p&gt;&gt;=1,a=a*a)if(p&amp;1)res=res*a;return res;&#125;&#125;;inline int Sqrt(int x)&#123; if(x==0)return 0; if(ksm(x,(mod-1)&gt;&gt;1)==mod-1)return -1; int a; while(1)&#123; a=(rd()%mod+mod)%mod,W=dec(mul(a,a),x); if(ksm(W,(mod-1)&gt;&gt;1)==mod-1)&#123; int res=(cp(a,1)^((mod+1)&gt;&gt;1)).x; return min(res,mod-res); &#125; &#125;&#125;int n;inline mi sq(mi x)&#123;return x*x;&#125;inline ll fix(mi x)&#123; int res=(int)x; if(res&gt;abs(res-mod))res-=mod; return res;&#125;vector&lt;pair&lt;ll,ll&gt; &gt;res;ll d[N],_d[N];inline ll dist(ll x,ll y,ll a,ll b)&#123;return (x-a)*(x-a)+(y-b)*(y-b);&#125;inline void check(F pt,ll dis)&#123; ll dx=fix(pt.x),dy=fix(pt.y); if(dist(dx,dy,(int)a[1].x,(int)a[1].y)!=dis)return; for(ri i=1;i&lt;=n;++i)_d[i]=dist(dx,dy,(int)a[i].x,(int)a[i].y); sort(_d+1,_d+n+1); for(ri i=1;i&lt;=n;++i)if(_d[i]!=d[i])return; res.pb(make_pair(dx,dy));&#125;inline void modify(F o1,mi r1,F o2,mi r2,ll dis)&#123; mi a=(o1.x-o2.x)*2,b=(o1.y-o2.y)*2,c=r2-r1+o1.mod()-o2.mod(); if(a!=0)&#123; b=b/a,c=c/a; mi A=b*b+1,B=(b*o1.x-b*c-o1.y)*2,C=(c-o1.x)*(c-o1.x)+o1.y*o1.y-r1,delta; B/=A,C/=A; delta=B*B-C*4; int res=Sqrt(delta.vl); mi x,y; if(res==-1)return; y=(-B+res)/2,x=c-y*b; check(F(x,y),dis); y=(-B-res)/2,x=c-y*b; check(F(x,y),dis); &#125; else&#123; mi y=c/b; int s=Sqrt((r1-sq(o1.y-y)).vl); if(s==-1)return; check(F(o1.x+s,y),dis); check(F(o1.x-s,y),dis); &#125;&#125;mi dall=mi(0),Dall=mi(0),R1,R2;int main()&#123; srand(time(NULL)); #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[i].x=read(),a[i].y=read(),G=G+a[i],dall-=a[i].mod(); G=G/mi(n); if(a[1]==G)swap(a[1],a[2]); O1=G; O2=a[1]; dall+=n*G.mod(); for(ri tt=read();tt;--tt)&#123; Dall=dall; for(ri i=1;i&lt;=n;++i)d[i]=readl(),Dall+=d[i]; sort(d+1,d+n+1); res.clear(); R1=Dall/n; for(ri i=1;i&lt;=n;++i)&#123; if(i!=1&amp;&amp;d[i]==d[i-1])continue; R2=d[i]; modify(O1,R1,O2,R2,d[i]); &#125; sort(res.begin(),res.end()); res.erase(unique(res.begin(),res.end()),res.end()); cout&lt;&lt;res.size()&lt;&lt;' '; for(ri i=0;i&lt;res.size();++i)cout&lt;&lt;res[i].fi&lt;&lt;' '&lt;&lt;res[i].se&lt;&lt;' '; puts(\"\"); &#125; return 0;&#125; 告辞","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"2019.10.03 模拟测试题解","slug":"191003test","date":"2019-10-03T07:07:45.000Z","updated":"2019-10-11T15:33:35.719Z","comments":true,"path":"191003test/","link":"","permalink":"http://ldxcaicai.github.io/191003test/","excerpt":"","text":"A 题意简述： 给出一个 nnn 个点 mmm 条边的带权有向图，要求删去某些边使得最后的图每个点的入度出度均不能超过 111 ，问删去的边权和最小值 数据范围： n≤200n\\le200n≤200 m≤10000m\\le10000m≤10000 解题思路： 考虑简单补集转化，变为求保留的边权和最大值，然后考虑按照题意建图变成最大费用流问题或者说二分图最大匹配问题 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;typedef long long ll;typedef pair&lt;int,int&gt; pii;#define fi first#define se secondconst int N=10005,M=2e6+5,inf=0x3f3f3f3f;struct edge&#123;int v,c,w,next;&#125;;int n,m;namespace mcmf&#123; ll dis[N],res,sum; int ps[N],cnt,first[N],s,t; bool in[N]; edge e[M]; inline void addedge(int u,int v,int c,int w)&#123; e[++cnt]=(edge)&#123;v,c,w,first[u]&#125;; first[u]=cnt; &#125; inline void add(int u,int v,int c,int w)&#123; addedge(u,v,c,w); addedge(v,u,0,-w); &#125; inline void init()&#123;memset(first,-1,sizeof(first)),cnt=-1,s=0,t=2*n+1,res=sum=0;&#125; inline bool bfs()&#123; queue&lt;int&gt;q; for(ri i=s;i&lt;=t;++i)dis[i]=-inf,ps[i]=-1; in[s]=1,dis[s]=0,q.push(s); while(q.size())&#123; int x=q.front(); q.pop(); in[x]=0; for(ri i=first[x],v;~i;i=e[i].next)&#123; v=e[i].v; if(e[i].c&gt;0&amp;&amp;dis[v]&lt;dis[x]+e[i].w)&#123; dis[v]=dis[x]+e[i].w; ps[v]=i; if(!in[v])in[v]=1,q.push(v); &#125; &#125; &#125; if(dis[t]==-inf)return 0; sum+=dis[t]; res=max(res,sum); int p=t; while(p^s)--e[ps[p]].c,++e[ps[p]^1].c,p=e[ps[p]^1].v; return 1; &#125; inline ll solve()&#123; while(bfs()); return res; &#125;&#125;int main()&#123; n=read(),m=read(); ll ss=0; mcmf::init(); for(ri i=1;i&lt;=n;++i)&#123; mcmf::add(mcmf::s,i,1,0); mcmf::add(i+n,mcmf::t,1,0); &#125; for(ri i=1,u,v,w;i&lt;=m;++i)&#123; u=read(),v=read(),w=read(); ss+=w; if(w&lt;=0)continue; mcmf::add(u,v+n,1,w); &#125; cout&lt;&lt;ss-mcmf::solve(); return 0;&#125; B 题意简述： 给出一个 n∗mn*mn∗m 的格子让你染色并给出染色的终态，保证每个位置颜色数值不超过 CCC ，现在最初格子上都未被染过色，每次可以把某一行或者某一列染成一个相同的颜色，求染色次数最少的任意方案，无解输出 −1-1−1 数据范围： n,m≤50n,m\\le50n,m≤50 C≤100C\\le100C≤100 解题思路： 先思考如何得到可行解，然后对染色次数进行优化 考虑时间倒流，最后染上颜色后一定某一行或者某一列是同一种颜色，考虑删去这样的行或者列然后对剩下的矩阵迭代该操作，最后如果合法一定剩下一个全零矩阵，否则就非法 这样就成功得到了一个可行解，然后下面考虑两个简单优化： 假如当前非零行的个数不超过非零列的个数，那么优先消去一行，否则优先消去一列 假如当前有若干个合法的行/列，将其按照颜色分类，然后优先消去某种可行次数最少的颜色对应的任意一行/列 这样可以通过现有的所有数据点 想必会有数据能够×掉上述做法，毕竟正解要加一个topsoort并且笔者并不会证明上述做法正确性 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;typedef long long ll;typedef pair&lt;int,int&gt; pii;int n,m,a[55][55],C;struct F&#123; int op,x,y; F(int op=0,int x=0,int y=0):op(op),x(x),y(y)&#123;&#125;&#125;;int cnt1[155],cnt2[155],Ps1[155],Ps2[155];vector&lt;F&gt;res;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(),C=read(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)a[i][j]=read(); vector&lt;int&gt;X,Y; for(ri i=1;i&lt;=n;++i)X.pb(i); for(ri i=1;i&lt;=m;++i)Y.pb(i); while(X.size()&amp;&amp;Y.size())&#123; int ct1=0,ct2=0; for(ri i=1;i&lt;=C;++i)cnt1[i]=0,cnt2[i]=0; for(ri i=0;i&lt;X.size();++i)&#123; bool ff=1; for(ri j=0;j&lt;Y.size();++j)if(a[X[i]][Y[j]])&#123; ff=0; break; &#125; if(ff)++ct1; &#125; for(ri i=0;i&lt;Y.size();++i)&#123; bool ff=1; for(ri j=0;j&lt;X.size();++j)if(a[X[j]][Y[i]])&#123; ff=0; break; &#125; if(ff)++ct2; &#125; if(ct1==X.size())break; int ps1=-1; for(ri i=0;i&lt;X.size();++i)&#123; bool ff=1; for(ri j=0;j&lt;Y.size();++j)&#123; if(!a[X[i]][Y[j]]||(j&amp;&amp;a[X[i]][Y[j]]!=a[X[i]][Y[j-1]]))&#123; ff=0; break; &#125; &#125; if(ff)&#123; ps1=i; ++cnt1[a[X[i]][Y[0]]]; Ps1[a[X[i]][Y[0]]]=i; &#125; &#125; int ps2=-1; for(ri i=0;i&lt;Y.size();++i)&#123; bool ff=1; for(ri j=0;j&lt;X.size();++j)&#123; if(!a[X[j]][Y[i]]||(j&amp;&amp;a[X[j]][Y[i]]!=a[X[j-1]][Y[i]]))&#123; ff=0; break; &#125; &#125; if(ff)&#123; ps2=i; ++cnt2[a[X[0]][Y[i]]]; Ps2[a[X[0]][Y[i]]]=i; &#125; &#125; if(ps1==-1&amp;&amp;ps2==-1)&#123; puts(\"-1\"); return 0; &#125; if(X.size()-ct1&lt;Y.size()-ct2)&#123; if(~ps1)&#123; int mn=0x3f3f3f3f; for(ri i=1;i&lt;=C;++i)if(cnt1[i])mn=min(mn,cnt1[i]); for(ri i=1;i&lt;=C;++i)if(cnt1[i]==mn)&#123;ps1=Ps1[i];break;&#125; res.pb(F(1,X[ps1],a[X[ps1]][Y[0]])); for(ri i=ps1+1;i&lt;X.size();++i)X[i-1]=X[i]; X.pop_back(); continue; &#125; else&#123; int mn=0x3f3f3f3f; for(ri i=1;i&lt;=C;++i)if(cnt2[i])mn=min(mn,cnt2[i]); for(ri i=1;i&lt;=C;++i)if(cnt2[i]==mn)&#123;ps2=Ps2[i];break;&#125; res.pb(F(0,Y[ps2],a[X[0]][Y[ps2]])); for(ri i=ps2+1;i&lt;Y.size();++i)Y[i-1]=Y[i]; Y.pop_back(); continue; &#125; &#125; else&#123; if(~ps2)&#123; int mn=0x3f3f3f3f; for(ri i=1;i&lt;=C;++i)if(cnt2[i])mn=min(mn,cnt2[i]); for(ri i=1;i&lt;=C;++i)if(cnt2[i]==mn)&#123;ps2=Ps2[i];break;&#125; res.pb(F(0,Y[ps2],a[X[0]][Y[ps2]])); for(ri i=ps2+1;i&lt;Y.size();++i)Y[i-1]=Y[i]; Y.pop_back(); continue; &#125; else&#123; int mn=0x3f3f3f3f; for(ri i=1;i&lt;=C;++i)if(cnt1[i])mn=min(mn,cnt1[i]); for(ri i=1;i&lt;=C;++i)if(cnt1[i]==mn)&#123;ps1=Ps1[i];break;&#125; res.pb(F(1,X[ps1],a[X[ps1]][Y[0]])); for(ri i=ps1+1;i&lt;X.size();++i)X[i-1]=X[i]; X.pop_back(); continue; &#125; &#125; &#125; cout&lt;&lt;res.size()&lt;&lt;'\\n'; for(ri i=res.size()-1;~i;--i)&#123; if(res[i].op)cout&lt;&lt;\"R \"; else cout&lt;&lt;\"C \"; cout&lt;&lt;res[i].x&lt;&lt;' '&lt;&lt;res[i].y&lt;&lt;'\\n'; &#125; return 0;&#125; C 题意简述： 给你一棵带权树，每个点有一个限制 did_idi​ ，现在从时刻 000 开始的每个时刻，对于每个限制被打破的节点会有一个人出发向根走，每个单位时间行走一个单位长度，当一个人经过某个点时，如果其限制未被打破，那么该点限制减一，当限制为 000 时就视为被打破，保证叶子的限制一定是 000 ，询问树上的所有叶子的限制全部被打破的时刻 数据范围： n≤105n\\le10^5n≤105 wi≤1000w_i\\le1000wi​≤1000 di≤108d_i\\le10^8di​≤108 解题思路： 考虑对每个节点建立时刻为横轴，已经过人数为纵轴的函数图像，这样的话对于每个节点相当于要支持如下操作： 将某个子树的函数图像的横坐标整体右移一个值 将所有子树的函数图像给叠加起来 在已经叠加好的图像中求出自己打破限制的时间 将自己打破限制之后的一次函数加到图像中 那么这就成了一道经典的折线题，考虑维护所有拐点，那么要维护的就是整体打标记，平衡树+启发式合并，二分求答案和单点插入，直接用 TreapTreapTreap 维护即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_back#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;typedef long long ll;typedef pair&lt;int,int&gt; pii;const int N=1e5+5;inline int rnd()&#123;return rand()|(rand()&lt;&lt;15);&#125;int rt[N],n,lm[N],tim[N],det[N];vector&lt;pii&gt;e[N];vector&lt;int&gt;tp;namespace bst&#123; #define lc (son[p][0]) #define rc (son[p][1]) int rd[N],vl[N],siz[N],tot=0,top=0,stk[N*20],son[N][2]; ll ss[N]; inline int newidx()&#123;return top?stk[top--]:++tot;&#125; inline int newnode(int v)&#123; int p=newidx(); lc=rc=0,vl[p]=ss[p]=v,rd[p]=rnd(),siz[p]=1; return p; &#125; inline void pushup(int p)&#123; siz[p]=siz[lc]+1+siz[rc]; ss[p]=ss[lc]+vl[p]+ss[rc]; &#125; inline int merge(int a,int b)&#123; if(!a||!b)return a|b; if(rd[a]&lt;rd[b])return son[a][1]=merge(son[a][1],b),pushup(a),a; return son[b][0]=merge(a,son[b][0]),pushup(b),b; &#125; inline pii split(int p,int k)&#123; if(!p)return pii(0,0); pii res; if(siz[lc]&gt;=k)return res=split(lc,k),lc=res.se,pushup(p),pii(res.fi,p); return res=split(rc,k-siz[lc]-1),rc=res.fi,pushup(p),pii(p,res.se); &#125; inline int rank(int p,int v)&#123; if(!p)return 0; if(vl[p]&lt;=v)return siz[lc]+1+rank(rc,v); return rank(lc,v); &#125; inline void insert(int _rt,int v)&#123; int k=rank(rt[_rt],v); pii x=split(rt[_rt],k); rt[_rt]=merge(x.fi,merge(newnode(v),x.se)); &#125; inline void update(int p,int det)&#123; if(!p)return; update(lc,det),update(rc,det); stk[++top]=p; tp.pb(vl[p]+det); &#125; inline int query(int _rt,int lm)&#123; int l=-1e9,r=1e9,res=1e9,mid,k; while(l&lt;=r)&#123; mid=l+r&gt;&gt;1,k=rank(rt[_rt],mid); pii x=split(rt[_rt],k); if((ll)mid*siz[x.fi]-ss[x.fi]&gt;=lm)r=mid-1,res=mid; else l=mid+1; rt[_rt]=merge(x.fi,x.se); &#125; return res; &#125; #undef lc #undef rc&#125;inline void Merge(int a,int b)&#123; if(bst::siz[rt[a]]&lt;bst::siz[rt[b]])swap(rt[a],rt[b]),swap(det[a],det[b]); bst::update(rt[b],det[b]-det[a]); while(tp.size())bst::insert(a,tp.back()),tp.pop_back();&#125;int ans=0,q[N],fa[N],vll[N],hd,tl;int main()&#123; srand(time(NULL)); #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)lm[i]=read(); for(ri i=1,u,v,w;i&lt;n;++i)&#123; u=read(),v=read(),w=read(); e[u].pb(pii(v,w)); e[v].pb(pii(u,w)); &#125; q[hd=tl=1]=1; while(hd&lt;=tl)&#123; int x=q[hd++]; for(ri i=0,v;i&lt;e[x].size();++i)&#123; if((v=e[x][i].fi)==fa[x])continue; vll[v]=e[x][i].se,fa[v]=x,q[++tl]=v; &#125; &#125; for(ri p,ft,i=n;i;--i)&#123; p=q[i],ft=fa[p]; if(!lm[p])tim[p]=-det[p]; else tim[p]=bst::query(p,lm[p]); ans=max(ans,det[p]+tim[p]); bst::insert(p,tim[p]); det[p]+=vll[p]; if(ft)Merge(ft,p); &#125; cout&lt;&lt;ans; return 0;&#125;","categories":[{"name":"private","slug":"private","permalink":"http://ldxcaicai.github.io/categories/private/"}],"tags":[{"name":"考试题解","slug":"考试题解","permalink":"http://ldxcaicai.github.io/tags/%E8%80%83%E8%AF%95%E9%A2%98%E8%A7%A3/"}]},{"title":"2019.10.02 模拟测试题解","slug":"191002test","date":"2019-10-02T12:49:11.000Z","updated":"2019-10-11T15:33:36.965Z","comments":true,"path":"191002test/","link":"","permalink":"http://ldxcaicai.github.io/191002test/","excerpt":"","text":"题目来源： A:TCO499A:TCO499A:TCO499 1000pts1000pts1000pts B:CF613EB:CF613EB:CF613E C:出题人原创C:出题人原创C:出题人原创 A 题意简述： 在初始你自己创造一个由 A,B,C,DA,B,C,DA,B,C,D 组成的长度为 nnn 的字符串，给出有 mmm 种转移，每种转移用两个长度相同的 ABCDABCDABCD 串来表示，前者可以变成后者，然后进行若干次如下两种操作： 交换其中两个相邻字符 进行一次转移 问得到的不同字符串数的最大值 数据范围： n≤30n\\le30n≤30 m≤50m\\le50m≤50 解题思路： 分析两种操作，第一个操作相当于告诉我们一个字符串可以由以下信息表示 (cnta,cntb,cntc,cntd)(cnt_a,cnt_b,cnt_c,cnt_d)(cnta​,cntb​,cntc​,cntd​) ，而方案数则是 Caa×Ca+bb×Ca+b+cc∗Ca+b+c+ddC_{a}^a\\times C_{a+b}^b\\times C_{a+b+c}^c*C_{a+b+c+d}^dCaa​×Ca+bb​×Ca+b+cc​∗Ca+b+c+dd​ ，第二个操作相当于是建立边，这样相当于求一个有向图的带权最长链长度，只需要按照题意建出图来然后用 tarjan+topsorttarjan+topsorttarjan+topsort 即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114#include&lt;bits/stdc++.h&gt;#define ri register int#define pb push_backusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;typedef long long ll;const int mod=998244353;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;const int N=1e6+5;int n,m,all,col[N],trans[2][55][5];bool in[N];ll res=0,F[N],vl[N],C[35][35],mx[N];vector&lt;int&gt;e[N],E[N];char s[35];inline int idx(int a,int b,int c,int d)&#123;return (n+1)*(n+1)*(n+1)*a+(n+1)*(n+1)*b+(n+1)*c+d;&#125;inline void init()&#123; for(ri i=0;i&lt;=n;++i)&#123; C[i][0]=1; for(ri j=1;j&lt;=i;++j)C[i][j]=C[i-1][j-1]+C[i-1][j]; &#125; for(ri a=0,d;a&lt;=n;++a)for(ri b=0;a+b&lt;=n;++b) for(ri c=0;a+b+c&lt;=n;++c)&#123; d=n-a-b-c; F[idx(a,b,c,d)]=C[a][a]*C[a+b][b]*C[n-d][c]*C[n][d]; &#125;&#125;int tot=0,top=0,sig=0,dfn[N],low[N],stk[N],du[N];inline void dfs(int p)&#123; dfn[p]=low[p]=++tot; in[stk[++top]=p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if(!dfn[v=e[p][i]])dfs(v),low[p]=min(low[p],low[v]); else if(in[v])low[p]=min(low[p],dfn[v]); &#125; if(dfn[p]==low[p])&#123; ++sig; int x; while(1)&#123; x=stk[top--]; col[x]=sig,in[x]=0; vl[sig]+=F[x]; if(x==p)break; &#125; &#125;&#125;inline void topsort()&#123; queue&lt;int&gt;q; for(ri i=1;i&lt;=sig;++i)if(!du[i])q.push(i),mx[i]=vl[i]; while(q.size())&#123; int x=q.front(); q.pop(); for(ri i=0,v;i&lt;E[x].size();++i)&#123; v=E[x][i]; mx[v]=max(mx[v],mx[x]+vl[v]); if(!(--du[v]))q.push(v); &#125; &#125; for(ri i=1;i&lt;=sig;++i)res=max(res,mx[i]); cout&lt;&lt;res;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); init(); for(ri len,i=1;i&lt;=m;++i)for(ri t=0;t&lt;2;++t)&#123;len=Read(s);for(ri j=1;j&lt;=len;++j)++trans[t][i][s[j]-'A'+1];&#125; int all=n*(n+1)*(n+1)*(n+1); for(ri a=0,d,_a,_b,_c,_d;a&lt;=n;++a)for(ri b=0;a+b&lt;=n;++b) for(ri c=0;a+b+c&lt;=n;++c)&#123; d=n-a-b-c; for(ri i=1;i&lt;=m;++i)&#123; _a=a-trans[0][i][1]; if(_a&lt;0)continue; _a+=trans[1][i][1]; _b=b-trans[0][i][2]; if(_b&lt;0)continue; _b+=trans[1][i][2]; _c=c-trans[0][i][3]; if(_c&lt;0)continue; _c+=trans[1][i][3]; _d=d-trans[0][i][4]; if(_d&lt;0)continue; _d+=trans[1][i][4]; e[idx(a,b,c,d)].pb(idx(_a,_b,_c,_d)); &#125; &#125; for(ri i=1;i&lt;=all;++i)if(!dfn[i])dfs(i); for(ri i=1;i&lt;=all;++i)for(ri j=0;j&lt;e[i].size();++j)if(col[i]^col[e[i][j]])E[col[i]].pb(col[e[i][j]]),++du[col[e[i][j]]]; topsort(); return 0;&#125; B 题意简述： 给出一个 2×n2\\times n2×n 的矩阵 A\\boldsymbol{A}A ，矩阵中每个格子都是一个小写字母，同时有一个长度为 MMM 的字符串 SSS问在矩阵中起点和终点任意，只允许向上、下、左、右走，不经过重复格子，且依次经过的字母连起来是 SSS 的路径有多少种。 数据范围： n≤2000n\\le2000n≤2000 m≤2000m\\le2000m≤2000 解题思路： 设路径的开头结尾是 S,TS,TS,T ，那么所有合法路径可以划分成三段 ； 从 SSS 开始向左走一段然后走回来 从 TTT 开始向右走一段然后走回来 中间段上下上下的向右走 然后考虑对中间的进行 dpdpdp，设 fi,j,kf_{i,j,k}fi,j,k​ 表示走到第 iii 行 jjj 列匹配到第 kkk 个字符的方案数，左边和右边直接用 hashhashhash 搞一下，注意细节即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;typedef long long ll;const int mod=1e9+7,N=2005,bas=137;inline int add(const int&amp;a,const int&amp;b)&#123;return a+b&gt;=mod?a+b-mod:a+b;&#125;inline int dec(const int&amp;a,const int&amp;b)&#123;return a&gt;=b?a-b:a-b+mod;&#125;inline int mul(const int&amp;a,const int&amp;b)&#123;return (ll)a*b%mod;&#125;inline void update(int&amp;a,const int&amp;b)&#123;a=add(a,b);&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,a=mul(a,a))if(p&amp;1)ret=mul(ret,a);return ret;&#125;int n,m;int ans,fl[2][N][N],fr[2][N][N],pre[2][N],suf[2][N],h1[N],h2[N],hs[N],ihs[N];char s[2][N],t[N];inline int get_nl(int id,int l,int r)&#123;return mul(dec(pre[id][r],mul(pre[id][l-1],hs[r-l+1])),ihs[r-l+1]);&#125;inline int get_nr(int id,int l,int r)&#123;return mul(dec(suf[id][r],mul(suf[id][l+1],hs[l-r+1])),ihs[l-r+1]);&#125;inline int get_ml(int l,int r)&#123;return mul(dec(h1[r],mul(h1[l-1],hs[r-l+1])),ihs[r-l+1]);&#125;inline int get_mr(int l,int r)&#123;return mul(dec(h2[r],mul(h2[l+1],hs[l-r+1])),ihs[l-r+1]);&#125;inline void init_n()&#123; for(ri i=1;i&lt;=n;++i)for(ri j=0;j&lt;2;++j)pre[j][i]=add(mul(pre[j][i-1],bas),s[j][i]); for(ri i=n;i;--i)for(ri j=0;j&lt;2;++j)suf[j][i]=add(mul(suf[j][i+1],bas),s[j][i]);&#125;inline void init_m()&#123; for(ri i=1;i&lt;=m;++i)h1[i]=add(mul(h1[i-1],bas),t[i]); for(ri i=m;i;--i)h2[i]=add(mul(h2[i+1],bas),t[i]);&#125;inline void init()&#123; hs[0]=ihs[0]=1; for(ri i=1;i&lt;=n;++i)hs[i]=mul(hs[i-1],bas),ihs[i]=ksm(hs[i],mod-2); init_n(); init_m();&#125;int main()&#123; scanf(\"%s%s%s\",s[0]+1,s[1]+1,t+1); n=strlen(s[0]+1),m=strlen(t+1); init(); for(ri i=1;i&lt;=n;++i)&#123; for(ri id=0;id&lt;2;++id)update(fl[id][i+1][2],s[id][i]==t[1]),update(fr[id][i+1][m-1],(m^1)&amp;&amp;s[id][i]==t[m]); for(ri j=2,up=min(n-i+1,m/2);j&lt;=up;++j)for(ri id=0;id&lt;2;++id)&#123; update(ans,get_nl(id^1,i,i+j-1)==get_mr(m,m-j+1)&amp;&amp;get_nr(id,i+j-1,i)==get_mr(m-j,m-j*2+1)&amp;&amp;j*2==m); update(ans,get_nl(id^1,i,i+j-1)==get_mr(m,m-j+1)&amp;&amp;get_nr(id,i+j-1,i)==get_mr(m-j,m-j*2+1)?fl[id][i][m-j*2+1]:0); update(ans,get_nl(id^1,i,i+j-1)==get_ml(1,j)&amp;&amp;get_nr(id,i+j-1,i)==get_ml(j+1,j*2)?fr[id][i][j*2]:0); &#125; for(ri j=1;j&lt;=m;++j)for(ri id=0;id&lt;2;++id)if(s[id][i]==t[j])&#123; update(fl[id][i+1][j+1],fl[id][i][j]),update(fl[id^1][i+1][j+2],(j^m)&amp;&amp;s[id^1][i]==t[j+1]?fl[id][i][j]:0); update(fr[id][i+1][j-1],fr[id][i][j]),update(fr[id^1][i+1][j-2],(j^1)&amp;&amp;s[id^1][i]==t[j-1]?fr[id][i][j]:0); &#125; for(ri id=0;id&lt;2;++id)update(ans,add(fl[id][i+1][m+1],fr[id][i+1][0])); for(ri j=1,up=min(i,m/2);j&lt;=up;++j)for(ri id=0;id&lt;2;++id)&#123; update(ans,get_nr(id^1,i,i-j+1)==get_ml(1,j)&amp;&amp;get_nl(id,i-j+1,i)==get_ml(j+1,j*2)&amp;&amp;j*2==m); update(fl[id][i+1][j*2+1],get_nr(id^1,i,i-j+1)==get_ml(1,j)&amp;&amp;get_nl(id,i-j+1,i)==get_ml(j+1,j*2)); update(fr[id][i+1][m-j*2],get_nr(id^1,i,i-j+1)==get_mr(m,m-j+1)&amp;&amp;get_nl(id,i-j+1,i)==get_mr(m-j,m-j*2+1)); &#125; &#125; cout&lt;&lt;ans; return 0;&#125; C 题意简述： 求 ∑i=1nμ(i)im\\sum\\limits_{i=1}^n\\mu(i)i^mi=1∑n​μ(i)im 数据范围： n≤109n\\le10^9n≤109 m≤2∗105m\\le2*10^5m≤2∗105 解题思路： 令 f(x)=μ(x)xm,S(x)=∑i=1xf(i)f(x)=\\mu(x)x^m,S(x)=\\sum\\limits_{i=1}^xf(i)f(x)=μ(x)xm,S(x)=i=1∑x​f(i) 考虑构造 g(x)=xm,h=f×g⇒h(x)=[i==1]im=ϵ(x)g(x)=x^m,h=f\\times g\\Rightarrow h(x)=[i==1]i^m=\\epsilon(x)g(x)=xm,h=f×g⇒h(x)=[i==1]im=ϵ(x) 故可以用杜教筛，现在问题转换成求 n\\sqrt nn​ 个 ∑i=1xim\\sum\\limits_{i=1}^xi^mi=1∑x​im 的值，在空间限制不严的情况下可以合理的平衡结合预处理范围+拉格朗日插值或者直接用多项式多点插值 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677#include&lt;bits/stdc++.h&gt;#define ri register intusing namespace std;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;typedef long long ll;const int mod=998244353;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;const int N=3e6+5;int mu[N],pri[N],ss[N],F1[N],tot=0,up,n,m,lm,lagup,lagf[N],fac[N],ifac[N],F2[N];bool vs[N],Vs1[N],Vs2[N];map&lt;int,int&gt;S;inline int lagrange(int x)&#123; if(x&lt;=up)return lagf[x]; if(S.count(x))return S[x]; static int pre[N],suf[N]; int res=0; pre[0]=suf[lagup+1]=1; for(ri i=1;i&lt;=lagup;++i)pre[i]=mul(pre[i-1],(x-i)%mod); for(ri i=lagup;i;--i)suf[i]=mul(suf[i+1],(x-i)%mod); for(ri t,i=1;i&lt;=lagup;++i)&#123; t=mul(lagf[i],mul(mul(ifac[i-1],ifac[lagup-i]),mul(pre[i-1],suf[i+1]))); (lagup-i)&amp;1?Dec(res,t):Add(res,t); &#125; return S[x]=res;&#125;inline void init()&#123; lagup=m+2,lagf[1]=fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=lagup;++i)fac[i]=mul(fac[i-1],i),ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); for(ri i=2;i&lt;=lagup;++i)Mul(ifac[i],ifac[i-1]); mu[1]=ss[1]=1; for(ri i=2;i&lt;=up;++i)&#123; if(!vs[i])pri[++tot]=i,mu[i]=mod-1; lagf[i]=ksm(i,m); ss[i]=add(ss[i-1],mul(mu[i],lagf[i])); Add(lagf[i],lagf[i-1]); for(ri j=1,lm=up/i;j&lt;=tot&amp;&amp;pri[j]&lt;=lm;++j)&#123; vs[i*pri[j]]=1; if(i==i/pri[j]*pri[j])&#123;mu[i*pri[j]]=0;break;&#125; mu[i*pri[j]]=dec(0,mu[i]); &#125; &#125;&#125;map&lt;int,int&gt;F;inline int Sum1(int x)&#123; if(x&lt;=up)return ss[x]; if(F.count(x))return F[x]; int res=1; for(ri l=2,r;l&lt;=x;l=r+1)&#123; r=x/(x/l); Dec(res,mul(dec(lagrange(r),lagrange(l-1)),Sum1(x/l))); &#125; return F[x]=res;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); up=3e6,init(); cout&lt;&lt;Sum1(n); return 0;&#125; 多项式多点插值估计等博主身体好了再更 有生之年","categories":[{"name":"private","slug":"private","permalink":"http://ldxcaicai.github.io/categories/private/"}],"tags":[{"name":"考试题解","slug":"考试题解","permalink":"http://ldxcaicai.github.io/tags/%E8%80%83%E8%AF%95%E9%A2%98%E8%A7%A3/"}]},{"title":"2019.09.30 模拟测试题解","slug":"190930test","date":"2019-10-01T03:57:51.000Z","updated":"2019-10-11T15:33:38.015Z","comments":true,"path":"190930test/","link":"","permalink":"http://ldxcaicai.github.io/190930test/","excerpt":"","text":"A 题意简述： 给出 nnn 个长度相同的串，现在在这 nnn 个串中随机选择一个作为答案串，然后你现在每次随机猜一个之前未猜过的位置，在能够凭借已有的信息确定出答案串的时候游戏结束，问猜位置的期望次数 数据范围： n≤50n\\le50n≤50 len≤20len\\le20len≤20 解题思路： 考虑一个 O(nl2l)O(nl2^l)O(nl2l) 的暴力状压 dpdpdp ，即枚举答案串是啥，然后 fsf_{s}fs​ 表示该情况下猜过位置集合为 sss 时离结束的期望步数，并令 cntcntcnt 是当前集合猜过的位置数量，那么可以进行如下转移： 集合 sss 中的位置可以区分出答案串和其余串，则有 fs=0f_{s}=0fs​=0 集合 sss 中的位置不能区分出答案串和其余串，那么 fs=1+1len−cnt∑i,i∉sfs∪if_s=1+\\frac1{len-cnt}\\sum\\limits_{i,i\\not \\in s}f_{s\\cup i}fs​=1+len−cnt1​i,i​∈s∑​fs∪i​ 这样可以拿到 60+pts60^+pts60+pts 现在考虑优化，容易发现可以把 nnn 个串压在一起转移，具体来说，考虑预处理出 CntsCnt_sCnts​ 表示集合 sss 不能区分开的串的个数，这样第二种转移变为 fs=Cnts+1len−cnt∑i,i∉sfs∪if_s=Cnt_s+\\frac1{len-cnt}\\sum\\limits_{i,i\\not \\in s}f_{s\\cup i}fs​=Cnts​+len−cnt1​i,i​∈s∑​fs∪i​ 最后答案为 f0n\\frac{f_0}nnf0​​ ，因为我们把所有串压在了一起因此期望要带一个 1n\\frac 1nn1​ CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;const int N=1e5+5;int n,K,len;char s[55][25];double f[1&lt;&lt;20];int cnt[1&lt;&lt;20];bool vs[1&lt;&lt;20];ll sm[1&lt;&lt;20];inline int lowbit(int x)&#123;return x&amp;-x;&#125;inline double dfs(int sta,int ct)&#123; if(vs[sta])return f[sta]; vs[sta]=1,f[sta]=0; if(cnt[sta]==n)return f[sta]=0; int s=((1&lt;&lt;len)-1)^sta,t; while(s)&#123; t=lowbit(s); f[sta]+=dfs(sta|t,ct+1); s^=t; &#125; return (f[sta]/=(len-ct))+=n-cnt[sta];&#125;int main()&#123; n=read(); for(ri i=1;i&lt;=n;++i)len=Read(s[i]); for(ri i=1;i&lt;=n;++i)for(ri st=0,j=1;j&lt;=n;++j,st=0)if(i!=j)&#123; for(ri k=1;k&lt;=len;++k)if(s[i][k]==s[j][k])st|=1&lt;&lt;(k-1); sm[st]|=1ll&lt;&lt;(i-1); &#125; sm[0]=(1ll&lt;&lt;n)-1; for(ri a,b,s=(1&lt;&lt;len)-1;~s;--s)&#123; for(ri i=1;i&lt;=n;++i)if(!(sm[s]&gt;&gt;(i-1)&amp;1))++cnt[s]; a=s; while(a)&#123; b=lowbit(a); sm[s^b]|=sm[s]; a^=b; &#125; &#125; printf(\"%.10lf\",dfs(0,0)/n); return 0;&#125; B 题意简述： 给你 nnn 个点，现在询问 m=1,2,3,⋯ ,nm=1,2,3,\\cdots,nm=1,2,3,⋯,n 个点的生成树个数，如果 iii 在生成树里，其度数不超过 did_idi​ 数据范围： n≤100n\\le100n≤100 解题思路： 考虑利用 pruferpruferprufer 序列的如下性质： 对于一棵 nnn 个点的树， ∑dui=2n−2\\sum du_i=2n-2∑dui​=2n−2 对于一棵 nnn 个点的树，每个点在 pruferpruferprufer 序列中出现 dui−1du_i-1dui​−1 次 每棵树和其 pruferpruferprufer 序列满足双射关系 那么问题转化成了一个非常显然的二元生成函数问题，由于数据范围很小可以直接用背包代替多项式乘法 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=1e9+7;typedef vector&lt;int&gt; poly;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;mod?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))(p&amp;1)&amp;&amp;(Mul(ret,a),1);return ret;&#125;const int N=105;int n,f[2][N][N],cur=0,C[N][N];inline void init()&#123; for(ri i=0;i&lt;=n;++i)&#123; C[i][0]=1; for(ri j=1;j&lt;=i;++j)C[i][j]=add(C[i-1][j],C[i-1][j-1]); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); f[cur=0][0][0]=1; init(); for(ri t=1,du;t&lt;=n;++t)&#123; cur^=1; du=read(); for(ri i=0;i&lt;=t;++i)for(ri j=0;j&lt;=n-2;++j)f[cur][i][j]=f[!cur][i][j]; for(ri i=0;i&lt;=t;++i)for(ri j=0;j&lt;=n-2;++j)if(f[!cur][i][j]) for(ri k=0;k&lt;du&amp;&amp;j+k&lt;=n-2;++k)Add(f[cur][i+1][j+k],mul(f[!cur][i][j],C[j+k][j])); &#125; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;(i==1?n:f[cur][i][i-2])&lt;&lt;' '; return 0;&#125; C 题意简述： 给出一个字符串，要求强制在线支持如下操作： 在当前串尾加上一个字符 ccc 询问区间 [l,r][l,r][l,r] 中的不同子串数 数据范围： n,m≤50000n,m\\le50000n,m≤50000 解题思路： 显然需要补集转化变成求重复子串数，考虑建出 link−cut−parentlink-cut-parentlink−cut−parent treetreetree，然后考虑在字符串结尾加一个字符对子串数影响，发现就是把其对应动态树上的一条链的信息改掉，而对于 endposendposendpos 相同的集合它们对应的子串的左端点也是连续的，于是可以把 endposendposendpos 相同的放到一棵 splaysplaysplay 里，然后每次加点就成了 accessaccessaccess 操作，显然能用主席树辅助维护答案 但直接这样做有个小毛病，是对于维护答案信息不能随意的进行 accessaccessaccess 操作，于是 cutcutcut 操作也不能用了，这样的话在 clonecloneclone 节点需要弄一个小 tricktricktrick ，就是每次我们先 accessaccessaccess 新的 endposendposendpos 对应的链，这个时候被 clonecloneclone 的点成为虚儿子，可以直接将 cutcutcut 变成换父亲操作 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;const int N=2e5+5,M=N*100;int lm;namespace sgt&#123; #define lc (son[p][0]) #define rc (son[p][1]) #define mid (l+r&gt;&gt;1) int son[M][2],tg[M],tot=0; ll ss[M]; inline void update(int&amp;o,int l,int r,int ql,int qr,int v)&#123; if(ql&gt;qr)return; int p=++tot; lc=son[o][0],rc=son[o][1],ss[p]=ss[o],tg[p]=tg[o]; o=p; ss[p]+=(ll)(min(qr,r)-max(ql,l)+1)*v; if(ql&lt;=l&amp;&amp;r&lt;=qr)&#123;tg[p]+=v;return;&#125; if(qr&lt;=mid)update(lc,l,mid,ql,qr,v); else if(ql&gt;mid)update(rc,mid+1,r,ql,qr,v); else update(lc,l,mid,ql,qr,v),update(rc,mid+1,r,ql,qr,v); &#125; inline ll query(int p,int l,int r,int ql,int qr)&#123; if(!p)return 0ll; if(ql&lt;=l&amp;&amp;r&lt;=qr)return ss[p]; int res=(ll)(min(qr,r)-max(ql,l)+1)*tg[p]; if(qr&lt;=mid)return res+query(lc,l,mid,ql,qr); if(ql&gt;mid)return res+query(rc,mid+1,r,ql,qr); return res+query(lc,l,mid,ql,qr)+query(rc,mid+1,r,ql,qr); &#125; #undef mid #undef lc #undef rc&#125;int rt[N],n;namespace lct&#123; #define lc (son[p][0]) #define rc (son[p][1]) int son[N][2],fa[N],edpos[N],tg[N],len[N]; inline void pushnow(int p,int v)&#123;tg[p]=edpos[p]=v;&#125; inline void pushdown(int p)&#123;tg[p]&amp;&amp;(pushnow(lc,tg[p]),pushnow(rc,tg[p]),tg[p]=0);&#125; inline bool isroot(int x)&#123;return !fa[x]||((son[fa[x]][0]^x)&amp;&amp;(son[fa[x]][1]^x));&#125; inline bool which(int x)&#123;return x==son[fa[x]][1];&#125; inline void rotate(int x)&#123; int y=fa[x],z=fa[y],t=which(x); if(!isroot(y))son[z][which(y)]=x; fa[x]=z,fa[y]=x,son[y][t]=son[x][t^1],son[x][t^1]=y; son[y][t]&amp;&amp;(fa[son[y][t]]=y); &#125; inline void splay(int x)&#123; static int stk[N],top=0; stk[top=1]=x; for(ri i=x;!isroot(i);i=fa[i])stk[++top]=fa[i]; while(top)pushdown(stk[top--]); while(!isroot(x))&#123; if(!isroot(fa[x]))rotate(which(x)^which(fa[x])?x:fa[x]); rotate(x); &#125; &#125; inline void access(int x,int ps)&#123; int y=0; for(;x;x=fa[y=x])&#123; splay(x),son[x][1]=y; edpos[x]&amp;&amp;(sgt::update(rt[ps],1,lm,edpos[x]-len[x]+1,edpos[x]-len[fa[x]],1),1); &#125; pushnow(y,ps); &#125; inline int queryid(int x)&#123;return splay(x),edpos[x];&#125; inline void link(int x,int y)&#123;splay(x),fa[x]=y;&#125; #undef lc #undef rc&#125;namespace sam&#123; int son[N][26],tot,last,len[N],link[N]; inline void init()&#123;tot=last=1;&#125; inline void insert(int x,int id)&#123; int np=++tot,p=last; rt[id]=rt[id-1]; last=np,lct::len[np]=len[np]=len[p]+1; while(p&amp;&amp;!son[p][x])son[p][x]=np,p=link[p]; if(!p)&#123;lct::link(np,link[np]=1),lct::access(np,id);return;&#125; int q=son[p][x],nq; if(len[q]==len[p]+1)&#123;lct::link(np,link[np]=q),lct::access(np,id);return;&#125; nq=++tot,len[nq]=lct::len[nq]=len[p]+1,memcpy(son[nq],son[q],sizeof(son[q])); lct::edpos[nq]=lct::queryid(q); lct::link(nq,link[nq]=link[q]); lct::link(np,link[np]=nq),lct::access(np,id); lct::link(q,link[q]=nq); while(p&amp;&amp;son[p][x]==q)son[p][x]=nq,p=link[p]; &#125;&#125;int D,m;char s[N],ch;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif D=read(),n=Read(s),m=read(); ll lastans=0; lm=m+n; sam::init(); for(ri i=1;i&lt;=n;++i)sam::insert(s[i]-'a',i); for(ri op,l,r;m;--m)&#123; op=read(); if(op==1)&#123; ch=gc(); while(!isalpha(ch))ch=gc(); ++n; sam::insert(((ll)(ch-'a')+lastans)%26,n); &#125; else&#123; l=(lastans-1+read())%n+1; r=(lastans-1+read())%n+1; cout&lt;&lt;(lastans=(((ll)(r-l+1)*(r-l+2)/2)-sgt::query(rt[r],1,lm,l,r)))&lt;&lt;'\\n'; &#125; lastans*=D; &#125; return 0;&#125;","categories":[{"name":"private","slug":"private","permalink":"http://ldxcaicai.github.io/categories/private/"}],"tags":[{"name":"考试题解","slug":"考试题解","permalink":"http://ldxcaicai.github.io/tags/%E8%80%83%E8%AF%95%E9%A2%98%E8%A7%A3/"}]},{"title":"CodeForces 1208 简要题解","slug":"CF1208","date":"2019-09-29T07:31:41.000Z","updated":"2019-10-22T23:48:12.081Z","comments":true,"path":"CF1208/","link":"","permalink":"http://ldxcaicai.github.io/CF1208/","excerpt":"","text":"A 按照模 333 余数分类即可 CODE 1234567891011121314151617181920212223242526272829303132333435#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;inline int read()&#123; #define gc getchar int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=998244353;typedef pair&lt;int,int&gt; pii;typedef long long ll;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;int a[3];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; a[0]=read(),a[1]=read(),a[2]=a[1]^a[0]; cout&lt;&lt;a[read()%3]&lt;&lt;'\\n'; &#125; return 0;&#125; B 双指针模拟即可 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;inline int read()&#123; #define gc getchar int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=998244353;typedef pair&lt;int,int&gt; pii;typedef long long ll;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=2005;int a[N],n;map&lt;int,int&gt;id;int cnt[N],sum=0;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); int tot=0; for(ri i=1;i&lt;=n;++i)&#123; a[i]=read(); if(!id[a[i]])id[a[i]]=++tot; ++cnt[id[a[i]]]; if(cnt[id[a[i]]]==2)++sum; &#125; if(!sum)return puts(\"0\"),0; int ans=n; for(ri l=1;l&lt;=n;++l)&#123; for(ri r=l;r&lt;=n;++r)&#123; --cnt[id[a[r]]]; if(cnt[id[a[r]]]==1)--sum; if(!sum)ans=min(ans,r-l+1); &#125; for(ri r=l;r&lt;=n;++r)&#123; ++cnt[id[a[r]]]; if(cnt[id[a[r]]]==2)++sum; &#125; &#125; cout&lt;&lt;ans; return 0;&#125; C 每 161616 个数为一组构造即可 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;inline int read()&#123; #define gc getchar int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=998244353;typedef pair&lt;int,int&gt; pii;typedef long long ll;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=2005;int n,ans[N][N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri l=0,r=15,a,b,i=0;i&lt;n;i+=4)for(ri j=0;j&lt;n;j+=4)&#123; a=i,b=j; ans[a][b]=l; ans[a][b+1]=l+1; ans[a+1][b]=l+2; ans[a+1][b+1]=l+3; a=i,b=j+2; l+=4; ans[a][b]=l+2; ans[a][b+1]=l+3; ans[a+1][b]=l; ans[a+1][b+1]=l+1; a=i+2,b=j; l+=4; ans[a][b]=l+1; ans[a][b+1]=l; ans[a+1][b]=l+3; ans[a+1][b+1]=l+2; a=i+2,b=j+2; l+=4; ans[a][b]=l+3; ans[a][b+1]=l+2; ans[a+1][b]=l+1; ans[a+1][b+1]=l; l+=4; &#125; for(ri i=0;i&lt;n;++i,puts(\"\"))for(ri j=0;j&lt;n;++j)cout&lt;&lt;ans[i][j]&lt;&lt;' '; return 0;&#125; D 用个线段树模拟即可 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;inline int read()&#123; #define gc getchar int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=998244353;typedef pair&lt;int,int&gt; pii;typedef long long ll;inline ll readl()&#123; #define gc getchar ll ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=2e5+5;int n,w;namespace sgt&#123; #define lc (p&lt;&lt;1) #define rc (p&lt;&lt;1|1) #define mid (l+r&gt;&gt;1) ll ss[N&lt;&lt;2]; inline void build(int p,int l,int r)&#123; if(l==r)&#123;ss[p]=l;return;&#125; build(lc,l,mid),build(rc,mid+1,r); ss[p]=ss[lc]+ss[rc]; &#125; inline void update(int p,int l,int r,int k)&#123; if(l==r)&#123;ss[p]=0;return;&#125; if(k&lt;=mid)update(lc,l,mid,k); else update(rc,mid+1,r,k); ss[p]=ss[lc]+ss[rc]; &#125; inline int query(int p,int l,int r,ll v)&#123; if(l==r)return l; if(ss[lc]&gt;v)return query(lc,l,mid,v); return query(rc,mid+1,r,v-ss[lc]); &#125; #undef lc #undef rc #undef mid&#125;int a[N];ll s[N];int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); sgt::build(1,1,n); for(ri i=1;i&lt;=n;++i)s[i]=readl(); for(ri i=n;i;--i)&#123; a[i]=sgt::query(1,1,n,s[i]); sgt::update(1,1,n,a[i]); &#125; for(ri i=1;i&lt;=n;++i)cout&lt;&lt;a[i]&lt;&lt;' '; return 0;&#125; E 观察一下发现可以对每一行用的贡献用单调队列/线段树/st表统计，但是最后要统计 mmm 行的总贡献，然后发现每行的状态有以下几类： 开始的前 kkk 个 结尾的前 kkk 个 中间部分 这三段的贡献是类似的，可以分类+差分统计 CODE 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;inline char gc()&#123; static char buf[rlen],*ib,*ob; (ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)); return ib==ob?-1:*ib++;&#125;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int mod=998244353;typedef pair&lt;int,int&gt; pii;typedef long long ll;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Add(int&amp;a,int b)&#123;(a+=b)&lt;mod?a:(a-=mod);&#125;inline void Dec(int&amp;a,int b)&#123;(a-=b)&lt;0?(a+=mod):a;&#125; inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;inline int ksm(int a,int p)&#123;int ret=1;for(;p;p&gt;&gt;=1,Mul(a,a))if(p&amp;1)Mul(ret,a);return ret;&#125;const int N=1e6+50;int n,w,a[N];ll ans[N],ad[N];namespace sgt&#123; #define lc (p&lt;&lt;1) #define rc (p&lt;&lt;1|1) #define mid (l+r&gt;&gt;1) ll mx[N&lt;&lt;2]; inline void build(int p,int l,int r)&#123; if(l==r)&#123;mx[p]=a[l];return;&#125; build(lc,l,mid),build(rc,mid+1,r); mx[p]=max(mx[lc],mx[rc]); &#125; inline int query(int p,int l,int r,int ql,int qr)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return mx[p]; if(qr&lt;=mid)return query(lc,l,mid,ql,qr); if(ql&gt;mid)return query(rc,mid+1,r,ql,qr); return max(query(lc,l,mid,ql,qr),query(rc,mid+1,r,ql,qr)); &#125; #undef lc #undef rc #undef mid&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),w=read()+2; for(ri tt=1,m;tt&lt;=n;++tt)&#123; m=read(); for(ri i=2;i&lt;=m+1;++i)a[i]=read(); m+=2; a[1]=a[m]=0; sgt::build(1,1,m); if(w&lt;=m*3-1)for(ri i=1;i&lt;=w;++i)ans[i]+=sgt::query(1,1,m,max(1,i-w+m),min(i,m)); else&#123; for(ri i=1;i&lt;m;++i)ans[i]+=sgt::query(1,1,m,1,i); for(ri i=w;i&gt;w-m+1;--i)ans[i]+=sgt::query(1,1,m,m+i-w,m); ad[m]+=sgt::mx[1]; ad[w-m+2]-=sgt::mx[1]; &#125; &#125; for(ri i=1;i&lt;=w;++i)&#123; ad[i]+=ad[i-1]; ans[i]+=ad[i]; &#125; for(ri i=2;i&lt;=w-1;++i)cout&lt;&lt;ans[i]&lt;&lt;' '; return 0;&#125; F 直接暴力+二进制枚举子集更新即可，每个集合最多被更新两次因此复杂度是对的~ 没想到吧 然后比赛的时候是个dd 其实我现在也是dd CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;inline char gc()&#123; static char buf[rlen],*ib,*ob; (ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)); return ib==ob?-1:*ib++;&#125;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int N=1&lt;&lt;21|5;int cnt[N],a[N],n,lst[N],ans=0;inline void update(int vl,int ps)&#123; if(cnt[vl]&gt;=2||lst[vl]==ps)return; lst[vl]=ps,++cnt[vl]; for(ri i=21;~i;--i)if(vl&gt;&gt;i&amp;1)update(vl^(1&lt;&lt;i),ps);&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1;i&lt;=n;++i)a[i]=read(); for(ri t,res,i=n;i;--i)&#123; if(i&lt;=n-2)&#123; t=((1&lt;&lt;22)-1)^a[i],res=0; for(ri j=21;~j;--j)if(t&gt;&gt;j&amp;1)if(cnt[res|(1&lt;&lt;j)]==2)res|=1&lt;&lt;j; ans=max(ans,res|a[i]); &#125; update(a[i],i); &#125; cout&lt;&lt;ans; return 0;&#125; G 钦定所有的多边形的某一个顶点重合与同一个点，发现之后假如要选 x,x≥3x,x\\ge3x,x≥3 ，且 xxx 的所有约数已经被选，那么它会增加 ϕ(x)\\phi (x)ϕ(x) 个点 ，由于对于每个数 xxx 和它的因子 yyy 满足 ϕ(x)≥ϕ(y)\\phi(x)\\ge\\phi(y)ϕ(x)≥ϕ(y) ，因此直接考虑把所有合法的数按照 ϕ\\phiϕ 值大小排序过后贪心选择，注意特判一下 k=1,2k=1,2k=1,2 的情况~ CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se secondusing namespace std;const int rlen=1&lt;&lt;18|1;inline char gc()&#123; static char buf[rlen],*ib,*ob; (ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)); return ib==ob?-1:*ib++;&#125;inline int read()&#123; int ans=0; bool f=1; char ch=gc(); while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;typedef long long ll;const int N=2e6+5;int n,k,pri[N],tot=0,phi[N];bool vis[N];inline void init()&#123; phi[1]=1; for(ri i=2;i&lt;=n;++i)&#123; if(!vis[i])pri[++tot]=i,phi[i]=i-1; for(ri j=1;j&lt;=tot&amp;&amp;i*pri[j]&lt;=n;++j)&#123; vis[i*pri[j]]=1; if(i==i/pri[j]*pri[j])&#123; phi[i*pri[j]]=phi[i]*pri[j]; break; &#125; phi[i*pri[j]]=phi[i]*(pri[j]-1); &#125; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),k=read(); if(k==1)return puts(\"3\"),0; init(); sort(phi+3,phi+n+1); ll ans=0; for(ri i=3,j=1;j&lt;=k;++j,++i)ans+=phi[i]; cout&lt;&lt;ans+2; return 0;&#125; H 神仙 DDPDDPDDP 首先转化问题，发现是当 b−r&lt;kb-r&lt;kb−r&lt;k 时颜色为 rrr 考虑对每个点规定一个时间 t(x)t(x)t(x) ,对于叶子结点，表示点 xxx 在 k≥t(x)k\\ge t(x)k≥t(x) 时会变成 rrr ，如果颜色为 rrr ， t(x)=−inft(x)=-inft(x)=−inf 否则 t(x)=inft(x)=inft(x)=inf ，对于非叶子节点显然可以把它儿子的信息插入到平衡树中然后通过调整法求出 t(x)t(x)t(x) 这样的话，我们只需要对于一个 xxx ，判断其 t(x)t(x)t(x) 和 kkk 的大小关系进而判断它的颜色 于是只需要考虑如何修改叶子的颜色 经过思考发现单纯的 t(x)t(x)t(x) 并不好合并，于是我们进行如下精彩变换： 对树进行重链剖分，定义 t(x,0/1)t(x,0/1)t(x,0/1) 表示当 xxx 的重儿子是 r/br/br/b 的时候它成为 rrr 的最小时刻，这样就可以将 t(x,0/1)t(x,0/1)t(x,0/1) 进行合并，而轻儿子的维护沿用上述平衡树做法即可 CODE(fhq_treap) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;typedef pair&lt;int,int&gt; pii;const int N=1e6+5;int rt[N],n;inline int rnd()&#123;return rand()|(rand()&lt;&lt;15);&#125;namespace bst&#123; #define lc (son[p][0]) #define rc (son[p][1]) int son[N][2],siz[N],vl[N],rd[N]; int stk[N],top=0,tot=0; inline int newidx()&#123;return ++tot;&#125; inline int newnode(int v)&#123; int p=newidx(); lc=rc=0,siz[p]=1,vl[p]=v,rd[p]=rnd(); return p; &#125; inline int pushup(int p)&#123;siz[p]=(!p?0:siz[lc]+1+siz[rc]);&#125; inline int merge(int a,int b)&#123; if(!a||!b)return a|b; if(rd[a]&lt;rd[b])return son[a][1]=merge(son[a][1],b),pushup(a),a; return son[b][0]=merge(a,son[b][0]),pushup(b),b; &#125; inline pii split(int p,int k)&#123; if(!p)return pii(0,0); pii res; if(siz[lc]&gt;=k)return res=split(lc,k),lc=res.se,pushup(p),pii(res.fi,p); return res=split(rc,k-siz[lc]-1),rc=res.fi,pushup(p),pii(p,res.se); &#125; inline int rank(int p,int v)&#123; if(!p)return 0; if(vl[p]&gt;v)return rank(lc,v); return siz[lc]+1+rank(rc,v); &#125; inline void insert(int&amp;rt,int v)&#123; int rk=rank(rt,v); pii x=split(rt,rk); rt=merge(merge(x.fi,newnode(v)),x.se); &#125; inline void delet(int&amp;rt,int v)&#123; int rk=rank(rt,v); pii x=split(rt,rk-1),y=split(x.se,1); rt=merge(x.fi,y.se),y.fi&amp;&amp;(stk[++top]=y.fi); &#125; #undef lc #undef rc&#125;struct F&#123; int l,r; F(int l=0,int r=0):l(l),r(r)&#123;&#125; friend inline F operator+(F a,F b)&#123;return F(min(max(a.l,b.l),a.r),min(max(a.l,b.r),a.r));&#125;&#125;;const int inf=1e9;int K,tg[N];int siz[N],hson[N],dep[N],top[N],fa[N],num[N],pred[N],bot[N],col[N],tot=0;vector&lt;int&gt;e[N];void dfs1(int p)&#123; siz[p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==fa[p])continue; fa[v]=p,dep[v]=dep[p]+1,dfs1(v),siz[p]+=siz[v]; if(siz[v]&gt;siz[hson[p]])hson[p]=v; &#125;&#125;void dfs2(int p,int tp)&#123; top[p]=tp,bot[tp]=p,pred[num[p]=++tot]=p; if(!hson[p])return; dfs2(hson[p],tp); for(ri i=0,v;i&lt;e[p].size();++i)if((v=e[p][i])!=fa[p]&amp;&amp;v!=hson[p])dfs2(v,v);&#125;namespace sgt&#123; #define lc (p&lt;&lt;1) #define rc (p&lt;&lt;1|1) #define mid (l+r&gt;&gt;1) F vl[N&lt;&lt;2]; inline void pushup(int p)&#123;vl[p]=vl[lc]+vl[rc];&#125; inline F query(int p,int l,int r,int ql,int qr)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return vl[p]; if(qr&lt;=mid)return query(lc,l,mid,ql,qr); if(ql&gt;mid)return query(rc,mid+1,r,ql,qr); return query(lc,l,mid,ql,qr)+query(rc,mid+1,r,ql,qr); &#125; inline bool check(int p,int k,int dt)&#123; int R=bst::rank(rt[p],k)+dt,B=bst::siz[rt[p]]+1-R; return B-R&lt;k; &#125; inline void fix(int p,int&amp;k,int dt)&#123; while(check(p,k-1,dt))--k; while(!check(p,k,dt))++k; &#125; inline void getval(int p,int k)&#123; if(col[k]==1)vl[p]=F(inf,inf); else if(!col[k])vl[p]=F(-inf,-inf); else&#123; fix(k,vl[p].l,1); fix(k,vl[p].r,0); &#125; &#125; inline void build(int p,int l,int r)&#123; if(l==r)&#123; int k=pred[l]; getval(p,k); if(k==top[k]&amp;&amp;fa[k])&#123; if(bot[k]==k)bst::insert(rt[fa[k]],tg[k]=vl[p].l); else bst::insert(rt[fa[k]],tg[k]=(vl[p]+query(1,1,n,l+1,num[bot[k]])).l); &#125; return; &#125; build(rc,mid+1,r),build(lc,l,mid); pushup(p); &#125; inline void update(int p,int l,int r,int k)&#123; if(l==r)return getval(p,pred[l]); k&lt;=mid?update(lc,l,mid,k):update(rc,mid+1,r,k); pushup(p); &#125; #undef mid #undef lc #undef rc&#125;inline void change(int p)&#123; int tp,ftp; while(p)&#123; tp=top[p],ftp=fa[top[p]]; sgt::update(1,1,n,num[p]); if(ftp)&#123; bst::delet(rt[ftp],tg[tp]); bst::insert(rt[ftp],tg[tp]=sgt::query(1,1,n,num[tp],num[bot[tp]]).l); &#125; p=ftp; &#125;&#125;int main()&#123; srand(time(NULL)); #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),K=read(); for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v),e[v].pb(u); &#125; for(ri i=1;i&lt;=n;++i)col[i]=read(); dfs1(1),dfs2(1,1); sgt::build(1,1,n); for(ri op,x,tt=read();tt;--tt)&#123; op=read(); switch(op)&#123; case 1:&#123;x=read(),cout&lt;&lt;(sgt::query(1,1,n,num[x],num[bot[top[x]]]).l&gt;K)&lt;&lt;'\\n';break;&#125; case 2:&#123;x=read(),col[x]=read(),change(x);break;&#125; case 3:&#123;K=read();break;&#125; &#125; &#125; return 0;&#125; CODE(pbds) 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131#include&lt;bits/stdc++.h&gt;#include&lt;ext/pb_ds/tree_policy.hpp&gt;#include&lt;ext/pb_ds/assoc_container.hpp&gt;using namespace std;using namespace __gnu_pbds;using namespace __gnu_cxx;template &lt;class T&gt;using Tree=tree&lt;T,null_type,less&lt;T&gt;,rb_tree_tag,tree_order_statistics_node_update&gt;;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;typedef pair&lt;int,int&gt; pii;inline pii operator+(pii a,pii b)&#123;return pii(min(max(a.fi,b.fi),a.se),min(max(a.fi,b.se),a.se));&#125;const int N=3e5+5;const int inf=1e9;int n,K,tg[N];int siz[N],hson[N],dep[N],top[N],fa[N],num[N],pred[N],bot[N],col[N],tot=0;vector&lt;int&gt;e[N];Tree&lt;pii&gt;T[N];decltype(begin(T[0])) D[N];namespace sgt&#123; #define lc (p&lt;&lt;1) #define rc (p&lt;&lt;1|1) #define mid (l+r&gt;&gt;1) pii vl[N&lt;&lt;2]; inline int rank(const Tree&lt;pii&gt; &amp;A,const int &amp;x)&#123; return A.order_of_key(pii(x,inf)); &#125; inline void pushup(int p)&#123;vl[p]=vl[lc]+vl[rc];&#125; inline pii query(int p,int l,int r,int ql,int qr)&#123; if(ql&lt;=l&amp;&amp;r&lt;=qr)return vl[p]; if(qr&lt;=mid)return query(lc,l,mid,ql,qr); if(ql&gt;mid)return query(rc,mid+1,r,ql,qr); return query(lc,l,mid,ql,qr)+query(rc,mid+1,r,ql,qr); &#125; inline bool check(int p,int k,int dt)&#123; int R=rank(T[p],k)+dt,B=(int)(T[p].size())+1-R; return B-R&lt;k; &#125; inline void fix(int p,int&amp;k,int dt)&#123; while(check(p,k-1,dt))--k; while(!check(p,k,dt))++k; &#125; inline void getval(int p,int k)&#123; if(col[k]==1)vl[p]=pii(inf,inf); else if(!col[k])vl[p]=pii(-inf,-inf); else&#123; fix(k,vl[p].fi,1); fix(k,vl[p].se,0); &#125; &#125; inline void build(int p,int l,int r)&#123; if(l==r)&#123; int k=pred[l]; getval(p,k); if(k==top[k]&amp;&amp;k!=1)D[k]=T[fa[k]].insert(pii(bot[k]==k?vl[p].fi:(vl[p]+query(1,1,n,l+1,num[bot[k]])).fi,k)).fi; return; &#125; build(rc,mid+1,r),build(lc,l,mid); pushup(p); &#125; inline void update(int p,int l,int r,int k)&#123; if(l==r)return getval(p,pred[l]); k&lt;=mid?update(lc,l,mid,k):update(rc,mid+1,r,k); pushup(p); &#125; #undef mid #undef lc #undef rc&#125;void dfs1(int p)&#123; siz[p]=1; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i])==fa[p])continue; fa[v]=p,dep[v]=dep[p]+1,dfs1(v),siz[p]+=siz[v]; if(siz[v]&gt;siz[hson[p]])hson[p]=v; &#125;&#125;void dfs2(int p,int tp)&#123; top[p]=tp,bot[tp]=p,pred[num[p]=++tot]=p; if(!hson[p])return; dfs2(hson[p],tp); for(ri i=0,v;i&lt;e[p].size();++i)if((v=e[p][i])!=fa[p]&amp;&amp;v!=hson[p])dfs2(v,v);&#125;inline void change(int p)&#123; int tp,ftp; while(p)&#123; ftp=fa[tp=top[p]]; sgt::update(1,1,n,num[p]); if(ftp)&#123; T[ftp].erase(D[tp]); D[tp]=T[ftp].insert(pii(sgt::query(1,1,n,num[tp],num[bot[tp]]).fi,tp)).fi; &#125; p=ftp; &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),K=read(); for(ri i=1,u,v;i&lt;n;++i)&#123; u=read(),v=read(); e[u].pb(v),e[v].pb(u); &#125; for(ri i=1;i&lt;=n;++i)col[i]=read(); dfs1(1),dfs2(1,1); sgt::build(1,1,n); for(ri op,x,tt=read();tt;--tt)&#123; op=read(); switch(op)&#123; case 1:&#123;x=read(),cout&lt;&lt;(sgt::query(1,1,n,num[x],num[bot[top[x]]]).fi&gt;K)&lt;&lt;'\\n';break;&#125; case 2:&#123;x=read(),col[x]=read(),change(x);break;&#125; case 3:&#123;K=read();break;&#125; &#125; &#125; return 0;&#125; 告辞","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"CometOJ模拟赛测试Day2 简要题解","slug":"COJ70","date":"2019-09-28T15:35:27.000Z","updated":"2019-10-11T15:33:23.915Z","comments":true,"path":"COJ70/","link":"","permalink":"http://ldxcaicai.github.io/COJ70/","excerpt":"","text":"21:10分进入比赛界面结果手速慢了C没写完100+100+0滚了 A 貌似归并就行了。。。 但我比较智障写了个链表，凑合看看吧~ CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_back#define all(x) x.begin(),x.end()using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;const int N=1e5+5;int pre[N],suf[N],n,b[N],m;inline void delet(int x)&#123; suf[pre[x]]=suf[x]; pre[suf[x]]=pre[x];&#125;int main()&#123; n=read(),m=read(); for(ri i=1;i&lt;=n;++i)pre[i]=i-1,suf[i]=i+1; suf[0]=1,pre[n+1]=n; for(ri i=1;i&lt;=m;++i)delet(b[i]=read()); int ps=1; while(ps&lt;=m)&#123; int p=suf[0]; while(p!=n+1&amp;&amp;p&lt;b[ps])cout&lt;&lt;p&lt;&lt;'\\n',p=suf[p]; for(ri i=pre[p];i;i=pre[i])delet(i); cout&lt;&lt;b[ps]&lt;&lt;'\\n'; ++ps; &#125; for(ri i=suf[0];i!=n+1;i=suf[i])cout&lt;&lt;i&lt;&lt;'\\n'; return 0;&#125; B 考虑用 trietrietrie 将所有字符串从小到大排序，然后问题转化成为一个排列在全排列中的排名 我并不会康拓展开然后跑去rush了一个bit CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_back#define all(x) x.begin(),x.end()using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(!isalpha(ch))ch=gc(); while(isalpha(ch))s[++top]=ch,ch=gc(); return top;&#125;const int mod=1e9+7;inline int add(int a,int b)&#123;return (a+=b)&lt;mod?a:a-mod;&#125;inline void Add(int&amp;a,int b)&#123;a=add(a,b);&#125;inline int dec(int a,int b)&#123;return (a-=b)&lt;0?a+mod:a;&#125;inline void Dec(int&amp;a,int b)&#123;a=dec(a,b);&#125;inline int mul(int a,int b)&#123;return (ll)a*b%mod;&#125;inline void Mul(int&amp;a,int b)&#123;a=(ll)a*b%mod;&#125;const int N=1e6+5;char s[N];int son[N][26],rk[N],cnt=0,ed[N];int tot=1;inline void insert(char*s,int len,int idx)&#123; int p=1; for(ri x,i=1;i&lt;=len;++i)&#123; x=s[i]-'a'; if(!son[p][x])son[p][x]=++tot; p=son[p][x]; &#125; ed[p]=idx;&#125;void dfs(int p)&#123; if(ed[p])rk[ed[p]]=++cnt; for(ri i=0;i&lt;26;++i)if(son[p][i])dfs(son[p][i]);&#125;int n,k,a[N],top=0,fac[N],ifac[N];inline void init()&#123; fac[0]=fac[1]=ifac[0]=ifac[1]=1; for(ri i=2;i&lt;=n;++i)fac[i]=mul(fac[i-1],i),ifac[i]=mul(ifac[mod-mod/i*i],mod-mod/i); for(ri i=2;i&lt;=n;++i)Mul(ifac[i],ifac[i-1]);&#125;inline int A(int n,int m)&#123;return n&lt;m||m&lt;0?0:mul(fac[n],ifac[n-m]);&#125;int bit[N];inline int lowbit(int x)&#123;return x&amp;-x;&#125;inline void update(int x,int v)&#123;for(ri i=x;i&lt;=n;i+=lowbit(i))bit[i]+=v;&#125;inline int query(int x)&#123;int ret=0;for(ri i=x;i;i-=lowbit(i))ret+=bit[i];return ret;&#125;int main()&#123; n=read(),k=read(); for(ri i=1,len;i&lt;=n;++i)len=Read(s),insert(s,len,i); dfs(1); int p=1,len=Read(s); for(ri i=1;i&lt;=len;++i)&#123; p=son[p][s[i]-'a']; if(ed[p])&#123; ++top; a[top]=rk[ed[p]]; p=1; &#125; &#125; init(); int res=0; for(ri i=1;i&lt;=k;++i)&#123; Add(res,mul(a[i]-1-query(a[i]),A(n-i,k-i))); update(a[i],1); &#125; cout&lt;&lt;res+1; return 0;&#125; C 感觉还没 Day1的CDay1的CDay1的C 难 直接考虑枚举删去的列的状态，然后只用看可行的保留行的数量，这个直接压一下每两行每个位置的大小状态然后 fi,jf_{i,j}fi,j​ 表示前 iii 行一定保留第 iii 行的方案数 通过单次通过预处理+打时间标记可以做到 O(n2)dpO(n^2)dpO(n2)dp 然后我是个 zzzzzz ，先写了一个以为是 O(n3)O(n^3)O(n3) 的 O(n4)dpO(n^4)dpO(n4)dp 然后只有 90pts90pts90pts 唉怎么会有90pts CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_back#define all(x) x.begin(),x.end()using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;int n,m,p,q;int a[25][25];int b[25][25];ll f[25][25];inline bool check(int x,int y,int z)&#123; for(ri i=1;i&lt;=q;++i)if((b[x][i]&gt;b[y][i])^(b[y][i]&gt;b[z][i]))return 0; return 1;&#125;int main()&#123; n=read(),m=read(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)a[i][j]=read(); ll res=0; vector&lt;int&gt;X,Y; for(ri s=0,up=1&lt;&lt;m;s&lt;up-1;++s)&#123; X.clear(),Y.clear(); for(ri i=1;i&lt;=m;++i)if(!(s&gt;&gt;(i-1)&amp;1))Y.pb(i); for(ri i=1;i&lt;=n;++i)&#123; bool ff=1; for(ri j=0;j+2&lt;Y.size();++j)if((a[i][Y[j]]&gt;a[i][Y[j+1]])^(a[i][Y[j+1]]&gt;a[i][Y[j+2]]))&#123;ff=0;break;&#125; if(ff)X.pb(i); &#125; p=X.size(),q=Y.size(); for(ri i=0;i&lt;X.size();++i)for(ri j=0;j&lt;Y.size();++j)b[i+1][j+1]=a[X[i]][Y[j]]; res+=p; for(ri i=1;i&lt;=p;++i)&#123; for(ri j=i+1;j&lt;=p;++j)&#123; f[i][j]=1; for(ri k=i-1;k;--k)&#123; if(check(k,i,j))f[i][j]+=f[k][i]; &#125; res+=f[i][j]; &#125; &#125; &#125; cout&lt;&lt;res; return 0;&#125; 然后发现事情不对，改成了 O(n3)O(n^3)O(n3) 的 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_back#define all(x) x.begin(),x.end()using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;int n,m,p,q;int a[25][25];int b[25][25];ll f[25][25],ban[25][25];inline ll calc(int x,int y)&#123; ll res=0; for(ri i=1;i&lt;=q;++i)res+=(1ll*(b[x][i]&gt;b[y][i]))&lt;&lt;(i-1); return res;&#125;int main()&#123; n=read(),m=read(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)a[i][j]=read(); ll res=0; vector&lt;int&gt;X,Y; for(ri s=0,up=1&lt;&lt;m;s&lt;up-1;++s)&#123; X.clear(),Y.clear(); for(ri i=1;i&lt;=m;++i)if(!(s&gt;&gt;(i-1)&amp;1))Y.pb(i); for(ri i=1;i&lt;=n;++i)&#123; bool ff=1; for(ri j=0;j+2&lt;Y.size();++j)if((a[i][Y[j]]&gt;a[i][Y[j+1]])^(a[i][Y[j+1]]&gt;a[i][Y[j+2]]))&#123;ff=0;break;&#125; if(ff)X.pb(i); &#125; p=X.size(),q=Y.size(); for(ri i=0;i&lt;X.size();++i)for(ri j=0;j&lt;Y.size();++j)b[i+1][j+1]=a[X[i]][Y[j]]; res+=p; for(ri i=1;i&lt;=p;++i)for(ri j=i+1;j&lt;=p;++j)ban[i][j]=calc(i,j); for(ri i=1;i&lt;=p;++i)&#123; for(ri j=i+1;j&lt;=p;++j)&#123; f[i][j]=1; for(ri k=i-1;k;--k)if(ban[k][i]==ban[i][j])f[i][j]+=f[k][i]; res+=f[i][j]; &#125; &#125; &#125; cout&lt;&lt;res; return 0;&#125; 然后发现被卡常了，加了个时间标记改成了以为是 O(n2)O(n^2)O(n2) 的 O(n3)dpO(n^3)dpO(n3)dp CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_back#define all(x) x.begin(),x.end()using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;int n,m,p,q;int a[25][25];int b[25][25],tim[21][1&lt;&lt;20|5],Tim=0;int f[21][1&lt;&lt;20|5];int ban[25][25];inline int calc(int x,int y)&#123; int res=0; for(ri i=1;i&lt;=q;++i)res+=(b[x][i]&gt;b[y][i])&lt;&lt;(i-1); return res;&#125;inline int query(int x,int y)&#123;return tim[x][y]^Tim?0ll:f[x][y];&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)a[i][j]=read(); ll res=0; vector&lt;int&gt;X,Y; for(ri s=0,up=1&lt;&lt;m;s&lt;up-1;++s)&#123; X.clear(),Y.clear(); for(ri i=1;i&lt;=m;++i)if(!(s&gt;&gt;(i-1)&amp;1))Y.pb(i); for(ri i=1;i&lt;=n;++i)&#123; bool ff=1; for(ri j=0;j+2&lt;Y.size();++j)if((a[i][Y[j]]&gt;a[i][Y[j+1]])^(a[i][Y[j+1]]&gt;a[i][Y[j+2]]))&#123;ff=0;break;&#125; if(ff)X.pb(i); &#125; p=X.size(),q=Y.size(); for(ri i=0;i&lt;X.size();++i)for(ri j=0;j&lt;Y.size();++j)b[i+1][j+1]=a[X[i]][Y[j]]; res+=p; ++Tim; for(ri i=1;i&lt;=p;++i)&#123; for(ri j=i+1;j&lt;=p;++j)&#123; ban[i][j]=calc(i,j); if(tim[j][ban[i][j]]^Tim)tim[j][ban[i][j]]=Tim,f[j][ban[i][j]]=0; f[j][ban[i][j]]+=query(i,ban[i][j])+1; res+=query(i,ban[i][j])+1; &#125; &#125; &#125; cout&lt;&lt;res; return 0;&#125; 最后终于过了 CODE 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_back#define all(x) x.begin(),x.end()using namespace std;typedef long long ll;typedef pair&lt;int,int&gt; pii;typedef pair&lt;ll,int&gt; pli;typedef vector&lt;int&gt; poly;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); while(!isdigit(ch))ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return ans;&#125;int n,m,p,q;int a[25][25];int b[25][25],tim[21][1&lt;&lt;20|5],Tim=0;int f[21][1&lt;&lt;20|5];int ban[25][25];inline int calc(int x,int y)&#123; int res=0; for(ri i=1;i&lt;=m;++i)res+=(a[x][i]&gt;a[y][i])&lt;&lt;(i-1); return res;&#125;inline int query(int x,int y)&#123;return tim[x][y]^Tim?0:f[x][y];&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(),m=read(); for(ri i=1;i&lt;=n;++i)for(ri j=1;j&lt;=m;++j)a[i][j]=read(); for(ri i=1;i&lt;=n;++i)for(ri j=i+1;j&lt;=n;++j)ban[i][j]=calc(i,j); ll res=0; vector&lt;int&gt;X,Y; for(ri s=0,up=1&lt;&lt;m;s&lt;up-1;++s)&#123; X.clear(),Y.clear(); for(ri i=1;i&lt;=m;++i)if(!(s&gt;&gt;(i-1)&amp;1))Y.pb(i); for(ri i=1;i&lt;=n;++i)&#123; bool ff=1; for(ri j=0;j+2&lt;Y.size();++j)if((a[i][Y[j]]&gt;a[i][Y[j+1]])^(a[i][Y[j+1]]&gt;a[i][Y[j+2]]))&#123;ff=0;break;&#125; if(ff)X.pb(i); &#125; p=X.size(),q=Y.size(); res+=p; ++Tim; for(ri i=1,ss;i&lt;=p;++i)&#123; for(ri j=i+1;j&lt;=p;++j)&#123; ss=ban[X[i-1]][X[j-1]]&amp;((up-1)^s); (tim[j][ss]^Tim)&amp;&amp;(tim[j][ss]=Tim,f[j][ss]=0); f[j][ss]+=query(i,ss)+1; res+=query(i,ss)+1; &#125; &#125; &#125; cout&lt;&lt;res; return 0;&#125; 被全场吊打了，告辞","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]},{"title":"CometOJ模拟赛测试Day1 简要题解","slug":"COJ69","date":"2019-09-28T02:27:35.000Z","updated":"2019-10-11T15:33:25.061Z","comments":true,"path":"COJ69/","link":"","permalink":"http://ldxcaicai.github.io/COJ69/","excerpt":"","text":"NMD因为网络原因交错了题，最后导致B,C爆炸了 A 我的乱搞做法： 先取对把乘法转化成加法，然后打表求出每个数的不超过其一半的最大的最优决策点 发现决策模 666 之后有规律，建立一个 solve(x)solve(x)solve(x) 函数： x≤3x\\le3x≤3 ，返回 xxx (x−3)%6&lt;4(x-3)\\%6&lt;4(x−3)%6&lt;4 ，返回 solve(x/2)∗solve(x−x/2)solve(x/2)*solve(x-x/2)solve(x/2)∗solve(x−x/2) (x−3)%6&gt;=4(x-3)\\%6&gt;=4(x−3)%6&gt;=4 ，返回 solve(x/2−1)∗solve(x−x/2+1)solve(x/2-1)*solve(x-x/2+1)solve(x/2−1)∗solve(x−x/2+1) 然后加个记忆化就能过了 CODE 12345678910111213141516171819202122232425#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;map&lt;ll,int&gt;S;ll n;const int mod=1e9+7;inline int solve(ll n)&#123; if(S.count(n))return S[n]; if(n&lt;=3)return S[n]=n; int t=(n-4)%6; if(t&gt;=4)return S[n]=1ll*solve(n/2-1)*solve(n-n/2+1)%mod; return S[n]=1ll*solve(n/2)*solve(n-n/2)%mod;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif cin&gt;&gt;n; cout&lt;&lt;solve(n); return 0;&#125; B 一道纯模拟题，分如下几类随便讨论一下： 形如 “###” 或者 “##.&quot; ，那么这两种情况只需考虑它们前面的最优值 当前身上有 222 个干扰器，那么可以直接扫一遍求答案， Ans=干扰器个数−Ans=干扰器个数-Ans=干扰器个数−“##”个数个数个数 当前身上有 111 个干扰器，且前面有一个形如 “*#” 的， 那么答案跟第二种情况相同 还有几类比较容易的就不列出来了。 CODE 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;inline int Read(char*s)&#123; int top=0; char ch=gc(); while(ch!='.'&amp;&amp;ch!='*'&amp;&amp;ch!='#')ch=gc(); while(ch=='.'||ch=='*'||ch=='#')s[++top]=ch,ch=gc(); return top;&#125;const int N=3e6+5;char s[N];int n;inline int calc(int l,int r)&#123; int res=0; for(ri i=l;i&lt;=r;++i)if(s[i]=='*')++res; for(ri i=l;i&lt;r;++i)if(s[i]=='#'&amp;&amp;s[i+1]=='#')--res; return res;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif for(ri tt=read();tt;--tt)&#123; n=Read(s); s[n+1]=s[n+2]='#'; for(ri i=1;i&lt;=n;++i)&#123; if(s[i]=='#'&amp;&amp;s[i+1]=='#'&amp;&amp;s[i+2]!='*')&#123; n=i-1; break; &#125; &#125; int res=0; for(ri ff=0,ct=0,i=1;i&lt;=n;++i)&#123; if(s[i]=='.')continue; if(s[i]=='*')&#123; ++ct,res=max(res,ct); if(ct==2)&#123; res=calc(1,n); break; &#125; if(ff)&#123; res=calc(1,n); break; &#125; continue; &#125; if(s[i]=='#')&#123; if(!ct)&#123; if(s[i+1]!='*')break; ff=0; continue; &#125; else&#123; if(s[i+1]=='#')&#123; ff=0; i+=2; continue; &#125; --ct,ff=1; continue; &#125; &#125; &#125; cout&lt;&lt;res&lt;&lt;'\\n'; &#125; return 0;&#125; C 一道比较容易的 dpdpdp 考虑枚举断边然后处理出两个连通块的路径和最值然后乘起来更新答案，下面那个连通块的答案可以直接 O(n)O(n)O(n) 树形 dpdpdp 一遍得到，而上面的维护答案如果不想繁杂讨论的话可以对每个点搞个可删堆/multiset，不过不开 O2O2O2 会被卡掉 否则可以维护儿子答案前后缀的 min/maxmin/maxmin/max 来实现可删堆一样的东西，但这种 O(n)O(n)O(n) 的做法也被卡 TLETLETLE 了一个点，需要手动 O2O2O2 可删堆 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int N=2e5+5;int n,dep[N],mn[N],mx[N],fmn[N],fmx[N],gmx[N],gmn[N];typedef pair&lt;int,int&gt; pii;vector&lt;pii&gt;e[N];struct Q1&#123; priority_queue&lt;int&gt;a,b; inline void push(int x)&#123;a.push(x);&#125; inline void del(int x)&#123;b.push(x);&#125; inline int top()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();return a.top();&#125; inline void pop()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();a.pop();&#125; inline int stop()&#123;int t=top(),ret;return pop(),ret=top(),a.push(t),ret;&#125; inline int size()&#123;return a.size()-b.size();&#125;&#125;S1[N],Mx[N];struct Q2&#123; priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;a,b; inline void push(int x)&#123;a.push(x);&#125; inline void del(int x)&#123;b.push(x);&#125; inline int top()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();return a.top();&#125; inline void pop()&#123;while(b.size()&amp;&amp;a.top()==b.top())a.pop(),b.pop();a.pop();&#125; inline int stop()&#123;int t=top(),ret;return pop(),ret=top(),a.push(t),ret;&#125; inline int size()&#123;return a.size()-b.size();&#125;&#125;S2[N],Mn[N];void dfs1(int p,int fa)&#123; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==fa)continue; dfs1(v,p); S1[p].push(S1[v].top()+e[p][i].se); S2[p].push(S2[v].top()+e[p][i].se); &#125; mx[p]=S1[p].top()+S1[p].stop(); mn[p]=S2[p].top()+S2[p].stop(); for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==fa)continue; mx[p]=max(mx[p],mx[v]); mn[p]=min(mn[p],mn[v]); Mx[p].push(mx[v]); Mn[p].push(mn[v]); &#125;&#125;ll res=0;void dfs2(int p,int fa)&#123; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==fa)continue; S1[p].del(S1[v].top()+e[p][i].se); S2[p].del(S2[v].top()+e[p][i].se); Mx[p].del(mx[v]); Mn[p].del(mn[v]); fmx[v]=max(0,max(fmx[p],S1[p].top())+e[p][i].se); fmn[v]=min(0,min(fmn[p],S2[p].top())+e[p][i].se); gmx[p]=max(gmx[fa],Mx[p].top()); gmx[p]=max(gmx[p],max(S1[p].stop(),fmx[p])+S1[p].top()); gmn[p]=min(gmn[fa],Mn[p].top()); gmn[p]=min(gmn[p],min(S2[p].stop(),fmn[p])+S2[p].top()); res=max(res,(ll)mx[v]*gmx[p]); res=max(res,(ll)mn[v]*gmn[p]); dfs2(v,p); S1[p].push(S1[v].top()+e[p][i].se); S2[p].push(S2[v].top()+e[p][i].se); Mx[p].push(mx[v]); Mn[p].push(mn[v]); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1,u,v,w;i&lt;n;++i)&#123; u=read(),v=read(),w=read(); e[u].pb(pii(v,w)); e[v].pb(pii(u,w)); &#125; for(ri i=1;i&lt;=n;++i)S1[i].push(0),S1[i].push(0),S2[i].push(0),S2[i].push(0),Mn[i].push(0),Mx[i].push(0); dfs1(1,0); dfs2(1,0); cout&lt;&lt;res; return 0;&#125; 前后缀max 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889#include&lt;bits/stdc++.h&gt;#define ri register int#define fi first#define se second#define pb push_backusing namespace std;typedef long long ll;const int rlen=1&lt;&lt;18|1;char buf[rlen],*ib=buf,*ob=buf;#define gc() (((ib==ob)&amp;&amp;(ob=(ib=buf)+fread(buf,1,rlen,stdin)),ib==ob)?-1:*ib++)inline int read()&#123; int ans=0; char ch=gc(); bool f=1; while(!isdigit(ch))f^=ch=='-',ch=gc(); while(isdigit(ch))ans=((ans&lt;&lt;2)+ans&lt;&lt;1)+(ch^48),ch=gc(); return f?ans:-ans;&#125;const int N=2e5+5;int n,mx[N],fmx[N],gmx[N],dmx[N];typedef pair&lt;int,int&gt; pii;vector&lt;pii&gt;e[N];struct Mxx&#123; int mx,sx; Mxx(int mx=0,int sx=0):mx(mx),sx(sx)&#123;&#125; friend inline Mxx operator+(Mxx a,Mxx b)&#123;return Mxx(max(a.mx,b.mx),a.mx&gt;b.mx?max(a.sx,b.mx):max(a.mx,b.sx));&#125;&#125;;vector&lt;Mxx&gt;pmx[N],smx[N],Pmx[N],Smx[N];inline void init(int p,int fa)&#123; int n=e[p].size(); pmx[p].resize(n+1),smx[p].resize(n+1); Pmx[p].resize(n+1),Smx[p].resize(n+1); for(ri vl,i=1,ps=1;i&lt;=n;++i,++ps)&#123; if(e[p][i-1].fi==fa)&#123;--ps;continue;&#125; vl=dmx[e[p][i-1].fi]+e[p][i-1].se; pmx[p][ps]=pmx[p][ps-1]+Mxx(max(vl,0),0); vl=mx[e[p][i-1].fi]; Pmx[p][ps]=Pmx[p][ps-1]+Mxx(max(vl,0),0); &#125; for(ri vl,i=n,ps=n-1;i;--i,--ps)&#123; if(e[p][i-1].fi==fa)&#123;++ps;continue;&#125; vl=dmx[e[p][i-1].fi]+e[p][i-1].se; smx[p][ps]=smx[p][ps+1]+Mxx(max(vl,0),0); vl=mx[e[p][i-1].fi]; Smx[p][ps]=Smx[p][ps+1]+Mxx(max(vl,0),0); &#125;&#125;void dfs1(int p,int fa)&#123; for(ri i=0,v;i&lt;e[p].size();++i)&#123; if((v=e[p][i].fi)==fa)continue; dfs1(v,p); &#125; init(p,fa); dmx[p]=smx[p][1].mx; mx[p]=max(smx[p][1].mx+smx[p][1].sx,Smx[p][1].mx);&#125;ll res=0;void dfs2(int p,int fa)&#123; Mxx mx1,mx2; for(ri i=0,v,ps=1;i&lt;e[p].size();++i,++ps)&#123; if((v=e[p][i].fi)==fa)&#123;--ps;continue;&#125; mx1=pmx[p][ps-1]+smx[p][ps+1]; mx2=Pmx[p][ps-1]+Smx[p][ps+1]; fmx[v]=max(0,max(fmx[p],mx1.mx)+e[p][i].se); gmx[p]=max(gmx[fa],mx2.mx); gmx[p]=max(gmx[p],max(mx1.sx,fmx[p])+mx1.mx); res=max(res,(ll)mx[v]*gmx[p]); dfs2(v,p); &#125;&#125;int main()&#123; #ifdef ldxcaicai freopen(\"lx.in\",\"r\",stdin); #endif n=read(); for(ri i=1,u,v,w;i&lt;n;++i)&#123; u=read(),v=read(),w=read(); e[u].pb(pii(v,w)); e[v].pb(pii(u,w)); &#125; e[1].pb(pii(0,0)); dfs1(1,0); dfs2(1,0); for(ri i=1;i&lt;=n;++i)for(ri j=0;j&lt;e[i].size();++j)e[i][j].se*=-1; dfs1(1,0); dfs2(1,0); cout&lt;&lt;res; return 0;&#125;","categories":[{"name":"public","slug":"public","permalink":"http://ldxcaicai.github.io/categories/public/"}],"tags":[{"name":"比赛题解","slug":"比赛题解","permalink":"http://ldxcaicai.github.io/tags/%E6%AF%94%E8%B5%9B%E9%A2%98%E8%A7%A3/"}]}]}